/*
 *  Copyright 2024 OpenDCS Consortium and its Contributors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License")
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opendcs.odcsapi.fixtures;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.apache.catalina.Engine;
import org.apache.catalina.Host;
import org.apache.catalina.LifecycleException;
import org.apache.catalina.Manager;
import org.apache.catalina.Pipeline;
import org.apache.catalina.connector.Connector;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.startup.HostConfig;
import org.apache.catalina.startup.Tomcat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Tomcat server for ./gradle run and
 * Integration tests
 */
public final class TomcatServer
{
	private static final Logger logger = LoggerFactory.getLogger(TomcatServer.class);
	private final SingleSignOnWrapper ssoValve = new SingleSignOnWrapper();
	private final Tomcat tomcatInstance;
	private final StandardContext context;
	private Manager sessionManager;

	/**
	 * Setups the baseline for tomcat to run.
	 *
	 * @param baseDir     set to the CATALINA_BASE directory the build has set up
	 * @param port        Network port to listen on
	 * @param contextName url prefix to use, can be "/","/odcsapi" etc
	 */
	public TomcatServer(String baseDir, int port, String contextName) throws IOException
	{

		tomcatInstance = new Tomcat();
		tomcatInstance.setBaseDir(baseDir);
		Host host = tomcatInstance.getHost();


		host.setAppBase("webapps");
		String catalinaBase = tomcatInstance.getServer().getCatalinaBase().toString();
		Files.createDirectories(Paths.get(catalinaBase, "temp"));
		Files.createDirectories(Paths.get(catalinaBase, "webapps"));
		tomcatInstance.setPort(port);
		Connector connector = tomcatInstance.getConnector();
		connector.setSecure(true);
		connector.setScheme("https");
		tomcatInstance.setSilent(false);
		tomcatInstance.enableNaming();
		Engine engine = tomcatInstance.getEngine();
		logger.atTrace().log("Got engine " + engine.getDefaultHost());

		host.addLifecycleListener(new HostConfig());
		Pipeline pipeline = host.getPipeline();
		pipeline.addValve(ssoValve);
		context = (StandardContext) tomcatInstance.addWebapp(contextName, Paths.get("src/main/webapp").toAbsolutePath().toString());
	}

	public int getPort()
	{
		return tomcatInstance.getConnector().getLocalPort();
	}

	public Manager getTestSessionManager()
	{
		return this.sessionManager;
	}

	public SingleSignOnWrapper getSsoValve()
	{
		return this.ssoValve;
	}

	/**
	 * Starts the instance of tomcat and returns when it's ready.
	 *
	 * @throws LifecycleException any error in the startup sequence
	 */
	public void start() throws LifecycleException
	{
		tomcatInstance.start();
		this.sessionManager = context.getManager();
		logger.atInfo().log("Tomcat listening at http://localhost:" + tomcatInstance.getConnector().getLocalPort());
	}

	/**
	 * Used for the ./gradlew run command.
	 * Unit tests only need to call start and move on.
	 */
	public void await()
	{
		tomcatInstance.getServer().await();
	}

	/**
	 * Stops the instance of tomcat, including destroying the JNDI context.
	 *
	 * @throws LifecycleException any error in the stop sequence
	 */
	public void stop() throws LifecycleException
	{
		tomcatInstance.stop();
	}

	/**
	 * arg[0] - the CATALINA_BASE directory you've setup
	 * arg[1] - full path to the war file generated by this build script
	 * arg[2] - name to use for this instance. See constructor for guidance
	 *
	 * @param args standard argument list
	 */
	public static void main(String[] args)
	{
		String baseDir = args[0];
		String contextName = args[1];
		int port = Integer.parseInt(System.getProperty("OPENDCS_LISTEN_PORT", "0").trim());
		try
		{
			TomcatServer tomcat = new TomcatServer(baseDir, port, contextName);
			tomcat.start();
			tomcat.await();
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.exit(-1);
		}

	}
}
