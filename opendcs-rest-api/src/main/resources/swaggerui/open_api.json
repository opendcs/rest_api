{
  "openapi": "3.0.3",
  "info": {
    "title": "OpenDCS - Swagger",
    "description": "OpenDCS Rest API is web application that provides access to the OpenDCS database using JSON (Java Script Object Notation).\nOpenDCS Rest API is intended to run as a stand-alone Java program. It uses embedded JETTY to implement the web services.\nIt was developed for the U. S. Army Corps of Engineers. Source and documentation may be found here:\n[Github Documentation](https://github.com/opendcs/odcsapi)\n\nNOTE: THE PROJECT IS NOT YET UPLOADED TO GITHUB. THE 'odcsapi.tgz' tarball contains the source image.",
    "version": "0.0.3"
  },
  "servers": [
    {
      "url": "."
    }
  ],
  "tags": [
    {
      "name": "REST - Authentication and Authorization",
      "description": "Authentication and authorization is required for any method that modifies the database."
    },
    {
      "name": "REST - Reference Lists",
      "description": "Reference lists are used in OpenDCS to populate pulldown lists and extend the functionality of the software."
    },
    {
      "name": "REST - Network Lists",
      "description": "A Network List is simply a list of Platforms."
    },
    {
      "name": "REST - DECODES Data Source Records",
      "description": "_"
    },
    {
      "name": "REST - DECODES Site Records",
      "description": "_"
    },
    {
      "name": "REST - DECODES Platform Configurations",
      "description": "_"
    },
    {
      "name": "REST - DECODES Platform Records",
      "description": "_"
    },
    {
      "name": "REST - DECODES Presentation Group Records",
      "description": "_"
    },
    {
      "name": "REST - DECODES Routing Spec Records",
      "description": "_"
    },
    {
      "name": "REST - Schedule Entry Methods",
      "description": "_"
    },
    {
      "name": "REST - Loading Application Records",
      "description": "_"
    },
    {
      "name": "REST - Algorithm Methods",
      "description": "_"
    },
    {
      "name": "REST - Computation Methods",
      "description": "_"
    },
    {
      "name": "REST - TSDB Properties Methods",
      "description": "_"
    },
    {
      "name": "REST - Engineering Unit Methods",
      "description": "_"
    },
    {
      "name": "REST - Data Type Methods",
      "description": "_"
    },
    {
      "name": "REST - Retrieving Property Specs",
      "description": "Many of the Java classes within OpenDCS maintain a set of properties that can alter the object’s behavior. This method allows the caller to get a list of acceptable properties for a given class."
    },
    {
      "name": "REST - Retrieving DCP Messages",
      "description": "_"
    },
    {
      "name": "REST - Test Decoding",
      "description": "_"
    },
    {
      "name": "Time Series Methods",
      "description": "_"
    },
    {
      "name": "Time Series Methods - Interval Methods",
      "description": "Time Intervals are stored in the database for OpenTSDB. They are hardcoded for CWMS and HDB."
    },
    {
      "name": "Time Series Methods - Groups",
      "description": "Time Series Groups are used to define a set of time series identifiers"
    },
    {
      "name": "Network List Methods",
      "description": "_"
    },
    {
      "name": "OpenDCS Process Monitor and Control (APP)",
      "description": "_"
    },
    {
      "name": "OpenDCS Process Monitor and Control (Routing)",
      "description": "The following methods allow a user to view the status of all routing specs and to start/stop them."
    }
  ],
  "paths": {
    "/credentials": {
      "summary": "The ‘credentials’ POST method is used to obtain a new token",
      "description": "Obtain login token",
      "post": {
        "summary": "The ‘credentials’ POST method is used to obtain a new token",
        "description": "The user name and password provided must be a valid login for the underlying database.   \nAlso, that user must be assigned either of the roles OTSDB_ADMIN or OTSDB_MGR. If successful, a token is returned in JSON format  \n\nTokens are valid for a finite period of time. Every time a token is used (i.e. passed to a method), its lastUsed field is updated. If more than 3 hours goes by without a token being used, it is removed from the server and is no longer valid.   \n  \n--- \n  \n  \nStarting in **API Version 0.0.3**, authentication credentials (username and password) may be passed as shown above in the POST body.   \nThey may also be passed in a GET call to the 'credentials' method, (e.g. '*http://localhost:8080/odcsapi/credentials*') containing an HTTP Authentication Basic header in the form 'username:password'.  \n  \nThe returned data to the GET call will be empty. The returned HTTP header will contain an Authentication Bearer token containing the newly-generated token.  \n  \nIn subsequent calls to any methods that modify the database, the valid token must be provided. The preferred way to do this is in an HTTP Authentication Bearer header. If secure mode is not activated when the API is started, the token may also be passed as a 'token' argument on the URL.",
        "requestBody": {
          "description": "Login Credintials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication."
          },
          "401": {
            "description": "If the passed username or password is not valid, or if the user is not assigned the required role, an HTTP 401 error is returned with an explanatory message. It will typically be one of the following:  \n* FATAL: password authentication failed for user 'xyz'\n* User xyz does not have OTSDB_ADMIN or OTSDB_MGR privilege – Not Authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "FATAL: password authentication failed for user 'xyz'"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "REST - Authentication and Authorization"
        ]
      }
    },
    "/logout": {
      "summary": "Remove access tokens and clear the client's session.",
      "description": "Clear client session",
      "get": {
        "summary": "Remove access tokens and clear the client's session.",
        "description": "Session variables for the client will be cleared. The auth token will be invalidated.",
        "responses": {
          "200": {
            "description": "Session was cleared."
          }
        },
        "tags": [
          "REST - Authentication and Authorization"
        ]
      }
    },
    "/check": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Check if token is valid for authentication",
        "description": "The ‘check’ GET method can be called with a token argument.  \nExample:  \n\n    http://localhost:8080/odcsapi/check?token=6d34fa0e3bb72fcd",
        "responses": {
          "200": {
            "description": "If the token is valid, the token JSON object will be returned in the same format as the /credentials request for authentication."
          },
          "410": {
            "description": "If the token is not valid, HTTP 410 is returned. The body of the response is JSON in the form:  \n{\"errMessage\":\"Token '6d34fa0e3bb72fcd' does not exist.\",\"status\":410}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errMessage": {
                      "type": "string",
                      "example": "Token '6d34fa0e3bb72fcd'"
                    },
                    "status": {
                      "type": "integer",
                      "example": 410
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "REST - Authentication and Authorization"
        ]
      }
    },
    "/reflists": {
      "get": {
        "summary": "The ‘reflists’ GET method will return all reference lists or a specific reference list.",
        "description": "Authentication is not required for this method, but if a token argument is provided the lastUser timer in the token will be updated.   The 'name' argument may have multiple values.   For example:    \n\n    http://localhost:8080/odcsapi/reflists?name=scripttype,dataorder  \n    \nIf no 'name' argument is provided, then all reference lists in the database are returned.   The JSON returned is an array of reference lists.  \n  \nThe following reference lists are currently available:  \n* **DataSourceType** – Used in Database Editor to link a data source name to a Java class  \n* **PortType** – Used in the polling interface \n* **ScriptType** – A list of DECODES Platform Configuration Script types (reserved for future use  \n* **StatisticsCode** – Valid statistics codes that can be used in a time series identifier  \n* **SiteNameType** – Known site name types, e.g. NWSHB5 (National Weather Service Handbook 5), USGS (Site Number), CODWR (Colorada Dept of Water Resources).  \n* **DataConsumer** – Links a data consumer type name to Java Code (e.g. File, Directory, Socket)  \n* **Measures** – A list of physical attributes measured by an engineering unit (e.g. force, temperature, mass)  \n* **UnitConversionAlgorithm** – A list of algorithms for unit conversion  \n* **DataOrder** – Ascending (oldest first) or Descending (newest first) time order  \n* **GroupType** – Used for annotation in time series groups  \n* **LoggerType** – Used in the polling interface  \n* **LookupAlgorithm**  \n* **EquationScope**  \n* **UnitFamily** – Metric, English, or Universal  \n* **OutputFormat** – Links a name to Java code for formatting output data (e.g. SHEF, CSV)  \n* **DataTypeStandard** – Known standards for specifying data type (e.g. SHEF-PE, CWMS, HDB)  \n* **TransportMediumType** – A Transport Medium uniquely identifies a platform. There are several types: GOES ID, Iridium IMEI, Polled Identifier, etc.  \n* **Season** – User can create any number of seasons that start/end at specified time of year  \n* **EquipmentType**  \n* **ApplicationType** – Computation Process, Comp Depends Daemon, DECODES Routing Scheduler, etc.  \n* **RecordingMode**",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "List of requested Ref Lists. Comma Seperated",
            "required": false,
            "schema": {
              "type": "string",
              "example": "scripttype,dataorder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If no 'name' argument is provided, then all reference lists in the database are returned.\nThe JSON returned is an array of reference lists. The data below contains the ScriptType and DataOrder reference lists:",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefLists"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Reference Lists"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create New Reference List, or Overwrite Existing Reference List",
        "description": "The ‘reflist’ POST method requires a valid token. It takes a single network list in JSON format. Note that the above GET method has a plural ‘reflists’ and returns an array of named reference lists. This POST method has singular ‘reflist’. The POST body should be a single reference list, not an array of lists.  \n\nFor creating a new reference list, leave reflistId out of the passed data structure.  \n\nFor overwriting an existing one, include the reflistId that was previously returned. The network list in the database is replaced with the one sent.",
        "requestBody": {
          "description": "refList object to post",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefListObject"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_RefListObject"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_RefListObject"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_RefListObject"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Reference Lists"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Reference List",
        "description": "The DELETE reflist method requires a valid token. \nRequired argument reflistid must be passed.  \n\nTake care in deleting reference lists. Several modules within OpenDCS require the existence of certain lists.",
        "parameters": [
          {
            "name": "reflistId",
            "in": "query",
            "description": "Requested Reference List",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 3
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Reference Lists"
        ]
      }
    },
    "/seasons": {
      "get": {
        "summary": "Seasons are used in various places in OpenDCS, usually to specify some type of conditional processing",
        "description": "Seasons are denoted by an abbreviation, a full name, start date/time, end date/time, and an optional time zone. Seasons are used in various places in OpenDCS, usually to specify some type of conditional processing. For example, a platform water-level sensor may be disabled during a winter period because the river is likely to be covered in ice.\n* The abbreviation should be a single alpha-numeric word with no embedded spaces.\n* The name may contain spaces.\n* Start and End date/time are strings in the format MM/dd-HH:mm. The specify a date and time within a year.\n* If time zone is omitted, local time on the server is assumed.\nThe GET seasons method is called with an URL like the following:",
        "responses": {
          "200": {
            "description": "A list of seasons defined on the server is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeasonList"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Reference Lists"
        ]
      }
    },
    "/season": {
      "get": {
        "summary": "return a single season data structure ",
        "description": "Instead of a list of seasons, the returned data is a single season data structure:  ",
        "operationId": "getseason",
        "parameters": [
          {
            "name": "abbr",
            "in": "query",
            "description": "season abbreviation value",
            "required": true,
            "schema": {
              "type": "string",
              "example": "autumns"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Season"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Reference Lists"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "creates or overwrites a single season record",
        "description": "The POST season operation requires a valid token. It takes a data structure like the one described above for GET season.",
        "parameters": [
          {
            "name": "fromabbr",
            "in": "query",
            "description": "existing abbr to modify",
            "required": false,
            "schema": {
              "type": "string",
              "example": "autumn"
            }
          }
        ],
        "requestBody": {
          "description": "Season Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Season"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Reference Lists"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Season",
        "description": "The POST season operation requires a valid token. It also requires an argument 'abbr' corresponding to the season abbreviation.  \n\nFor example, to DELETE the 'autumn' season, use the following URL:\n  \n    http://localhost:8080/odcsapi/season?abbr=autumn",
        "parameters": [
          {
            "name": "abbr",
            "in": "query",
            "description": "abbr value of season to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "autumn"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Reference Lists"
        ]
      }
    },
    "/netlistrefs": {
      "get": {
        "summary": "The GET netlistrefs method returns references to network lists",
        "description": "It is intended to populate a pick list of network lists and does not contain all of the list elements.\n  \nAuthentication is not required for this method, but if a token argument is provided the  \n\nExamples:  \n\n    http://localhost:8080/odcsapi/netlistrefs\n\n    http://localhost:8080/odcsapi/netlistrefs?tmtype=goes  \n  \nWith no arguments, a list of network lists in the database is returned. The format is as follows:  \n```\n[  \n  {  \n    \"lastModifyTime\": \"2020-08-22T14:36:55.705Z[UTC]\",  \n    \"name\": \"BFD-BMD\",  \n    \"netlistId\": 1,  \n    \"numPlatforms\": 3,  \n    \"siteNameTypePref\": \"nwshb5\",  \n    \"transportMediumType\": \"goes\"  \n  },  \n  {  \n    \"lastModifyTime\": \"2020-12-15T17:51:04.194Z[UTC]\",  \n    \"name\": \"goes2\",  \n    \"netlistId\": 6,  \n    \"numPlatforms\": 3,  \n    \"siteNameTypePref\": \"nwshb5\",  \n    \"transportMediumType\": \"goes\"  \n  }  \n]\n```  \n\n**Note** that the list contents (i.e. the references to the platforms in the list) is not included. Rather a count of platforms in the list is given.\nThe 'netlistId' element is a unique key to be used for retrieving entire lists.",
        "parameters": [
          {
            "name": "tmtype",
            "in": "query",
            "description": "transport medium type",
            "required": false,
            "schema": {
              "type": "string",
              "example": "goes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRefList"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Network Lists"
        ]
      }
    },
    "/netlist": {
      "get": {
        "summary": "The ‘netlists’ GET method will return a specific network list in its entirety.",
        "description": "Example:  \n\n    http://localhost:8080/odcsapi/netlist?netlistid=1\n\n\nAuthentication is not required for this method, but if a token argument is provided the lastUser timer in the token will be updated.",
        "parameters": [
          {
            "name": "netlistid",
            "in": "query",
            "description": "network list id",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "status": 404,
                  "message": "The requested netlistid was not found in the database."
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "example": {
                  "status": 406,
                  "message": "The required ‘netlistid’ parameter was missing in the URL."
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Network Lists"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Netlist",
        "description": "The ‘netlist’ POST method requires a valid token.  \n  \nIt takes a single network list in JSON format, as described for the GET method:\n```\n{\n  \"items\": {\n    \"14159500\": {\n      \"description\": \"\",\n      \"platformName\": \"CGRO\",\n      \"transportId\": \"14159500\"\n    },\n    \"14372300\": {\n      \"description\": \"\",\n      \"platformName\": \"AGNO\",\n      \"transportId\": \"14372300\"\n    }\n  },\n  \"lastModifyTime\": \"2020-10-19T18:14:14.788Z[UTC]\",\n  \"name\": \"USGS-Sites\",\n  \"netlistId\": 4,\n  \"siteNameTypePref\": \"nwshb5\",\n  \"transportMediumType\": \"other\"\n}\n```\n  \nFor creating a new network list, leave netlistId out of the passed data structure.\n  \nFor overwriting an existing one, include the netlistId that was previously returned. The network list in the database is replaced with the one sent.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetList"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_NetList"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_NetList"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_NetList"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Network Lists"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing netlists",
        "description": "The DELETE netlist method requires a valid token.   \n  \nRequired argument netlistid must be passed.  \n  \nError 405 will be returned if network list is used by one or more routing specs and cannot be deleted. The body of the error will be a message containing the name of the routing specs using the referenced netlist.",
        "parameters": [
          {
            "name": "netlistid",
            "in": "query",
            "description": "id to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": 4
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Network Lists"
        ]
      }
    },
    "/datasourcerefs": {
      "get": {
        "summary": "This method returns a JSON list of DECODES Data Source records suitable for displaying in a table or pick-list",
        "description": "\nExample:  \n\n    http://localhost:8080/odcsapi/datasourcerefs\n\n\nThe returned structure contains only the high-level descriptive information about each data source.\n\nThe arguments (properties) are represented by a string with comma delimiter. Passwords within the string are replaced with four asterisks.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceRef"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Data Source Records"
        ]
      }
    },
    "/datasource": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "The GET datasource method returns a single DECODES data source with all of its detail.",
        "description": "The integer argument datasourceid is required.  \nExample:\n\n    http://localhost:8080/odcsapi/datasource?datasourceid=10",
        "parameters": [
          {
            "name": "datasourceid",
            "in": "query",
            "description": "id of requested data source",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Data Source Records"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Datasource",
        "description": "The ‘datasource’ POST method requires a valid token. It takes a single datasource in JSON format, as described for the GET method.  \n\nFor creating a new network list, leave datasourceId out of the passed data structure.  \n\nFor overwriting an existing one, include the datasourceId that was previously returned by GET. The network list in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Login Credintials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSource"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_DataSource"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_DataSource"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_DataSource"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Data Source Records"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Data Source",
        "description": "The DELETE datasource method requires a valid token.  \n\nRequired argument datasource id must be passed. \n\nError 405 will be returned if datasource list is used by one or more routing specs and cannot be deleted. The body of the error will be a message containing the name of the routing specs using the referenced netlist.",
        "parameters": [
          {
            "name": "datasourceid",
            "in": "query",
            "description": "id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Data Source Records"
        ]
      }
    },
    "/siterefs": {
      "get": {
        "summary": "This method returns a JSON list of DECODES Site records suitable for displaying in a table or pick-list.",
        "description": "The returned structure contains only the  numeric ID (unique), description, and an array of site names  \n  \nExample:\n  \n    http://localhost:8080/odcsapi/siterefs\n  \n**Note**:The numeric ID may be used in subsequent calls to the 'site' method.",
        "operationId": "getsiterefs",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "example": [
                  {
                    "description": "Iowa River at Oakville, IA (USGS)",
                    "siteId": 1,
                    "sitenames": {
                      "CWMS": "OKVI4",
                      "nwshb5": "OKVI4",
                      "usgs": "05465700",
                      "local": "OKVI4"
                    }
                  },
                  {
                    "description": "IOWA RIVER NEAR ROWAN 4NW",
                    "siteId": 2,
                    "sitenames": {
                      "CWMS": "ROWI4",
                      "USGS": "05449500"
                    }
                  },
                  {
                    "description": "Site used for Regression Testing",
                    "siteId": 3,
                    "sitenames": {
                      "CWMS": "TESTSITE1"
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Site Records"
        ]
      }
    },
    "/site": {
      "get": {
        "summary": "This method returns a JSON representation of a single, complete DECODES Site record",
        "description": "Example:\n  \n    http://localhost:8080/odcsapi/site?siteid=3\n\nThe structure is as follows:\n```\n{\n  \"country\": \"USA\",\n  \"description\": \"Barre Falls Dam, Ware River\",\n  \"elevUnits\": \"M\",\n  \"elevation\": 234.7,\n  \"latitude\": \"42.4278\",\n  \"longitude\": \"-72.0261\",\n  \"nearestCity\": \"Barre Falls Dam\",\n  \"properties\": {\n    \"some\": \"thing\",\n    \"something\": \"else\"\n  },\n  \"region\": \"\",\n  \"siteId\": 7,\n  \"sitenames\": {\n    \"CWMS\": \"BFD\",\n    \"NWSHB5\": \"BFD\"\n  },\n  \"state\": \"MA\",\n  \"timezone\": \"America/New_York\"\n}\n```",
        "operationId": "getsite",
        "parameters": [
          {
            "name": "siteid",
            "in": "query",
            "description": "id to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Site Records"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Site",
        "description": "The POST site method requires a valid token. It takes a single DECODES site record in JSON format, as described above for GET site.  \n  \nFor creating a new site, leave siteId out of the passed data structure.  \n\nFor overwriting an existing one, include the siteId that was previously returned. The site list in the database is replaced with the one sent.",
        "operationId": "postsite",
        "requestBody": {
          "description": "Site Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Site"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_Site"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_Site"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_Site"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Site Records"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Site",
        "description": "The DELETE site method requires a valid token.  \n\nRequired argument siteid must be passed.  \n\nError 405 will be returned if site is used by one or more platforms and cannot be deleted.",
        "operationId": "deletesite",
        "parameters": [
          {
            "name": "siteid",
            "in": "query",
            "description": "id fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 3
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Site Records"
        ]
      }
    },
    "/configrefs": {
      "get": {
        "summary": "This method returns a JSON list of DECODES Config records suitable for displaying in a table or pick-list",
        "description": "Example:\n\n    http://localhost:8080/odcsapi/configrefs\n\n\nThis method returns a JSON list of DECODES Config records suitable for displaying in a table or pick-list. The returned structure contains an array in the following format:\n\n  **Note**:The numeric ID may be used in subsequent calls to the 'config' method.\n\n```\n[\n  {\n    \"configId\": 1,\n    \"description\": \"WSC SHEF - 2 sensors - HG, VB\",\n    \"name\": \"Shef-WSC-Hydro-RCOYCHER\",\n    \"numPlatforms\": 1\n  },\n  {\n    \"configId\": 2,\n    \"description\": \"WSC SHEF - 2 sensors - QR=QF, HG\",\n    \"name\": \"Shef-WSC-Hydro-RBRDDDVH\",\n    \"numPlatforms\": 1\n  },\n  {\n    \"configId\": 3,\n    \"description\": \"WSC SHEF - 2 sensors - HG, VB\",\n    \"name\": \"Shef-WSC-Hydro-RBLOCLEE\",\n    \"numPlatforms\": 1\n  },\n  {\n    \"configId\": 4,\n    \"description\": \"AE SHEF - 4 sensors - PC, TA, SW, YB=VB\",\n    \"name\": \"Shef-AE-Met-SESK\",\n    \"numPlatforms\": 1\n  },\n  {\n    \"configId\": 5,\n    \"description\": \"WSC SHEF - 2 sensors - HG, VB\",\n    \"name\": \"Shef-WSC-Hydro-RBULLRES\",\n    \"numPlatforms\": 1\n  },\n  {\n    \"configId\": 6,\n    \"description\": \"WSC SHEF - 2 sensors - HG, VB\",\n    \"name\": \"Shef-WSC-Hydro-RREDBIN\",\n    \"numPlatforms\": 1\n  }\n]\n```",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigRefs"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Configurations"
        ]
      }
    },
    "/config": {
      "get": {
        "summary": "This method returns a JSON representation of a single, complete DECODES Config record",
        "description": "Example:  \n\n    http://localhost:8080/odcsapi/config?configid=12\n\n\nThis method returns a JSON representation of a single, complete DECODES Config record. ",
        "parameters": [
          {
            "name": "configid",
            "in": "query",
            "description": "id fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Configurations"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Config",
        "description": "The POST config method requires a valid token. It takes a single DECODES Platform Configuration record in JSON format, as described above for GET config.   \n\nFor creating a new config, leave configId out of the passed data structure.  \n\nFor overwriting an existing one, include the configId that was previously returned. The configuration in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Config Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Config"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_Config"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_Config"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_Config"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Configurations"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Config",
        "description": "The DELETE config method requires a valid token.   \n\nRequired argument configid must be passed.  \n\nError 405 will be returned if the referenced configuration is used by one or more platforms and cannot be deleted.",
        "parameters": [
          {
            "name": "configid",
            "in": "query",
            "description": "id fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 12
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Configurations"
        ]
      }
    },
    "/platformrefs": {
      "get": {
        "summary": "The GET platformrefs method returns a list of platforms",
        "description": "The GET platformrefs method returns a list of platforms, optionally with a given Transport Medium type.  \n\nIt accepts the following arguments:  \n* **tmtype** – the transport medium type desired. If not provided, all types are returned. The method will return any platform that has a transport medium with the given type. The returned data structure will still contain all of the transport media in the platform, but the list of platforms will be filtered to only include platforms with a TM of the given type:\n  * **NOTE**: medium type 'goes' will match either goes-self-timed or goes-random.\n* **token:** Not required, but if included, the token lastUsed time will be updated.  \n\nData Structure TBD but will include  \n* **name** – an index into the hashed set. Combination of site name and designator  \n* **agency** – The agency that owns and/or maintains this platform  \n* **configId** – Numeric surrogate key to the configuration record  \n* **description**  \n* **platformId** - Numeric surrogate key to the platform record  \n* **siteId** - Numeric surrogate key to the site record  \n* **transportMedia** – a list of tmtype/tm id pairs.",
        "operationId": "getplatformrefs",
        "parameters": [
          {
            "name": "tmtype",
            "in": "query",
            "description": "transport medium type",
            "required": false,
            "schema": {
              "type": "string",
              "example": "goes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformRefs"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Records"
        ]
      }
    },
    "/platform": {
      "get": {
        "summary": "This method returns a JSON representation of a single, complete DECODES Platform record",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/platform?platformid=5",
        "operationId": "getplatform",
        "parameters": [
          {
            "name": "platformid",
            "in": "query",
            "description": "platform id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodesPlatform"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Records"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Decodes Platform",
        "description": "The POST platform method requires a valid token. It takes a single DECODES Platform record in JSON format, as described above for GET.  \n\nFor creating a new platform, leave platformId out of the passed data structure.  \n\nFor overwriting an existing one, include the platformId that was previously returned. The platform in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Decodes Platform Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecodesPlatform"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_DecodesPlatform"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_DecodesPlatform"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_DecodesPlatform"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Records"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Decodes Platform",
        "description": "The DELETE platform method requires a valid token. \n\nRequired argument platformid must be passed.",
        "parameters": [
          {
            "name": "platformid",
            "in": "query",
            "description": "platform id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 5
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Platform Records"
        ]
      }
    },
    "/presentationrefs": {
      "get": {
        "summary": "Returns a list of references to presentation groups suitable for displaying a list",
        "description": "",
        "operationId": "getdecodespresentationrefs",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodesPresentationRefs"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Presentation Group Records"
        ]
      }
    },
    "/presentation": {
      "get": {
        "summary": "This method returns a JSON representation of a single, complete DECODES Presentation Group record",
        "description": "Example:  \n\n    http://localhost:8080/odcsapi/presentation?groupid=4\n\n\nThis method returns a JSON representation of a single, complete DECODES Presentation Group record. The following structure is returned.   \n  \n**Note**: the optional min and max elements are not always present.",
        "parameters": [
          {
            "name": "groupid",
            "in": "query",
            "description": "presentation group id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodesPresentationGroup"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Presentation Group Records"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Decodes Presentation Group",
        "description": "The POST presentation method requires a valid token. It takes a single DECODES Presentation Group in JSON format, as described above for GET.   \n\nFor creating a new record, leave groupId out of the passed data structure.  \n\nFor overwriting an existing one, include the groupId that was previously returned. The presentation group in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Decodes Presentation Group Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecodesPresentationGroup"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_DecodesPresentationGroup"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_DecodesPresentationGroup"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_DecodesPresentationGroup"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Presentation Group Records"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Presentation Group",
        "description": "The DELETE platform method requires a valid token.   \nRequired argument groupid must be passed in the URL.",
        "parameters": [
          {
            "name": "groupid",
            "in": "query",
            "description": "presentation group id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Presentation Group Records"
        ]
      }
    },
    "/routingrefs": {
      "get": {
        "summary": "",
        "description": "",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodesRoutingRef"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Routing Spec Records"
        ]
      }
    },
    "/routing": {
      "get": {
        "summary": "This method returns a JSON representation of a single routing spec",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/routing?routingid=20",
        "parameters": [
          {
            "name": "routingid",
            "in": "query",
            "description": "routing spec id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodesRoutingSpec"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Routing Spec Records"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Routing Spec",
        "description": "The POST routing method requires a valid token. It takes a single DECODES Routing Spec in JSON format, as described above for GET.  \n\nFor creating a new record, leave routingId out of the passed data structure.  \n\nFor overwriting an existing one, include the routingId that was previously returned. The routing spec in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Decodes Presentation Group Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecodesRoutingSpec"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_DecodesRoutingSpec"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_DecodesRoutingSpec"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_DecodesRoutingSpec"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Routing Spec Records"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Decodes Routing Spec",
        "description": "The DELETE routing method requires a valid token.  \n\nRequired argument routingid must be passed in the URL.",
        "parameters": [
          {
            "name": "routingid",
            "in": "query",
            "description": "routing spec id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 20
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - DECODES Routing Spec Records"
        ]
      }
    },
    "/schedulerefs": {
      "get": {
        "summary": "",
        "description": "Example:  \n\n    http://localhost:8080/odcsapi/schedulerefs\n\nThe returned structure is:\n  \n**Note**: in the third entry below that appName may be omitted. In the database, a schedule entry may not (yet) be assigned to an application.\n```\n[\n  {\n    \"appName\": \"RoutingScheduler\",\n    \"enabled\": false,\n    \"lastModified\": \"2020-12-15T17:52:13.934Z[UTC]\",\n    \"name\": \"goes1\",\n    \"routingSpecName\": \"goes1\",\n    \"schedEntryId\": 9\n  },\n  {\n    \"appName\": \"RoutingScheduler\",\n    \"enabled\": false,\n    \"lastModified\": \"2020-12-15T17:53:06.043Z[UTC]\",\n    \"name\": \"goes2\",\n    \"routingSpecName\": \"goes2\",\n    \"schedEntryId\": 10\n  },\n  {\n    \"enabled\": false,\n    \"lastModified\": \"2022-03-23T13:54:09.188Z[UTC]\",\n    \"name\": \"no_app_assigned\",\n    \"routingSpecName\": \"polltest\",\n    \"schedEntryId\": 17\n  },\n  {\n    \"appName\": \"RoutingScheduler\",\n    \"enabled\": false,\n    \"lastModified\": \"2022-01-14T14:45:01.336Z[UTC]\",\n    \"name\": \"junk\",\n    \"routingSpecName\": \"polltest\",\n    \"schedEntryId\": 14\n  }\n]\n```",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleRefs"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Schedule Entry Methods"
        ]
      }
    },
    "/schedule": {
      "get": {
        "summary": "This method returns a JSON representation of a single schedule entry",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/schedule?scheduleid=21",
        "parameters": [
          {
            "name": "scheduleid",
            "in": "query",
            "description": "schedule id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 21
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Schedule Entry Methods"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing Schedule",
        "description": "The POST schedule method requires a valid token. It takes a single DECODES Schedule Entry in JSON format, as described above for GET.   \n\nFor creating a new record, leave schedEntryId out of the passed data structure.  \n\nFor overwriting an existing one, include the schedEntryId that was previously returned. The routing spec in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Schedule Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_Schedule"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_Schedule"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_Schedule"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Schedule Entry Methods"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing Schedule",
        "description": "The DELETE schedule method requires a valid token. \n\nRequired argument scheduleid must be passed in the URL.",
        "parameters": [
          {
            "name": "scheduleid",
            "in": "query",
            "description": "schedule id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 21
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Schedule Entry Methods"
        ]
      }
    },
    "/apprefs": {
      "get": {
        "summary": "",
        "description": "Example:  \n\n    http://localhost:8080/odcsapi/apprefs",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppRefs"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Loading Application Records"
        ]
      }
    },
    "/app": {
      "get": {
        "summary": "",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/app?appid=4  \n**Note**: appType may be omitted if it is not defined in the database.",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "app id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadingApp"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Loading Application Records"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing App",
        "description": "The POST app method requires a valid token. It takes a single DECODES Loading Application in JSON format, as described above for GET.  \n\nFor creating a new record, leave appId out of the passed data structure.  \n\nFor overwriting an existing one, include the appId that was previously returned. The app in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Loading App",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadingApp"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_LoadingApp"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_LoadingApp"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_LoadingApp"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Loading Application Records"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existint Loading App",
        "description": "The DELETE schedule method requires a valid token.  \n\nRequired argument appid must be passed in the URL.  \n\nThis operation will fail if the loading application is currently being used by any computations or schedule entries, or if it is currently running and has an active CP_COMP_PROC_LOCK record.",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "app id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Loading Application Records"
        ]
      }
    },
    "/algorithmrefs": {
      "get": {
        "summary": "",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/algorithmrefs",
        "operationId": "getalgorithmrefs",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlgorithmRefs"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Algorithm Methods"
        ]
      }
    },
    "/algorithm": {
      "get": {
        "summary": "",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/algorithm?algorithmid=4",
        "parameters": [
          {
            "name": "algorithmid",
            "in": "query",
            "description": "algorithm id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenDCSAlgorithm"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Algorithm Methods"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing OpenDCS Algorithm",
        "description": "The POST algorithm method requires a valid token. It takes a single OpenDCS Algorithm Record in JSON format, as described above for GET.   \n\nFor creating a new record, leave algorithmId out of the passed data structure.  \n\nFor overwriting an existing one, include the algorithmId that was previously returned. The algorithm in the database is replaced with the one sent.",
        "requestBody": {
          "description": "OpenDcs Algorithm",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenDCSAlgorithm"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_OpenDCSAlgorithm"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_OpenDCSAlgorithm"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_OpenDCSAlgorithm"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Algorithm Methods"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing OpenDCS Algorithm",
        "description": "The DELETE algorithm method requires a valid token.  \n\nRequired argument algorithmid must be passed in the URL.  \n\nThis operation will fail if the algorithm is currently being used by any computation records.",
        "parameters": [
          {
            "name": "algorithmid",
            "in": "query",
            "description": "algorithm id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Algorithm Methods"
        ]
      }
    },
    "/computationrefs": {
      "get": {
        "summary": "",
        "description": "Example:  \n\n    http://localhost:8080/odcsapi/computationrefs",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationRefs"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Computation Methods"
        ]
      }
    },
    "/computation": {
      "get": {
        "summary": "",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/computation?computationid=4",
        "parameters": [
          {
            "name": "computationid",
            "in": "query",
            "description": "computation id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenDCSComputation"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Computation Methods"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create or Overwrite Existing OpenDCS Computation",
        "description": "The POST computation method requires a valid token. It takes a single OpenDCS Computation Record in JSON format, as described above for GET.  \n\nFor creating a new record, leave computationId out of the passed data structure.  \n\nFor overwriting an existing one, include the computationId that was previously returned. The computation in the database is replaced with the one sent.",
        "requestBody": {
          "description": "Computation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenDCSComputation"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_OpenDCSComputation"
                },
                "new": {
                  "$ref": "#/components/examples/POST_NEW_OpenDCSComputation"
                },
                "update": {
                  "$ref": "#/components/examples/POST_UPDATE_OpenDCSComputation"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Computation Methods"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Existing OpenDCS Computation",
        "description": "The DELETE computation method requires a valid token.  \n\nRequired argument computationid must be passed in the URL.",
        "parameters": [
          {
            "name": "computationid",
            "in": "query",
            "description": "computation id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Computation Methods"
        ]
      }
    },
    "/resolvecomp": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "",
        "description": "Example URL for POST:\n\n\n    http://localhost:8080/odcsapi/resolvecomp?token=6b994be905e1fddf\n\n\nThis method requires a valid session token.  \n\nThe POST data should be a computation in the format described above for GET computation.  \n\nThe returned data will be a JSON array all time-series that can act as triggering inputs for the specified computation. For group-type computations, this may be many.",
        "requestBody": {
          "description": "Computation Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenDCSComputation"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_OpenDCSComputation"
                },
                "verbose": {
                  "$ref": "#/components/examples/POST_UPDATE_OpenDCSComputation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenDCSComputationTimeseries"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Computation Methods"
        ]
      }
    },
    "/comptest": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "",
        "description": "Example URL for POST:  \n\n    http://localhost:8080/odcsapi/comptest?token=6b994be905e1fddf\n\n\nThis method requires a valid session token.  \nThe POST data is a special request structure that contains the computation to be tested, the time series to be used for testing, and the following three variables:  \n\n* **'since'** – date/time for the start of data  \n* **'until'** – date/time for the end of the data  \n* **'traceOutput'** – a Boolean value indicating whether you want trace-log data in the returned results. Note: if a large time window is selected, the trace results can be quite voluminous.  \n  \nA sample comptest request data structure is shown below:  \n```\n  {\n    \"computation\":\n    {\n      \"computationId\": 5,\n      \"name\": \"MROI4-ROWI4-Stage-Copy\",\n      \"comment\": \"\",\n      \"appId\": 5,\n      \"applicationName\": null,\n      \"lastModified\": 1654538252952,\n      \"enabled\": false,\n      \"effectiveStartType\": \"No Limit\",\n      \"effectiveStartDate\": null,\n      \"effectiveStartInterval\": null,\n      \"effectiveEndType\": \"No Limit\",\n      \"effectiveEndDate\": null,\n      \"effectiveEndInterval\": null,\n      \"algorithmId\": 26,\n      \"algorithmName\": \"CopyAlgorithm\",\n      \"parmList\": [\n        {\n          \"algoParmType\": \"i\",\n          \"algoRoleName\": \"input\",\n          \"tsKey\": null,\n          \"dataTypeId\": null,\n          \"dataType\": \"\",\n          \"interval\": \"\",\n          \"deltaT\": 0,\n          \"deltaTUnits\": null,\n          \"unitsAbbr\": null,\n          \"siteId\": null,\n          \"siteName\": \"\",\n          \"tableSelector\": null,\n          \"modelId\": null,\n          \"paramType\": \"\",\n          \"duration\": \"\",\n          \"version\": \"\",\n          \"ifMissing\": null\n        },\n        {\n          \"algoParmType\": \"o\",\n          \"algoRoleName\": \"output\",\n          \"tsKey\": null,\n          \"dataTypeId\": null,\n          \"dataType\": \"\",\n          \"interval\": \"\",\n          \"deltaT\": 0,\n          \"deltaTUnits\": null,\n          \"unitsAbbr\": null,\n          \"siteId\": null,\n          \"siteName\": \"\",\n          \"tableSelector\": null,\n          \"modelId\": null,\n          \"paramType\": \"\",\n          \"duration\": \"\",\n          \"version\": \"rev\",\n          \"ifMissing\": null\n        }\n      ],\n      \"props\": {},\n      \"groupId\": 1,\n      \"groupName\": \"MROI4-ROWI4-HG\"\n    },\n      \"tsid\": {\n        \"uniqueString\": \"ROWI4.Stage.Inst.15Minutes.0.raw\",\n        \"key\": 8,\n        \"description\": \"ROWI4 - Stage (created by DECODES)\",\n        \"storageUnits\": \"ft\"\n      },\n      \"since\": \"2000-12-19T20:15:00.000Z[UTC]\",\n      \"until\": \"2022-12-19T20:15:00.000Z[UTC]\",\n      \"traceOutput\": true\n  }\n\n```",
        "requestBody": {
          "description": "Comp Test",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenDCSCompTestRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_OpenDCSCompTestRequest"
                },
                "verbose": {
                  "$ref": "#/components/examples/POST_VERBOSE_OpenDCSCompTestRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenDCSCompTestResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Computation Methods"
        ]
      }
    },
    "/tsdb_properties": {
      "get": {
        "summary": "",
        "description": "Example:  \n\n    http://localhost:8080/odcsapi/tsdb_properties?token=1241234  \n    \n    \n* The token argument is optional. If supplied it will reset the timer on the token.\nThe tsdb_properties table in the database will be returned in a structure as follows:  \n  \n```\n  {\n    \"offsetErrorAction\": \"ROUND\",\n    \"storagePresentationGroup\": \"hydrodcs\",\n    \"api.datasource\": \"Cove-LRGS\",\n    \"allowDstOffsetVariation\": \"true\"\n  }\n\n```",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tsdb_properties"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - TSDB Properties Methods"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "",
        "description": "The POST tsdb_properties method requires a valid token. It takes one ore more properties in a structure as defined above for the GET method.  \n\n*\tAny property with the same name as one supplied will be overwritten by the passed value.\n*\tIf there is no property in the database with a matching name, a new property is added.\n*\tTo delete a property from the database, pass an empty string as the value.",
        "requestBody": {
          "description": "tsdb properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tsdb_properties"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - TSDB Properties Methods"
        ]
      }
    },
    "/unitlist": {
      "get": {
        "summary": "Returns an array of data structures representing all known Engineering Units ",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/unitlist  \n  \n  * The token argument is optional. If supplied it will reset the timer on the token.  \n  \n  An array of data structures representing all known Engineering Units will be returnd as shown below.  \n  \n  ```\n    [\n      {\n        \"abbr\": \"$\",\n        \"family\": \"univ\",\n        \"measures\": \"Currency\",\n        \"name\": \"Dollars\"\n      },\n      {\n        \"abbr\": \"%\",\n        \"family\": \"univ\",\n        \"measures\": \"ratio\",\n        \"name\": \"percent\"\n      },\n      {\n        \"abbr\": \"1000 m2\",\n        \"family\": \"Metric\",\n        \"measures\": \"Area\",\n        \"name\": \"Thousands of square meters\"\n      },\n      {\n        \"abbr\": \"1000 m3\",\n        \"family\": \"Metric\",\n        \"measures\": \"Volume\",\n        \"name\": \"Thousands of cubic meters\"\n      },\n      {\n        \"abbr\": \"C\",\n        \"family\": \"Metric\",\n        \"measures\": \"Temperature\",\n        \"name\": \"Centigrade\"\n      },\n    …\n    ]\n\n  ```",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eu"
                  }
                },
                "example": [
                  {
                    "abbr": "$",
                    "family": "univ",
                    "measures": "Currency",
                    "name": "Dollars"
                  },
                  {
                    "abbr": "%",
                    "family": "univ",
                    "measures": "ratio",
                    "name": "percent"
                  },
                  {
                    "abbr": "1000 m2",
                    "family": "Metric",
                    "measures": "Area",
                    "name": "Thousands of square meters"
                  },
                  {
                    "abbr": "1000 m3",
                    "family": "Metric",
                    "measures": "Volume",
                    "name": "Thousands of cubic meters"
                  },
                  {
                    "abbr": "C",
                    "family": "Metric",
                    "measures": "Temperature",
                    "name": "Centigrade"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Engineering Unit Methods"
        ]
      }
    },
    "/eu": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new, or update an existing Engineering Unit",
        "description": "Example URL for POST:  \n\n    http://localhost:8080/odcsapi/eu?token=6b994be905e1fddf\n\n\nThis method requires a valid session token.  \nThe POST data should contain a single engineering unit as described above for unitlist.\n  For example, to create a new unit with abbreviation 'blob', the data could be:  \n  ```\n  {\n    \"abbr\": \"blob\",\n    \"family\": \"Metric\",\n    \"measures\": \"stuff\",\n    \"name\": \"A Blob of Stuff\"\n  }\n  ```",
        "requestBody": {
          "description": "engineering unit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eu"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Engineering Unit Methods"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete an existing Engineering Unit",
        "description": "Delete an existing Engineering Unit record.  \nExample URL for DELETE:  \n\n    http://localhost:8080/odcsapi/eu?token=6b994be905e1fddf&abbr=blob",
        "parameters": [
          {
            "name": "abbr",
            "in": "query",
            "description": "engineering unit abbreviation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "blob"
            }
          }
        ],
        "operationId": "",
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Engineering Unit Methods"
        ]
      }
    },
    "/euconvlist": {
      "get": {
        "summary": "Returns a list of Engineering Unit Conversions defined in the database",
        "description": "Returns a list of Engineering Unit Conversions defined in the database.  \nExample:  \n\n    http://localhost:8080/odcsapi/unitlist  \n\n* The token argument is optional. If supplied it will reset the timer on the token.  \\n\\nAn array of data structures representing all known conversions will be returned as shown below.  \n\n```\n  [\n    {\n      \"ucId\": 3689,\n      \"fromAbbr\": \"m^3/s\",\n      \"toAbbr\": \"cms\",\n      \"algorithm\": \"none\",\n      \"a\": 0,\n      \"b\": 0,\n      \"c\": 0,\n      \"d\": 0,\n      \"e\": 0,\n      \"f\": 0\n    },\n    {\n      \"ucId\": 3690,\n      \"fromAbbr\": \"ft\",\n      \"toAbbr\": \"in\",\n      \"algorithm\": \"linear\",\n      \"a\": 12,\n      \"b\": 0,\n      \"c\": 0,\n      \"d\": 0,\n      \"e\": 0,\n      \"f\": 0\n    },\n  . . .\n  ]\n```",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EUConversion"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Engineering Unit Methods"
        ]
      }
    },
    "/euconv": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new, or update an existing Engineering Unit Conversion",
        "description": "Example URL for POST:  \n\n    http://localhost:8080/odcsapi/euconv?token=6b994be905e1fddf  \n\n\nThis method requires a valid session token.  \n\nThe POST data should contain a single engineering unit conversion as described above for euconvlist.  \n\nFor example, to create a new conversion that declares 'cms' to be a synonym of 'blob', the data could be:\n```\n  {\n    \"fromAbbr\": \"cms\",\n    \"toAbbr\": \"blob\",\n    \"algorithm\": \"none\",\n    \"a\": 0,\n    \"b\": 0,\n    \"c\": 0,\n    \"d\": 0,\n    \"e\": 0,\n    \"f\": 0\n  }\n  ```\n\n**Note**: the 'none' algorithm means that no conversion is required and the coefficients A-F are ignored. It essentially means that the two units are synonyms.  \n\n**Note**: that we left off the 'ucId' member since we were creating a new conversion. To update an existing one, include 'ucId'.  \n\nThe returned data structure will be the same as the data passed, except that if this is a new conversion the ucId member will be added.",
        "requestBody": {
          "description": "Engineering Unit Conversion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EUConversion"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The returned data structure will be the same as the data passed, except that if this is a new conversion the ucId member will be added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EUConversion"
                }
              }
            }
          }
        },
        "tags": [
          "REST - Engineering Unit Methods"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete an existing Engineering Unit conversion record.",
        "description": "Example URL for DELETE:\n\n    http://localhost:8080/odcsapi/euconv?token=6b994be905e1fddf&euconvid=1459\n\n\nThis deletes the EU Conversion record with ID 1459.",
        "parameters": [
          {
            "name": "euconvid",
            "in": "query",
            "description": "EU Conversion Id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1459
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Engineering Unit Methods"
        ]
      }
    },
    "/datatypelist": {
      "get": {
        "summary": "",
        "description": "Examples:  \n\n    http://localhost:8080/odcsapi/datatypelist  \n\n    http://localhost:8080/odcsapi/datatypelist?standard=cwms  \n\n\nThe returned data structure is an array of JSON data type objects:\n```\n[\n  {\n    \"code\": \"72114\",\n    \"displayName\": \"CWMS:72114\",\n    \"id\": 367,\n    \"standard\": \"CWMS\"\n  },\n  {\n    \"code\": \"Address\",\n    \"displayName\": \"CWMS:Address\",\n    \"id\": 368,\n    \"standard\": \"CWMS\"\n  },\n  {\n    \"code\": \"Code-Channel\",\n    \"displayName\": \"CWMS:Code-Channel\",\n    \"id\": 382,\n    \"standard\": \"CWMS\"\n  },\n  {\n    \"code\": \"Code-DCPAddress\",\n    \"displayName\": \"CWMS:Code-DCPAddress\",\n    \"id\": 372,\n    \"standard\": \"CWMS\"\n  },\n  {\n    \"code\": \"Depth-Snow\",\n    \"id\": 72,\n    \"standard\": \"CWMS\"\n  },\n…\n]\n```\n\nIf the optional ‘standard’ argument is supplied, then only data types with the matching standard are returned. Otherwise all data types in the database are returned sorted by (standard, code).",
        "parameters": [
          {
            "name": "standard",
            "in": "query",
            "description": "standard",
            "required": false,
            "schema": {
              "type": "string",
              "example": "cwms"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/datatypelist"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Data Type Methods"
        ]
      }
    },
    "/propspecs": {
      "get": {
        "summary": "",
        "description": "GET propspecs?class=FullyQualifiedClassName\n\nMany of the Java classes within OpenDCS maintain a set of properties that can alter the object’s behavior. This method allows the caller to get a list of acceptable properties for a given class.  \n\nFor example, here are the properties accepted by the class decodes.db.Platform\nGET propspecs?class=decodes.db.Platform\n```\n[\n  {\n    \"description\": \"(default=0) Set to 1, 2, 3 for increasing levels of debug information when this platform is decoded.\",\n    \"dynamic\": false,\n    \"name\": \"debugLevel\",\n    \"type\": \"i\"\n  },\n  {\n    \"description\": \"Set to have this platform ignored during a specified season.\",\n    \"dynamic\": false,\n    \"name\": \"ignoreSeason\",\n    \"type\": \"e:Season\"\n  },\n  {\n    \"description\": \"Set to have this platform only processed during a specified season.\",\n    \"dynamic\": false,\n    \"name\": \"processSeason\",\n    \"type\": \"e:Season\"\n  },\n  {\n    \"description\": \"(default=3) For polled stations, this determines the order in which they will be polled (1 = highest priority = polled first)\",\n    \"dynamic\": false,\n    \"name\": \"pollPriority\",\n    \"type\": \"i\"\n  }\n]\n```\nAn array of PropertySpec objects is returned in JSON format:\n*\t'name' is the property name\n*\t'description' is a description displayed to the user as a tooltip or in a dialog to set the property.\n*\t'type' gives the code information about acceptable values for this property.\n*\t'dynamic' is not used and should be ignored.  \n\nThe 'type' variable can be used by the code to offer a pull-down list or to limit the range of acceptable values. 'type' will be one of the following: \n\n| value            | Description |\n| ---------------- | ------------|\n| **i** | Integer – Value can only be a whole number.     |\n| **n** | Number – may be integer or floating point |\n| **b** | Boolean – Value can be 'true' or 'false' |\n| **f** | Filename|\n| **d** | Directory Name|\n| **s** | Free-form string|\n| **t** | Time Zone Abbreviation – See the Java TimeZone doc for a list of acceptable abbreviations.|\n|**e:RefListName** |\tA pulldown list of values from a DECODES Reference List should be offered to the user (with a blank space at the top meaning ‘no selection’). See section 4.3 above for info on how to retrieve reference lists.|\n| **h**|\tA host name or IP address|\n| **l**\t| (That’s lower case L) indicates a long string that should be displayed in a multi-line text area with an optional scroll bar. But be aware that most of the property tables in the database limit a property value to 240 chars.|\n\nThe following class names currently support property specs. More may be added in the future:  \n\n*\tdecodes.comp.AreaRatingCompResolver\n*\tdecodes.comp.RdbRatingCompResolver\n*\tdecodes.comp.StationExcludeCompResolver\n*\tdecodes.comp.TabRatingCompResolver\n*\tdecodes.consumer.DirectoryConsumer\n*\tdecodes.consumer.FileAppendConsumer\n*\tdecodes.consumer.FileConsumer\n*\tdecodes.consumer.PipeConsumer\n*\tdecodes.consumer.StringBufferConsumer\n*\tdecodes.consumer.TcpClientConsumer\n*\tdecodes.consumer.AlbertaLoaderFormatter\n*\tcovesw.azul.consumer.CsvFormatter\n*\tdecodes.consumer.EmitAsciiFormatter\n*\tdecodes.consumer.EmitOracleFormatter\n*\tdecodes.consumer.HeaderFormatter\n*\tdecodes.consumer.HtmlFormatter\n*\tdecodes.consumer.HumanReadableFormatter\n*\tdecodes.consumer.HydroJSONFormatter\n*\tdecodes.consumer.KHydstraFormatter\n*\tdecodes.consumer.KistersFormatter\n*\tdecodes.consumer.NullFormatter\n*\tdecodes.consumer.RawFormatter\n*\tdecodes.consumer.ShefFormatter\n*\tdecodes.consumer.ShefitFormatter\n*\tdecodes.consumer.TransmitMonitorFormatter\n*\tdecodes.consumer.TsImportFormatter\n*\tdecodes.cwms.CwmsConsumer\n*\tdecodes.datasource.DirectoryDataSource\n*\tdecodes.datasource.FtpDataSource\n*\tdecodes.datasource.HotBackupGroup\n*\tdecodes.datasource.LrgsDataSource\n*\tdecodes.datasource.RoundRobinGroup\n*\tdecodes.datasource.ScpDataSource\n*\tdecodes.datasource.SocketStreamDataSource\n*\tdecodes.datasource.UsgsWebDataSource\n*\tdecodes.datasource.WebAbstractDataSource\n*\tdecodes.datasource.WebDataSource\n*\tdecodes.datasource.WebDirectoryDataSource\n*\tdecodes.polling.PollingDataSource\n*\tdecodes.db.Platform\n*\tdecodes.db.PlatformSensor\n*\tdecodes.db.ConfigSensor\n*\tdecodes.routing.RoutingScheduler\n*\tdecodes.tsdb.CompAppInfo\n*\tdecodes.tsdb.algo.HdbRating\n*\tdecodes.tsdb.algo.RunningAverageAlgorithm\n*\tdecodes.tsdb.algo.AverageAlgorithm\n*\tdecodes.tsdb.algo.BigAdder\n*\tdecodes.tsdb.algo.Multiplication\n*\tdecodes.tsdb.algo.SumOverTimeAlgorithm\n*\tdecodes.tsdb.algo.ExpressionParserAlgorithm\n*\tdecodes.tsdb.algo.FillForward\n*\tdecodes.tsdb.algo.HdbReservoirMassBalance\n*\tdecodes.tsdb.algo.AddToPrevious\n*\tdecodes.tsdb.algo.Stat\n*\tdecodes.tsdb.algo.HdbEvaporation\n*\tdecodes.tsdb.algo.EstimatedInflow\n*\tdecodes.tsdb.algo.GroupAdder\n*\tdecodes.tsdb.algo.ReservoirFull\n*\tdecodes.tsdb.algo.ScalerAdder\n*\tdecodes.tsdb.algo.HdbACAPSRating\n*\tdecodes.tsdb.algo.ChooseOne\n*\tdecodes.tsdb.algo.BridgeClearance\n*\tdecodes.tsdb.algo.UsgsEquation\n*\tdecodes.tsdb.algo.IncrementalPrecip\n*\tdecodes.tsdb.algo.FlowResIn\n*\tdecodes.tsdb.algo.CopyAlgorithm\n*\tdecodes.tsdb.algo.DisAggregate\n*\tdecodes.tsdb.algo.WeightedWaterTemperature\n*\tdecodes.tsdb.algo.PythonAlgorithm\n*\tdecodes.tsdb.algo.Resample\n*\tdecodes.tsdb.algo.ShowAlgoProps\n*\tdecodes.tsdb.algo.PeriodToDate\n*\tdecodes.tsdb.algo.CopyNoOverwrite\n*\tdecodes.tsdb.algo.SubSample\n*\tdecodes.tsdb.algo.CentralRunningAverageAlgorithm\n*\tdecodes.tsdb.algo.TabRating\n*\tdecodes.tsdb.algo.RdbRating\n*\tdecodes.tsdb.algo.Division\n*\tdecodes.tsdb.algo.VirtualGage\n*\tdecodes.tsdb.alarm.AlarmScreeningAlgorithm\n*\tdecodes.hdb.algo.InflowAdvancedAlg\n*\tdecodes.hdb.algo.EquationSolverAlg\n*\tdecodes.hdb.algo.EstGLDAInflow\n*\tdecodes.hdb.algo.BeginofPeriodAlg\n*\tdecodes.hdb.algo.DynamicAggregatesAlg\n*\tdecodes.hdb.algo.HdbShiftRating\n*\tdecodes.hdb.algo.HdbLookupTimeShiftRating\n*\tdecodes.hdb.algo.SideInflowAlg\n*\tdecodes.hdb.algo.VolumeToFlowAlg\n*\tdecodes.hdb.algo.NVRNUnreg\n*\tdecodes.hdb.algo.PowerToEnergyAlg\n*\tdecodes.hdb.algo.GLDAUnreg\n*\tdecodes.hdb.algo.CallProcAlg\n*\tdecodes.hdb.algo.EndofPeriodAlg\n*\tdecodes.hdb.algo.GLDAEvap\n*\tdecodes.hdb.algo.BMDCUnreg\n*\tdecodes.hdb.algo.CRRCUnreg\n*\tdecodes.hdb.algo.ParshallFlume\n*\tdecodes.hdb.algo.FlowToVolumeAlg\n*\tdecodes.hdb.algo.SimpleDisaggAlg\n*\tdecodes.hdb.algo.EOPInterpAlg\n*\tdecodes.hdb.algo.TimeWeightedAverageAlg\n*\tdecodes.hdb.algo.InflowBasicAlg\n*\tdecodes.hdb.algo.MPRCUnreg\n*\tdecodes.hdb.algo.GlenDeltaBSMBAlg\n*\tdecodes.hdb.algo.FLGUUnreg\n*\tdecodes.cwms.rating.CwmsRatingSingleIndep\n*\tdecodes.cwms.rating.CwmsRatingMultIndep\n*\tdecodes.cwms.validation.ScreeningAlgorithm\n*\tdecodes.util.DecodesSettings\n*\tlrgs.lrgsmain.LrgsConfig\n*\topendcs.opentsdb.OpenTsdbSettings",
        "parameters": [
          {
            "name": "class",
            "in": "query",
            "description": "Fully Qualified Class Name",
            "required": true,
            "schema": {
              "type": "string",
              "example": "decodes.db.Platform"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "example": "t"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertySpecObject"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Retrieving Property Specs"
        ]
      }
    },
    "/message": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Retrieval a Single Message for Testing Decode",
        "description": "Example URLs for GET:  \n```http://localhost:8080/odcsapi/message?tmid=435107EA&token=xxxxxx```\n\n```http://localhost:8080/odcsapi/message?tmid=300434063963670&token=xxxx```\n\nThis method requires a valid session token.  \nIt may be passed on the URL through the token argument or in the Authentication header.  \n\nThe tmid argument is required.   \nIt must match a transport medium ID in a DCP Message.  \n* For GOES messages this is the 8-hex-digit GOES DCP Address.\n* For Iridium messages this is the 15 digit IMEI. \n* For Polled-DCP messages this is the name assigned to the logger.  \n\nThe return data will be a JSON representation of raw DCP message. The most recent message will be returned:\n```\n{\n  \"flags\": 71765,\n  \"platformId\": \"CE31D030\",\n  \"sequenceNum\": 25693,\n  \"localRecvTime\": \"2023-05-09T12:34:54.428Z[UTC]\",\n  \"carrierStart\": \"2023-05-09T12:34:55.284Z[UTC]\",\n  \"carrierStop\": \"2023-05-09T12:34:56.752Z[UTC]\",\n  \"baud\": 300,\n  \"goodPhasePct\": 100,\n  \"freqOffset\": 0.5,\n  \"signalStrength\": 44.8,\n  \"phaseNoise\": 1.97,\n  \"xmitTime\": null,\n  \"momsn\": null,\n  \"mtmsn\": null,\n  \"cdrReference\": null,\n  \"sessionStatus\": null,\n  \"base64\": \"Q0UzMUQwMzAyMzEyOTEyMzQ1NUc0NSswTk4xNjFFTjIwMDAyN2JCMURBTXRBTXRBTXRBTXM6WUIgMTMuNTkgIA==\"\n}\n```\n\nThe structure contains various header fields:\n*\tflags: A binary encoded integer value. See the following section for bit definitions.\n*\tplatformId: This is the unique transport medium identifier, DCP address for GOES, or IMEI for Iridium\n* sequenceNum: typically assigned by the server\n*\tlocalRecvTime: The time this message was acquired by the server\n*\tcarrierStart & carrierStop: for GOES messages, this will indicate the time when the platform activated its carrier signal, effectively occupying the channel.\n*\tbaud, goodPhasePct, freqOffset, signalStrength, phaseNoise: These are GOES quality measurements.\n*\txmitTime: typically only set for network DCPs which are polled by the server.\n*\tmomsn, mtmsn: Iridium sequence numbers for Mobile-Originated and Mobile-Terminated messages\n*\tcdrReference, sessionStatus: Iridium quality measurements\n*\tbase64: This is the BASE64-encoded raw DCP message as it was transmitted. It may include a GOES or Iridium header. BASE64 encoding is used to allow special characters within the message and to preserve the original white-space.  \n\nThe API code will use a DECODES Data Source to retrieve the message from an LRGS. Set a TSDB property named 'api.datasource' to the name of the Data Source you want the API to use. See section (REST - TSDB Properties Methods) for information on getting and setting TSDB properties.",
        "parameters": [
          {
            "name": "tmid",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "example": 300434063963670
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DCPMessage"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Retrieving DCP Messages"
        ]
      }
    },
    "/searchcrit": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "retrieve a set of messages based on user-defined search criteria",
        "description": "The API provides methods for retrieving a set of messages based on user-defined search criteria. The dynamics of the retrieval work like this:\n1.\tClient does a 'POST searchcrit' operation. This defines time ranges, message types, platform IDs, network lists, etc., that collectively determine what messages are to be retrieved. \na.\tThe server saves the search criteria within the client’s session data.\n2.\tClient does a 'GET messages' operation. This returns a block of messages along with a flag indicating whether more messages are to follow.\n3.\tClient repeats step 2 until an empty message block is returned or until the 'moreToFollow' flag is false.\n\nBoth methods require a valid session token.  \nIt may be passed on the URL through the token argument or in the Authentication header.\n\n-----\n**POST** searchcrit  \nExample URL for POST searchcrit:  \n```http://localhost:8080/odcsapi/searchcrit?token=6b994be905e1fddf```\n\nThe POST data should contain a search criteria structure as shown below:  \n```\n{\n  \"since\": \"now - 1 hour\",\n  \"until\": \"now\",\n  \"settlingTimeDelay\": false,\n  \"platformIds\": [],\n  \"platformNames\": [\"BMD-NRE\",\"BFD\",\"OKVI4\",\"BMD-tailwater\"],\n  \"netlistNames\": [],\n  \"goesChannels\": [],\n  \"goesSelfTimed\": false,\n  \"goesRandom\": false,\n  \"networkDCP\": false,\n  \"iridium\": false,\n  \"qualityNotifications\": false,\n  \"goesSpacecraftCheck\": false,\n  \"goesSpacecraftSelection\": \"East\",\n  \"parityCheck\": false,\n  \"paritySelection\": \"Good\"\n}\n```",
        "requestBody": {
          "description": "Search Criteria",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCriteria"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Retrieving DCP Messages"
        ]
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "retrieve a set of messages based on user-defined search criteria",
        "description": "The API provides methods for retrieving a set of messages based on user-defined search criteria. The dynamics of the retrieval work like this:\n1.\tClient does a 'POST searchcrit' operation. This defines time ranges, message types, platform IDs, network lists, etc., that collectively determine what messages are to be retrieved. \na.\tThe server saves the search criteria within the client’s session data.\n2.\tClient does a 'GET messages' operation. This returns a block of messages along with a flag indicating whether more messages are to follow.\n3.\tClient repeats step 2 until an empty message block is returned or until the 'moreToFollow' flag is false.\n\nBoth methods require a valid session token.  \nIt may be passed on the URL through the token argument or in the Authentication header.\n\n---\n**GET** searchcrit  \n\nA method for retrieving the previously-posted searchcrit is provided for testing. Note that the session will discard a search criteria when either a new one is posted, or when a message retrieval is complete.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchCriteria"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Retrieving DCP Messages"
        ]
      }
    },
    "/messages": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "retrieve a set of message based on user-defined search criteria",
        "description": "The API provides methods for retrieving a set of messages based on user-defined search criteria. The dynamics of the retrieval work like this:\n1.\tClient does a 'POST searchcrit' operation. This defines time ranges, message types, platform IDs, network lists, etc., that collectively determine what messages are to be retrieved. \na.\tThe server saves the search criteria within the client’s session data.\n2.\tClient does a 'GET messages' operation. This returns a block of messages along with a flag indicating whether more messages are to follow.\n3.\tClient repeats step 2 until an empty message block is returned or until the 'moreToFollow' flag is false.\nBoth methods require a valid session token. It may be passed on the URL through the token argument or in the Authentication header.\n  \n---\nThe 'GET messages' operation will return a set of messages as shown below:\n```\n{\n  \"messages\": [\n    {\n      \"flags\": 71765,\n      \"platformId\": \"CE31D030\",\n      \"sequenceNum\": 68909,\n      \"localRecvTime\": \"2023-05-09T14:34:57.174Z[UTC]\",\n      \"carrierStart\": \"2023-05-09T14:34:55.284Z[UTC]\",\n      \"carrierStop\": \"2023-05-09T14:34:56.756Z[UTC]\",\n      \"baud\": 300,\n      \"goodPhasePct\": 100,\n      \"freqOffset\": 2.7,\n      \"signalStrength\": 44.8,\n      \"phaseNoise\": 1.93,\n      \"xmitTime\": null,\n      \"momsn\": null,\n      \"mtmsn\": null,\n      \"cdrReference\": null,\n      \"sessionStatus\": null,\n      \"base64\": \"Q0UzMUQwMzAyMzEyOTE0MzQ1NUc0NSswTk4xNjFFTjEwMDAyN2JCMURBTXNBTXNBTXNBTXM6WUIgMTMuNTkgIA==\"\n    },\n    {\n      \"flags\": 137301,\n      \"platformId\": \"CE31D030\",\n      \"sequenceNum\": 59093,\n      \"localRecvTime\": \"2023-05-09T14:08:22.779Z[UTC]\",\n      \"carrierStart\": \"2023-05-09T14:08:21.111Z[UTC]\",\n      \"carrierStop\": \"2023-05-09T14:08:23.966Z[UTC]\",\n      \"baud\": 300,\n      \"goodPhasePct\": 100,\n      \"freqOffset\": -0.9,\n      \"signalStrength\": 46,\n      \"phaseNoise\": 1.88,\n      \"xmitTime\": null,\n      \"momsn\": null,\n      \"mtmsn\": null,\n      \"cdrReference\": null,\n      \"sessionStatus\": null,\n      \"base64\": \"Q0UzMUQwMzAyMzEyOTE0MDgyMUc0Ni0wTk4xMjlFTjIwMDA3OWJaR1VgT2BAQEBTZkBSeEBTeUBTeEBTb0BTX0BUQkBTZkBTfEBURGBAQEBBR0BBR0BBR0BBR0BBR0BBR0BBR0BBR0BBR0BBR2dlYUZUTCA=\"\n    },\n    {\n      \"flags\": 596053,\n      \"platformId\": \"CE3234CC\",\n      \"sequenceNum\": 69792,\n      \"localRecvTime\": \"2023-05-09T14:37:04.918Z[UTC]\",\n      \"carrierStart\": \"2023-05-09T14:37:05.284Z[UTC]\",\n      \"carrierStop\": \"2023-05-09T14:37:07.530Z[UTC]\",\n      \"baud\": 300,\n      \"goodPhasePct\": 98.7,\n      \"freqOffset\": -0.4,\n      \"signalStrength\": 34.6,\n      \"phaseNoise\": 3.3,\n      \"xmitTime\": null,\n      \"momsn\": null,\n      \"mtmsn\": null,\n      \"cdrReference\": null,\n      \"sessionStatus\": null,\n      \"base64\": \"Q0UzMjM0Q0MyMzEyOTE0MzcwNUczNS0wTk4xNjFFTjIwMDA1NGJCMUdASUBAcHlARk5TQFdASHZAcHlARk5TQFlASGpAcHlARk5TQFtASGlAcHlARk5TQF1PIA==\"\n    },\n    {\n      \"flags\": 596053,\n      \"platformId\": \"CE344292\",\n      \"sequenceNum\": 58214,\n      \"localRecvTime\": \"2023-05-09T14:04:56.862Z[UTC]\",\n      \"carrierStart\": \"2023-05-09T14:04:54.047Z[UTC]\",\n      \"carrierStop\": \"2023-05-09T14:04:56.005Z[UTC]\",\n      \"baud\": 300,\n      \"goodPhasePct\": 99.5,\n      \"freqOffset\": 8.4,\n      \"signalStrength\": 37.9,\n      \"phaseNoise\": 2.25,\n      \"xmitTime\": null,\n      \"momsn\": null,\n      \"mtmsn\": null,\n      \"cdrReference\": null,\n      \"sessionStatus\": null,\n      \"base64\": \"Q0UzNDQyOTIyMzEyOTE0MDQ1NEczOCswTk4wNDlFVUIwMDA0NWBCMURATkRATkVATkVATkRATkdATkVATkVATkZBU3FBU3FBU3FBU3FAVHNHIA==\"\n    },\n    {\n      \"flags\": 71765,\n      \"platformId\": \"CE3941F4\",\n      \"sequenceNum\": 69414,\n      \"localRecvTime\": \"2023-05-09T14:36:18.531Z[UTC]\",\n      \"carrierStart\": \"2023-05-09T14:36:20.286Z[UTC]\",\n      \"carrierStop\": \"2023-05-09T14:36:21.833Z[UTC]\",\n      \"baud\": 300,\n      \"goodPhasePct\": 100,\n      \"freqOffset\": 1.5,\n      \"signalStrength\": 44.9,\n      \"phaseNoise\": 1.63,\n      \"xmitTime\": null,\n      \"momsn\": null,\n      \"mtmsn\": null,\n      \"cdrReference\": null,\n      \"sessionStatus\": null,\n      \"base64\": \"Q0UzOTQxRjQyMzEyOTE0MzYyMEc0NSswTk4xNjFFTjEwMDAzMGJCMUZASG9ASG9ASG9ASG9ASXZASXFASXFASXZOIA==\"\n    }\n  ],\n  \"moreToFollow\": true\n}\n```",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DCPMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Retrieving DCP Messages"
        ]
      }
    },
    "/lrgsstatus": {
      "get": {
        "summary": "",
        "description": "GET URL Example  \n\n    http://localhost:8080/odcsapi/lrgsstatus?source=cdabackup\n\n\nIf the 'source' argument is missing, it will use the data source named by TSDB property 'api.datasource', as described above for message retrieval.  \n\nAn example of the returned data structure is shown below:  \n```\n{\n  \"hostname\": \"covesw4\",\n  \"systemStatus\": \"Running\",\n  \"isUsable\": true,\n  \"systemTime\": \"2023-05-15T18:38:22.000Z[UTC]\",\n  \"maxClients\": 150,\n  \"currentNumClients\": 4,\n  \"lrgsVersion\": \"9.5.OpenDCS-6.8 RC12 (Jul 27, 2021)\",\n  \"arcDirOldest\": 0,\n  \"arcDirNext\": 846181,\n  \"arcDirWrap\": 0,\n  \"arcDirSize\": 7385773,\n  \"arcOldestOffset\": 0,\n  \"arcOldestMsgTime\": \"2023-05-09T00:00:02.000Z[UTC]\",\n  \"arcLastSeqNum\": 60546,\n  \"procStatus\": [\n    {\n      \"slot\": 0,\n      \"pid\": 893924,\n      \"name\": \"-\",\n      \"type\": \"DDS-CLI\",\n      \"user\": \"covetest\",\n      \"status\": \"running\",\n      \"lastSeqNum\": 0,\n      \"lastPollTime\": \"1970-01-20T11:49:35.880Z[UTC]\",\n      \"lastMsgTime\": \"1970-01-01T00:00:00.000Z[UTC]\",\n      \"staleCount\": 0\n    },\n    {\n      \"slot\": 1,\n      \"pid\": 893930,\n      \"name\": \"-\",\n      \"type\": \"DDS-CLI\",\n      \"user\": \"dcpmon\",\n      \"status\": \"running\",\n      \"lastSeqNum\": 199768,\n      \"lastPollTime\": \"1970-01-20T11:49:35.902Z[UTC]\",\n      \"lastMsgTime\": \"1970-01-20T11:49:35.874Z[UTC]\",\n      \"staleCount\": 0\n    },\n    {\n      \"slot\": 2,\n      \"pid\": 893928,\n      \"name\": \"-\",\n      \"type\": \"DDS-CLI\",\n      \"user\": \"dcpmon\",\n      \"status\": \"running\",\n      \"lastSeqNum\": 81,\n      \"lastPollTime\": \"1970-01-20T11:49:35.902Z[UTC]\",\n      \"lastMsgTime\": \"1970-01-20T11:49:35.765Z[UTC]\",\n      \"staleCount\": 0\n    },\n    {\n      \"slot\": 3,\n      \"pid\": 893942,\n      \"name\": \"-\",\n      \"type\": \"DDS-CLI\",\n      \"user\": \"covetest\",\n      \"status\": \"running\",\n      \"lastSeqNum\": 0,\n      \"lastPollTime\": \"1970-01-20T11:49:35.902Z[UTC]\",\n      \"lastMsgTime\": \"1970-01-01T00:00:00.000Z[UTC]\",\n      \"staleCount\": 0\n    }\n  ],\n  \"downlinkStatus\": [\n    {\n      \"slot\": 1,\n      \"name\": \"DDS-Recv:Main\",\n      \"type\": \"DL_DDS\",\n      \"status\": \"Active\",\n      \"lastMsgRecvTime\": \"2023-05-15T18:38:20.000Z[UTC]\",\n      \"group\": \"\",\n      \"lastSeqNum\": 0,\n      \"hourlyQuality\": [\n        {\n          \"hour\": 0,\n          \"numGood\": 47704,\n          \"numBad\": 207,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 1,\n          \"numGood\": 47543,\n          \"numBad\": 205,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 2,\n          \"numGood\": 47304,\n          \"numBad\": 221,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 3,\n          \"numGood\": 47560,\n          \"numBad\": 186,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 4,\n          \"numGood\": 47285,\n          \"numBad\": 225,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 5,\n          \"numGood\": 47318,\n          \"numBad\": 191,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 6,\n          \"numGood\": 47494,\n          \"numBad\": 236,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 7,\n          \"numGood\": 47372,\n          \"numBad\": 503,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 8,\n          \"numGood\": 47442,\n          \"numBad\": 439,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 9,\n          \"numGood\": 47368,\n          \"numBad\": 222,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 10,\n          \"numGood\": 47265,\n          \"numBad\": 277,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 11,\n          \"numGood\": 47408,\n          \"numBad\": 294,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 12,\n          \"numGood\": 46008,\n          \"numBad\": 198,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 13,\n          \"numGood\": 43966,\n          \"numBad\": 232,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 14,\n          \"numGood\": 43987,\n          \"numBad\": 174,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 15,\n          \"numGood\": 44158,\n          \"numBad\": 239,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 16,\n          \"numGood\": 44062,\n          \"numBad\": 177,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 17,\n          \"numGood\": 44082,\n          \"numBad\": 190,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 18,\n          \"numGood\": 29681,\n          \"numBad\": 197,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 19,\n          \"numGood\": 47607,\n          \"numBad\": 206,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 20,\n          \"numGood\": 47562,\n          \"numBad\": 185,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 21,\n          \"numGood\": 47705,\n          \"numBad\": 195,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 22,\n          \"numGood\": 47788,\n          \"numBad\": 197,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 23,\n          \"numGood\": 47860,\n          \"numBad\": 212,\n          \"numRecovered\": 0\n        }\n      ]\n    },\n    {\n      \"slot\": 5,\n      \"name\": \"DDS:NLRGS1\",\n      \"type\": \"DDSCON\",\n      \"status\": \"Real-Time\",\n      \"lastMsgRecvTime\": \"2023-05-15T18:38:20.000Z[UTC]\",\n      \"group\": \"Primary\",\n      \"lastSeqNum\": 0,\n      \"hourlyQuality\": [\n        {\n          \"hour\": 0,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 1,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 2,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 3,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 4,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 5,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 6,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 7,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 8,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 9,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 10,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 11,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 12,\n          \"numGood\": 32852,\n          \"numBad\": 139,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 13,\n          \"numGood\": 43966,\n          \"numBad\": 232,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 14,\n          \"numGood\": 43987,\n          \"numBad\": 174,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 15,\n          \"numGood\": 44158,\n          \"numBad\": 239,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 16,\n          \"numGood\": 44062,\n          \"numBad\": 177,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 17,\n          \"numGood\": 44082,\n          \"numBad\": 190,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 18,\n          \"numGood\": 29681,\n          \"numBad\": 197,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 19,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 20,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 21,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 22,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 23,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        }\n      ]\n    },\n    {\n      \"slot\": 6,\n      \"name\": \"DDS:EDDN1\",\n      \"type\": \"DDSCON\",\n      \"status\": \"Ready\",\n      \"lastMsgRecvTime\": \"1970-01-01T00:00:00.000Z[UTC]\",\n      \"group\": \"primary\",\n      \"lastSeqNum\": 0,\n      \"hourlyQuality\": [\n        {\n          \"hour\": 0,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 1,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 2,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 3,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 4,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 5,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 6,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 7,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 8,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 9,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 10,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 11,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 12,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 13,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 14,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 15,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 16,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 17,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 18,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 19,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 20,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 21,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 22,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        },\n        {\n          \"hour\": 23,\n          \"numGood\": 0,\n          \"numBad\": 0,\n          \"numRecovered\": 0\n        }\n      ]\n    },\n  \"hourlyArchiveQuality\": [\n    {\n      \"hour\": 0,\n      \"numGood\": 44123,\n      \"numBad\": 170,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 1,\n      \"numGood\": 44016,\n      \"numBad\": 141,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 2,\n      \"numGood\": 43846,\n      \"numBad\": 166,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 3,\n      \"numGood\": 44029,\n      \"numBad\": 148,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 4,\n      \"numGood\": 43825,\n      \"numBad\": 155,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 5,\n      \"numGood\": 43815,\n      \"numBad\": 143,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 6,\n      \"numGood\": 43984,\n      \"numBad\": 167,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 7,\n      \"numGood\": 43885,\n      \"numBad\": 230,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 8,\n      \"numGood\": 43897,\n      \"numBad\": 242,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 9,\n      \"numGood\": 43886,\n      \"numBad\": 155,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 10,\n      \"numGood\": 43797,\n      \"numBad\": 172,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 11,\n      \"numGood\": 43865,\n      \"numBad\": 182,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 12,\n      \"numGood\": 43942,\n      \"numBad\": 163,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 13,\n      \"numGood\": 43969,\n      \"numBad\": 161,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 14,\n      \"numGood\": 43988,\n      \"numBad\": 140,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 15,\n      \"numGood\": 44151,\n      \"numBad\": 179,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 16,\n      \"numGood\": 44060,\n      \"numBad\": 142,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 17,\n      \"numGood\": 44083,\n      \"numBad\": 156,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 18,\n      \"numGood\": 29689,\n      \"numBad\": 137,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 19,\n      \"numGood\": 44097,\n      \"numBad\": 152,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 20,\n      \"numGood\": 44066,\n      \"numBad\": 135,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 21,\n      \"numGood\": 44185,\n      \"numBad\": 143,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 22,\n      \"numGood\": 44110,\n      \"numBad\": 161,\n      \"numRecovered\": 0\n    },\n    {\n      \"hour\": 23,\n      \"numGood\": 44157,\n      \"numBad\": 153,\n      \"numRecovered\": 0\n    }\n  ]\n}\n```",
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string",
              "example": "cdabackup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LRGSStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Retrieving DCP Messages"
        ]
      }
    },
    "/decode": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "",
        "description": "Example URL for HTTP POST method:  \n```http://localhost:8080/odcsapi/decode?token=73168ed6c9c49870&script=ST```\n\nAs shown, the arguments must include:\n*\tA valid security token\n*\tThe script name to use in decoding the message (if omitted, the first script in the config will be used).  \n\nThe data sent in the POST request must be:\n```\n{\n\t\"config\": { config as returned by GET config described above}\n\n\t\"rawmsg\": { Raw Message as returned by GET message described above }\n}\n```\nThe raw data will be decoded according to the instructions in the passed config.  \nThe returned data will include log messages generated to trace the script execution, and the decoded data from the message.  \n**Note** that for each decoded value, the position within the raw message is given.",
        "parameters": [
          {
            "name": "script",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ST"
            }
          }
        ],
        "requestBody": {
          "description": "Test Decodes Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDecodesRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_TestDecodesRequest"
                },
                "verbose": {
                  "$ref": "#/components/examples/POST_VERBOSE_TestDecodesRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDecodesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Test Decoding"
        ]
      }
    },
    "/tsrefs": {
      "get": {
        "summary": "The tsrefs method returns a list of time series defined in the database",
        "description": "You have the option to filter out inactive time series by passing 'active=true' argument.  \nExamples:  \n\n    http://localhost:8080/odcsapi/tsrefs\n    http://localhost:8080/odcsapi/tsrefs?active=true\n\n\nThis returns an array of Time Series Identifiers. The numeric Key of a time series identifier may be used in subsequent calls to get the complete specification for the time series (GET tsspec) or to retrieve time series data (GET tsdata). The format of the returned data is as follows:  \n```\n[\n  {\n    \"uniqueString\": \"OKVI4.Stage.Inst.15Minutes.0.raw\",\n    \"key\": 1,\n    \"description\": null,\n    \"storageUnits\": \"ft\",\n    \"active\": true\n  },\n  {\n    \"uniqueString\": \"OKVI4.Stage.Ave.1Day.1Day.CO\",\n    \"key\": 2,\n    \"description\": null,\n    \"storageUnits\": \"ft\",\n    \"active\": true\n  },\n  {\n    \"uniqueString\": \"OKVI4.Stage.Ave.1Day.1Day.CC\",\n    \"key\": 4,\n    \"description\": null,\n    \"storageUnits\": \"ft\",\n    \"active\": true\n  },\n. . .\n]\n```",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "Value of Authentication Token (Only for use outside of 'secure' mode)",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TsRefsEntry"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "Time Series Methods"
        ]
      }
    },
    "/tsspec": {
      "get": {
        "summary": "The tsspec method returns a complete specification for a time series identified by the 'key' parameter.",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/tsspec?key=532",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 532
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TsSpec"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "Time Series Methods"
        ]
      }
    },
    "/tsdata": {
      "get": {
        "summary": "The tsdata method returns data for a time series over a specified time range.",
        "description": "The method takes 3 arguments:\n* **tkey (required)** – the numeric key identifying the time series. It is contained within a Time Series Identifier described above.\n* **tstart** – Optionally specifies the start of the time range for retrieval. If omitted, the oldest data in the database is returned. See below for time format.\n* **tend** – Optionally specifies the end of the time range for retrieval. If omitted, the newest data in the database is returned. See below for time format.  \n\nThe since and until arguments may have any of the following formats:\n*\t**now-1day**\tThe word 'now' minus an increment times a unit. Examples: now-1day, now-5hours, now-1week, etc.\n*\t**now**\tThe current time that the web service call was made.\n*\t**YYYY/DDD/HH:MM:SS**\tA complete Julian Year, Day-of-Year, and Time\n*\t**YYYY/DDD/HH:MM**\tSeconds omitted means zero.\n*\t**DDD/HH:MM:SS**\tAssume current year\n*\t**DDD/HH:MM**\t\n*\t**HH:MM:SS**\tAssume current day\n*\t**HH:MM**  \n\nExamples:  \n```http://localhost:8080/odcsapi/tsdata?key=12```",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "timeseries key",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 12
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "start of time range",
            "required": false,
            "schema": {
              "type": "string",
              "example": ""
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "end of time range",
            "required": false,
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TsData"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "Time Series Methods"
        ]
      }
    },
    "/intervals": {
      "get": {
        "summary": "Returns a list of time intervals defined in the database.",
        "description": "Example: \n\n    http://localhost:8080/odcsapi/intervals\n\n* The token argument is optional. If supplied it will reset the timer on the token.  \n\nAn array of data structures representing all known time intervals will be returned as shown below.\n```\n[\n  {\n    \"intervalId\": 1,\n    \"name\": \"irregular\",\n    \"calConstant\": \"minute\",\n    \"calMultilier\": 0\n  },\n  {\n    \"intervalId\": 2,\n    \"name\": \"2Minutes\",\n    \"calConstant\": \"minute\",\n    \"calMultilier\": 2\n  },\n. . .\n]\n```\n\nFor each interval the system stores a numeric ID, a name, a Java Calendar Constant (one of second, minute, hour, day, week, month, year), and a multiplier for the constant.",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalList"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "Time Series Methods - Interval Methods"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new, or update an existing Time Interval",
        "description": "Example URL for POST:  \n\n    http://localhost:8080/odcsapi/interval?token=6b994be905e1fddf\n\n\nThis method requires a valid session token.  \n\nThe POST data should contain a single time interval record as described above for the 'intervals' list.   \n\nAs with other POST methods, to create a new record, omit the numeric ID.  \n\nTo update an existing record, include the 'intervalId'.  \n\nFor example, to create a interval 'fortnight', the data could be:\n  ```\n  {\n    \"name\": \"fortnight\",\n    \"calConstant\": \"day\",\n    \"calMultilier\": 14\n  }\n  ```\n\nThe returned data structure will be the same as the data passed, except that if this is a new interval the intervalId member will be added.",
        "operationId": "",
        "requestBody": {
          "description": "Engineering Unit Conversion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntervalEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeSeriesInterval"
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "Time Series Methods - Interval Methods"
        ]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete an existing Time Interval record.",
        "description": "Example URL for DELETE:  \n\n    http://localhost:8080/odcsapi/interval?token=6b994be905e1fddf&intervalid=1459\n\n\nThis deletes the Time Interval with ID 1459.  \n\n**Use care with this method**. The system needs to know about all of the 'interval' and 'duration' specifiers used for time series IDs.",
        "parameters": [
          {
            "name": "intervalid",
            "in": "query",
            "description": "interval id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1459
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "Time Series Methods - Interval Methods"
        ]
      }
    },
    "/tsgrouprefs": {
      "get": {
        "summary": "Provide a list of all groups defined in the database.",
        "description": "Time Series Groups are used to define a set of time series identifiers. Groups can contain:\n  \n*  Explicit list of time series identifiers  \n*  A list of attributes to flexibly define a set of time series identifiers, E.g. All time series at a particular with interval '30minutes'.  \n*  A list of sub-groups that can be included, excluded, or intersected with the group being defined.\n  \n***\n  \nExample URL:  \n\n    http://localhost:8080/odcsapi-0-7/tsgrouprefs\n\nA security token may be supplied in the header or in the URL, but it is not required. The returned list has the following structure:\n  \n```\n  [\n    {\n      \"groupId\": 8,\n      \"groupName\": \"topgroup\",\n      \"groupType\": \"basin\",\n      \"description\": \"\"\n    },\n    {\n      \"groupId\": 7,\n      \"groupName\": \"subgroup-x\",\n      \"groupType\": \"data type\",\n      \"description\": \"testing for OPENDCS-15 issue\"\n    },\n    {\n      \"groupId\": 2,\n      \"groupName\": \"regtest_017\",\n      \"groupType\": \"data-type\",\n      \"description\": \"Group for regression test 017\"\n    },\n    {\n      \"groupId\": 3,\n      \"groupName\": \"stageRate1Var\",\n      \"groupType\": \"basin\",\n      \"description\": \"Collection of TS IDs with stage to flow ratings\"\n    }\n  ]\n\n```\n\n  ",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeseriesGroupRefsEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Time Series Methods - Groups"
        ]
      }
    },
    "/tsgroup": {
      "get": {
        "summary": "Provide a complete definition of a single group.",
        "description": "Example URL:  \n\n    http://localhost:8080/odcsapi-0-7/tsgroup?groupid=9\n\nA security token may be supplied in the header or in the URL, but it is not required.  \n  \n  \nThe returned list has the following structure:  \n  \n```\n  {\n    \"groupId\": 9,\n    \"groupName\": \"junk\",\n    \"groupType\": \"basin\",\n    \"description\": \"\",\n    \"tsIds\": [\n      {\n        \"uniqueString\": \"OKVI4.Stage.Inst.15Minutes.0.raw\",\n        \"key\": 1,\n        \"description\": null,\n        \"storageUnits\": \"ft\",\n        \"active\": true\n      },\n      {\n        \"uniqueString\": \"OKVI4.Stage.Ave.1Day.1Day.CO\",\n        \"key\": 2,\n        \"description\": null,\n        \"storageUnits\": \"ft\",\n        \"active\": true\n      }\n    ],\n    \"includeGroups\": [\n      {\n        \"groupId\": 1,\n        \"groupName\": \"MROI4-ROWI4-HG\",\n        \"groupType\": \"basin\",\n        \"description\": \"This is a group for the MROI4-ROWI4-HG Regression Test\"\n      }\n    ],\n    \"excludeGroups\": [\n      {\n        \"groupId\": 2,\n        \"groupName\": \"regtest_017\",\n        \"groupType\": \"data-type\",\n        \"description\": \"Group for regression test 017\"\n      }\n    ],\n    \"intersectGroups\": [\n      {\n        \"groupId\": 7,\n        \"groupName\": \"subgroup-x\",\n        \"groupType\": \"data type\",\n        \"description\": \"testing for OPENDCS-15 issue\"\n      }\n    ],\n    \"groupAttrs\": [\n      \"BaseLocation=TESTSITE2\",\n      \"BaseParam=ELEV\",\n      \"BaseVersion=DCP\",\n      \"Duration=0\",\n      \"Interval=1Hour\",\n      \"ParamType=Inst\",\n      \"SubLocation=Spillway2-Gate1\",\n      \"SubParam=PZ1B\",\n      \"SubVersion=Raw\",\n      \"Version=DCP-Raw\"\n    ],\n    \"groupSites\": [\n      {\n        \"siteId\": 2,\n        \"sitenames\": {\n          \"CWMS\": \"ROWI4\",\n          \"USGS\": \"05449500\"\n        },\n        \"publicName\": \"IOWA RIVER NEAR ROWAN\",\n        \"description\": \"IOWA RIVER NEAR ROWAN 4NW\"\n      }\n    ],\n    \"groupDataTypes\": [\n      {\n        \"id\": 224,\n        \"standard\": \"CWMS\",\n        \"code\": \"ELEV-PZ2A\",\n        \"displayName\": \"CWMS:ELEV-PZ2A\"\n      }\n    ]\n  }\n\n```\n  \n**Notes**:  \n*  **tsIds** is a list of explicit time series identifiers that are considered part of the group.  \n*  **includedGroups** is a list of subgroups to be included in this group.  \n*  **excludedGroups** is a list of subgroups. The TSIDs in the subgroup will be excluded from this group.  \n*  **intersectedGroups** is a list of subgroups to be intersected with this group. Only TSIDs in both groups are considered part of this group.  \n*  **groupSites** is a list of Site records. TSIDs in these Sites are considered members of this group.  \n*  **groupDataTypes** is a list of fully-specified data types (a.k.a. 'Param' in CWMS and OpenTSDB databases). TSIDs with a matching data type will be included in the group.  \n*  **groupAttrs** is a list of attributes that are used to define the group. These are presented in 'name=value' pairs where the name is one of the following:  \n\n    *  **BaseLocation** – only the first part of Site (Location) before first hyphen  \n    *  **SubLocation** – only trailing part of Site after first hyphen.  \n    *  **BaseParam** – only first part of data type (Param) before first hyphen  \n    *  **SubParam** – only trailing part of data type (Param) after first hyphen\n    *  **ParamType**  \n    *  **Interval**\n    *  **Duration**  \n    *  **Version**  \n    *  **BaseVersion**\n    *  **SubVersion**",
        "parameters": [
          {
            "name": "groupid",
            "in": "query",
            "description": "requested group id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 9
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeseriesGroupEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Time Series Methods - Groups"
        ]
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new, or update an existing time series group",
        "description": "Example URL for POST:  \n\n    http://localhost:8080/odcsapi/tsgroup?token=6b994be905e1fddf\n\nThis method requires a valid session token. The POST data is as described above for GET tsgroup",
        "requestBody": {
          "description": "Search Criteria",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeseriesGroupEntry"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_TimeseriesGroupEntry"
                },
                "verbose": {
                  "$ref": "#/components/examples/POST_VERBOSE_TimeseriesGroupEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Time Series Methods - Groups"
        ]
      }
    },
    "/delete": {
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a timeseries group",
        "description": "Example URL for DELETE:  \n\n    http://localhost:8080/odcsapi/delete?token=6b994be905e1fddf&groupid=9\n\nThis example deletes the Time series group with ID 9.  \n  \nThis method requires a valid session token.",
        "parameters": [
          {
            "name": "groupid",
            "in": "query",
            "description": "Group Id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 9
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Time Series Methods - Groups"
        ]
      }
    },
    "/tsgroupeval": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "evaluates the group passed in the POST data and returns an array of time series identifiers.",
        "description": "This method evaluates the group passed in the POST data and returns an array of time series identifiers.  \n  \nThis method requires a valid session token.  \n  \nThe POST data is a group as defined above for the GET method.  \n  \n**Note**:\n  \n* It does not need to be a group already saved in the database. \n  \n* This method does not saved the passed group definition.  \n  \nThe return data is an array of time series identifiers as shown below:  \n  \n```\n  [\n    {\n      \"uniqueString\": \"OKVI4.Stage.Inst.15Minutes.0.raw\",\n      \"key\": 1,\n      \"description\": null,\n      \"storageUnits\": \"ft\",\n      \"active\": true\n    },\n    {\n      \"uniqueString\": \"OKVI4.Precip.Inst.15Minutes.0.raw\",\n      \"key\": 6,\n      \"description\": \"OKVI4 - Precip (created by DECODES)\",\n      \"storageUnits\": \"in\",\n      \"active\": true\n    },\n    {\n      \"uniqueString\": \"OKVI4.Volt-Battery.Inst.1Hour.0.raw\",\n      \"key\": 7,\n      \"description\": \"OKVI4 - Volt-Battery (created by DECODES)\",\n      \"storageUnits\": \"V\",\n      \"active\": true\n    }\n  ]\n\n```",
        "requestBody": {
          "description": "Search Criteria",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeseriesGroupEntry"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/POST_BASIC_TimeseriesGroupEntry"
                },
                "verbose": {
                  "$ref": "#/components/examples/POST_VERBOSE_TimeseriesGroupEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupTimeseriesIdentifiers"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Time Series Methods - Groups"
        ]
      }
    },
    "/netlist_(path conflict)": {
      "post": {
        "summary": "",
        "description": "This POST method is sent the contents of an LRGS '.nl' file as plain text and returns a JSON data structure representation of the file.  \n```\n{\"items\":{\n\"12345678\":{\"description\":\"Some Big Long Description\",\n\"platformName\":\"SomeName\",\"transportId\":\n\"12345678\"},\"87654321\":{\"description\":\"Description Two\",\n\"platformName\":\"NameNumber2\",\"transportId\":\"87654321\"}\n}\n}\n```",
        "operationId": "",
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "Network List Methods"
        ]
      }
    },
    "/DCP_Message_Flag_Bit_Encoding______partial": {
      "get": {
        "summary": "",
        "description": "DCP Message Flag Bits are defined within the OpenDCS class lrgs.common.DcpMsgFlag. Here is the relevant section of the source code with the comments preserved:\npublic static final int MSG_PRESENT       = 0x0001;\n```\n/** This msg should be ignored. */\npublic static final int MSG_DELETED       = 0x0002;\n\npublic static final int SRC_MASK          = 0x001C;\npublic static final int SRC_DOMSAT        = 0x0000;\npublic static final int SRC_NETDCP        = 0x0004;\npublic static final int SRC_DRGS          = 0x0008;\npublic static final int SRC_NOAAPORT      = 0x000C;\npublic static final int SRC_LRIT          = 0x0010;\npublic static final int SRC_DDS           = 0x0014;\npublic static final int SRC_IRIDIUM       = 0x0018;\npublic static final int SRC_OTHER         = 0x001C;\n\npublic static final int UNDEFINED_1       = 0x0020;\n  \n/** Message does NOT have _DOMSAT_ sequence num */\npublic static final int MSG_NO_SEQNUM     = 0x0040;\npublic static final int DUP_MSG           = 0x0080;\n\n/** Means Carrier times were estimated on DRGS link. */\npublic static final int CARRIER_TIME_EST  = 0x0100;\n\n/** Message flagged as binary */\npublic static final int BINARY_MSG        = 0x0200;\n  \n/** Mask for baud-rate bits */\npublic static final int BAUD_MASK         = 0x0C00;\n/** Message baud rate is unknown */\npublic static final int BAUD_UNKNOWN      = 0x0000;\n/** Message baud rate is 100 */\npublic static final int BAUD_100          = 0x0400;\n/** Message baud rate is 300 */\npublic static final int BAUD_300          = 0x0800;\n/** Message baud rate is 1200 */\npublic static final int BAUD_1200         = 0x0C00;\n\n/** Unused bits */\npublic static final int HAS_CARRIER_TIMES = 0x1000;\n\n//  /** Coopted for extended msg types (see below). */\n//  public static final int MSG_TYPE_EXT      = 0x2000;\n\n/** DRGS Address was Corrected from original. */\npublic static final int ADDR_CORRECTED    = 0x4000;\n\n/** Bit indicating GOES (default for legacy) or Iridium Msg. */\npublic static final int MSG_TYPE_MASK            = 0x0003A000;\n// non-specific any GOES:\npublic static final int MSG_TYPE_GOES            = 0x00000000;\npublic static final int MSG_TYPE_IRIDIUM         = 0x00008000;\npublic static final int MSG_TYPE_NETDCP          = 0x00002000;\npublic static final int MSG_TYPE_OTHER           = 0x0000A000;\n\n// For flag rev 3, new types are added above 16 bits.\npublic static final int MSG_TYPE_GOES_ST         = 0x00010000;\npublic static final int MSG_TYPE_GOES_RD         = 0x00020000;\n// Goes international\npublic static final int MSG_TYPE_GOES_INT        = 0x00030000;\n  \n// Indicates a binary message that has detected errors\npublic static final int HAS_BINARY_ERRORS        = 0x00040000;\n  \n// Platform Type is either CS1  or CS2\npublic static final int PLATFORM_TYPE_MASK       = 0x00080000;\npublic static final int PLATFORM_TYPE_CS1        = 0x00000000;\npublic static final int PLATFORM_TYPE_CS2        = 0x00080000;\n  \n// No EOT was detected on this message\npublic static final int NO_EOT                   = 0x00100000;\n  \npublic static final int ARM_UNCORRECTABLE_ADDR   = 0x00200000;\n  \npublic static final int ARM_ADDR_NOT_IN_PDT      = 0x00400000;\n  \npublic static final int ARM_PDT_INCOMPLETE       = 0x00800000;\n  \n// Message overlaps its PDT window\npublic static final int ARM_TIMING_ERROR         = 0x01000000;\n\n// Message completely outside its timing window\npublic static final int ARM_UNEXPECTED_MSG       = 0x02000000;\n\n// GOES message received on wrong channel\npublic static final int ARM_WRONG_CHANNEL        = 0x04000000; \n```",
        "operationId": "",
        "responses": {
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "REST - Retrieving DCP Messages"
        ]
      }
    },
    "/appstat": {
      "summary": "REST - Loading Application Records describes API methods for retrieving and manipulating 'Loading Application' records. The concept of a 'Loading App' has been generalized to include any application that is known by the OpenDCS software.",
      "description": "Applications each have a set of properties. The following properties are relevant to M&C: •\tstartCmd – A string containins a command used to start the application on this server. Most of the OpenDCS apps use lock records to ensure that only a single instance can run at a time. •\tMonitor – A Boolean (true/false) value indicating whether this app should listen for 'event clients.' The API can act as an event client. Event clients can connect to the app via a socket and pull a list of events generated by the app. This is typically used to provide a scrolling event window. •\tEventPort – If set, this property determines the port that this app will listen on for event clients. If not set (the usual case), the port is determined by the formula: port = (pid % 10000) + 20000",
      "get": {
        "summary": "returns an array with one element for each application",
        "description": "*REST - Loading Application Records* describes API methods for retrieving and manipulating 'Loading Application' records. The concept of a 'Loading App' has been generalized to include any application that is known by the OpenDCS software.  \n  \nApplications each have a set of properties. The following properties are relevant to M&C:  \n*  **startCmd** – A string containins a command used to start the application on this server. Most of the OpenDCS apps use lock records to ensure that only a single instance can run at a time.  \n*  **Monitor** – A Boolean (true/false) value indicating whether this app should listen for 'event clients.' The API can act as an event client. Event clients can connect to the app via a socket and pull a list of events generated by the app. This is typically used to provide a scrolling event window.  \n*  **EventPort** – If set, this property determines the port that this app will listen on for event clients. If not set (the usual case), the port is determined by the formula: port = (pid % 10000) + 20000  \n\n***  \nExample:  \n\n    http://localhost:8080/odcsapi/appstat\n  \n  \nThe returned structure is an array with one element for each application returned by the 'GET apprefs' method described in the method GET /apprefs\n  \nIf an application is currently running, the 'pid' will be the system process ID, and 'heartbeat' will be a valid date/time. Also 'status' will be set to some relevant string for that application. For example, the *compproc app* sets its status to the number of computation runs and errors.\n``` [\n    {\n      \"appId\": 1,\n      \"appName\": \"decodes\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 4,\n      \"appName\": \"compproc\",\n      \"appType\": \"computationprocess\",\n      \"hostname\": \"mmaloney3.local\",\n      \"pid\": 12176,\n      \"heartbeat\": \"2023-05-25T16:34:18.073Z[UTC]\",\n      \"eventPort\": null,\n      \"status\": \"Cmps: 0/0\"\n    },\n    {\n      \"appId\": 5,\n      \"appName\": \"compproc_regtest\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 8,\n      \"appName\": \"utility\",\n      \"appType\": \"utility\",\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 18,\n      \"appName\": \"StaleDataChecker\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 19,\n      \"appName\": \"compedit\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 20,\n      \"appName\": \"corrections\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 21,\n      \"appName\": \"limits\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 22,\n      \"appName\": \"statmon\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 23,\n      \"appName\": \"dcpmon\",\n      \"appType\": null,\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 25,\n      \"appName\": \"CompEdit\",\n      \"appType\": \"gui\",\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 26,\n      \"appName\": \"RoutingScheduler\",\n      \"appType\": \"routingscheduler\",\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    },\n    {\n      \"appId\": 27,\n      \"appName\": \"compdepends\",\n      \"appType\": \"compdepends\",\n      \"hostname\": null,\n      \"pid\": null,\n      \"heartbeat\": null,\n      \"eventPort\": null,\n      \"status\": \"Inactive\"\n    }\n  ]\n\n```",
        "operationId": "getappstat",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppStatEntry"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (APP)"
        ]
      }
    },
    "/appevents": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "returns array of events",
        "description": "REST - Loading Application Records describes API methods for retrieving and manipulating 'Loading Application' records. The concept of a 'Loading App' has been generalized to include any application that is known by the OpenDCS software.  \n\n  \nApplications each have a set of properties.\n  \nThe following properties are relevant to M&C:\n  \n* **startCmd** – A string containins a command used to start the application on this server. Most of the OpenDCS apps use lock records to ensure that only a single instance can run at a time.\n  \n* **Monitor** – A Boolean (true/false) value indicating whether this app should listen for 'event clients.' The API can act as an event client. Event clients can connect to the app via a socket and pull a list of events generated by the app. This is typically used to provide a scrolling event window.\n  \n* **EventPort** – If set, this property determines the port that this app will listen on for event clients. If not set (the usual case), the port is determined by the formula: port = (pid % 10000) + 20000\n***  \n  \nSample URL:  \n\n    http://localhost:8080/odcsapi/appevents?appid=4&token=58a45adde8759bbb  \n\n  \nThis method requires a valid token, passed either in the URL (as shown above) or in the HTTP request header.   \n  \nThe returned data structure is an array of events. \n  \nEach event contains:   \n* **tappId** – the one requested on the header     \n* **appName** – from the loading app database record \n  \n* **priority** – one of DBG3, DBG2, DBG1, INFO, WARNING, FAILURE.   \n  \n* **eventTime** – date/time of the event\n  \n* **eventText** – provided by the application Returned data structure example shown below. Note that an empty array simply means that there are no new events from that application.\n  \n```\n  [\n    {\n      \"appId\": 4,\n      \"appName\": \"compproc\",\n      \"priority\": \"DBG1\",\n      \"eventTime\": \"2023-05-25T17:26:13.000Z[UTC]\",\n      \"eventText\": \"OpenTimeSeriesDAO No new data for appId=4\"\n    },\n    {\n      \"appId\": 4,\n      \"appName\": \"compproc\",\n      \"priority\": \"DBG1\",\n      \"eventTime\": \"2023-05-25T17:26:14.000Z[UTC]\",\n      \"eventText\": \"OpenTimeSeriesDAO No new data for appId=4\"\n    },\n    {\n      \"appId\": 4,\n      \"appName\": \"compproc\",\n      \"priority\": \"DBG1\",\n      \"eventTime\": \"2023-05-25T17:26:15.000Z[UTC]\",\n      \"eventText\": \"OpenTimeSeriesDAO No new data for appId=4\"\n    },\n    {\n      \"appId\": 4,\n      \"appName\": \"compproc\",\n      \"priority\": \"DBG1\",\n      \"eventTime\": \"2023-05-25T17:26:16.000Z[UTC]\",\n      \"eventText\": \"OpenTimeSeriesDAO No new data for appId=4\"\n    },\n    {\n      \"appId\": 4,\n      \"appName\": \"compproc\",\n      \"priority\": \"DBG1\",\n      \"eventTime\": \"2023-05-25T17:26:17.000Z[UTC]\",\n      \"eventText\": \"OpenTimeSeriesDAO No new data for appId=4\"\n    }\n  ]\n\n```  \n  \n***  \n  \n**NOTE**: Errors will be returned if the application is not currently running or if its heartbeat has gone stale (i.e. 20 seconds have elapsed with no update). For example:\n  \n```\n  {\n    \"status\": 410,\n    \"message\": \"appid 5 (compproc_regtest) is not running.\"\n  }\n\n```",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "application id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "operationId": "",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppEventEntry"
                  }
                }
              }
            }
          },
          "410": {
            "description": "error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 410
                    },
                    "message": {
                      "type": "string",
                      "example": "appid 5 (compproc_regtest) is not running"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Default error sample response"
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (APP)"
        ]
      }
    },
    "/appstart": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "start a child app",
        "description": "REST - Loading Application Records describes API methods for retrieving and manipulating 'Loading Application' records. The concept of a 'Loading App' has been generalized to include any application that is known by the OpenDCS software.  \n\n  \nApplications each have a set of properties.\n  \nThe following properties are relevant to M&C:\n  \n* **startCmd** – A string containins a command used to start the application on this server. Most of the OpenDCS apps use lock records to ensure that only a single instance can run at a time.\n  \n* **Monitor** – A Boolean (true/false) value indicating whether this app should listen for 'event clients.' The API can act as an event client. Event clients can connect to the app via a socket and pull a list of events generated by the app. This is typically used to provide a scrolling event window.\n  \n* **EventPort** – If set, this property determines the port that this app will listen on for event clients. If not set (the usual case), the port is determined by the formula: port = (pid % 10000) + 20000\n***\n  \nSample URL:  \n\n    http://localhost:8080/odcsapi/appstart?token=8ef5b2c8b9998b8d&appid=26\n  \nA valid token is required for this operation which may be passed in the HTTP header or command line.\n  \nThe appid parameter is required.\n  \nThe API will execute the 'startCmd' property found in the database record for the app. The string will be expanded with the environment, so it may contain strings like:\n  \n    $DCSTOOL_HOME/scripts/startRoutSched\n  \nOn most operating systems, when the command is executed, it becomes a child of the API process. Thus when/if the API process is terminated, the child app will also die. \n  \nTo prevent this on a Linux system, create a script that uses nohup to break the link between parent and child processes. For example the startRoutSched script looks like this:\n  \n```\n  #!/bin/bash\n  \n  export DCSTOOL_HOME=$HOME/test/odcsapi\n  nohup $DCSTOOL_HOME/bin/routsched -d1 -l routsched.log &\n```",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "application id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (APP)"
        ]
      }
    },
    "/appstop": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "stop a child app",
        "description": "REST - Loading Application Records describes API methods for retrieving and manipulating 'Loading Application' records. The concept of a 'Loading App' has been generalized to include any application that is known by the OpenDCS software.  \n\n  \nApplications each have a set of properties.\n  \nThe following properties are relevant to M&C:\n  \n* **startCmd** – A string containins a command used to start the application on this server. Most of the OpenDCS apps use lock records to ensure that only a single instance can run at a time.\n  \n* **Monitor** – A Boolean (true/false) value indicating whether this app should listen for 'event clients.' The API can act as an event client. Event clients can connect to the app via a socket and pull a list of events generated by the app. This is typically used to provide a scrolling event window.\n  \n* **EventPort** – If set, this property determines the port that this app will listen on for event clients. If not set (the usual case), the port is determined by the formula: port = (pid % 10000) + 20000\n***\n  \nSample URL:  \n  \n    http://localhost:8080/odcsapi/appstop?token=8ef5b2c8b9998b8d&appid=26\n\nA valid token is required for this operation which may be passed in the HTTP header or command line.  \n\n  \nThe appid parameter is required. The API will remove the *cp_comp_proc_lock* record for this process, if one exists. \n  \n**Note**: Well behaved OpenDCS programs will then clean up and exit within 10 seconds.",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "application id",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (APP)"
        ]
      }
    },
    "/odscapi/routingstatus": {
      "get": {
        "summary": "This method allows a developer to implement a web version of the OpenDCS Routing Monitor screen.",
        "description": "Sample URL:\n  \n    http://localhost:8080/odcsapi/routingstatus\n  \nThis method does not require a valid token. If one is passed, its last-used time is updated.\n  \nThe returned data structure is shown below. Note the following:\n  \n* All routing specs are contained in the list regardless of whether they have a schedule entry assigned. No schedule entry is indicated by scheduleEntryId = null.\n  \n* Routing specs with a suffix of '-manual' and the 'manual' attribute set to true indicate that the routing spec was run throught the 'rs' command. Otherwise they were run by a Routing Scheduler from a schedule entry.\n  \n* A routing spec may be run either way. Note that the entry for 'test' and 'test-manual' are the same routing spec. 'test' was run from the routing scheduler with scheduleEntryId=43, and 'test-manual' was run from the command line 'rs'.\n  \n```\n  [\n    {\n      \"routingSpecId\": 44,\n      \"name\": \"rs-MROI4-ROWI4\",\n      \"scheduleEntryId\": null,\n      \"appId\": null,\n      \"appName\": null,\n      \"runInterval\": null,\n      \"lastActivity\": null,\n      \"lastMsgTime\": null,\n      \"numMessages\": 0,\n      \"numErrors\": 0,\n      \"enabled\": false,\n      \"manual\": false\n    },\n    {\n      \"routingSpecId\": 58,\n      \"name\": \"test\",\n      \"scheduleEntryId\": 43,\n      \"appId\": 26,\n      \"appName\": \"RoutingScheduler\",\n      \"runInterval\": \"5 minute\",\n      \"lastActivity\": \"2023-05-31T18:56:54.364Z[UTC]\",\n      \"lastMsgTime\": \"2023-05-31T18:56:53.099Z[UTC]\",\n      \"numMessages\": 3362,\n      \"numErrors\": 3362,\n      \"enabled\": true,\n      \"manual\": false\n    },\n    {\n      \"routingSpecId\": 58,\n      \"name\": \"test-manual\",\n      \"scheduleEntryId\": 40,\n      \"appId\": 0,\n      \"appName\": null,\n      \"runInterval\": null,\n      \"lastActivity\": \"2023-05-31T18:37:02.490Z[UTC]\",\n      \"lastMsgTime\": \"2023-05-31T18:37:02.458Z[UTC]\",\n      \"numMessages\": 5700,\n      \"numErrors\": 5699,\n      \"enabled\": true,\n      \"manual\": true\n    },\n    {\n      \"routingSpecId\": 59,\n      \"name\": \"goes1-manual\",\n      \"scheduleEntryId\": 39,\n      \"appId\": 0,\n      \"appName\": null,\n      \"runInterval\": null,\n      \"lastActivity\": \"2022-12-01T22:19:06.024Z[UTC]\",\n      \"lastMsgTime\": \"2022-12-01T22:19:05.939Z[UTC]\",\n      \"numMessages\": 9,\n      \"numErrors\": 0,\n      \"enabled\": true,\n      \"manual\": true\n    },\n    {\n      \"routingSpecId\": 63,\n      \"name\": \"periodic-10-min\",\n      \"scheduleEntryId\": 38,\n      \"appId\": 26,\n      \"appName\": \"RoutingScheduler\",\n      \"runInterval\": \"10 minute\",\n      \"lastActivity\": \"2023-05-22T13:28:17.631Z[UTC]\",\n      \"lastMsgTime\": \"2023-05-22T13:28:12.825Z[UTC]\",\n      \"numMessages\": 8,\n      \"numErrors\": 0,\n      \"enabled\": true,\n      \"manual\": false\n    },\n    {\n      \"routingSpecId\": 63,\n      \"name\": \"periodic-10-minute-manual\",\n      \"scheduleEntryId\": 37,\n      \"appId\": 0,\n      \"appName\": null,\n      \"runInterval\": null,\n      \"lastActivity\": \"2022-12-01T20:37:50.811Z[UTC]\",\n      \"lastMsgTime\": \"2022-12-01T20:37:50.710Z[UTC]\",\n      \"numMessages\": 6,\n      \"numErrors\": 0,\n      \"enabled\": true,\n      \"manual\": true\n    },\n    {\n      \"routingSpecId\": 65,\n      \"name\": \"last-5-min\",\n      \"scheduleEntryId\": null,\n      \"appId\": null,\n      \"appName\": null,\n      \"runInterval\": null,\n      \"lastActivity\": null,\n      \"lastMsgTime\": null,\n      \"numMessages\": 0,\n      \"numErrors\": 0,\n      \"enabled\": false,\n      \"manual\": false\n    },\n    {\n      \"routingSpecId\": 65,\n      \"name\": \"last-5-min-manual\",\n      \"scheduleEntryId\": 42,\n      \"appId\": 0,\n      \"appName\": null,\n      \"runInterval\": null,\n      \"lastActivity\": \"2023-05-31T18:49:49.453Z[UTC]\",\n      \"lastMsgTime\": \"2023-05-31T18:49:47.902Z[UTC]\",\n      \"numMessages\": 3179,\n      \"numErrors\": 0,\n      \"enabled\": true,\n      \"manual\": true\n    }\n  ]\n\n```",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutingStatusEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (Routing)"
        ]
      }
    },
    "/odscapi/routingexecstatus": {
      "get": {
        "summary": "It returns all of the executions for the specified schedule entry",
        "description": "Sample URL\n  \n      http://localhost:8080/odcsapi/routingexecstatus?scheduleentryid=38\n  \nNote the 'GET routingstatus' method returns a list of routing specs showing a unique scheduleEntryId for each entry. There may be more than one entry for each routing spec because:\n    \n* The same routing spec may be run in multiple schedule entries.\n  \n* A 'manual' routing spec (i.e. run with the 'rs' command) will appear as a separate schedule entry with the 'manual' Boolean set to true.\n  \nThus this method, GET routingexecstatus, takes a scheduleentryid as its argument. It returns all of the executions for the specified schedule entry. The returned data structure appears as follows:\n  \n```\n  [\n    {\n      \"routingExecId\": 568,\n      \"scheduleEntryId\": 38,\n      \"routingSpecId\": 63,\n      \"runStart\": \"2023-06-01T17:20:00.516Z[UTC]\",\n      \"runStop\": \"2023-06-01T17:20:00.526Z[UTC]\",\n      \"numMessages\": 0,\n      \"numErrors\": 0,\n      \"numPlatforms\": 0,\n      \"lastMsgTime\": null,\n      \"lastActivity\": \"2023-06-01T17:20:00.527Z[UTC]\",\n      \"runStatus\": \"ERR-OutputInit\",\n      \"hostname\": \"mmaloney3.local\",\n      \"lastInput\": null,\n      \"lastOutput\": null\n    },\n    {\n      \"routingExecId\": 565,\n      \"scheduleEntryId\": 38,\n      \"routingSpecId\": 63,\n      \"runStart\": \"2023-06-01T17:10:00.841Z[UTC]\",\n      \"runStop\": \"2023-06-01T17:10:00.855Z[UTC]\",\n      \"numMessages\": 0,\n      \"numErrors\": 0,\n      \"numPlatforms\": 0,\n      \"lastMsgTime\": null,\n      \"lastActivity\": \"2023-06-01T17:10:00.855Z[UTC]\",\n      \"runStatus\": \"ERR-OutputInit\",\n      \"hostname\": \"mmaloney3.local\",\n      \"lastInput\": null,\n      \"lastOutput\": null\n    },\n    {\n      \"routingExecId\": 562,\n      \"scheduleEntryId\": 38,\n      \"routingSpecId\": 63,\n      \"runStart\": \"2023-06-01T17:00:00.259Z[UTC]\",\n      \"runStop\": \"2023-06-01T17:00:00.269Z[UTC]\",\n      \"numMessages\": 0,\n      \"numErrors\": 0,\n      \"numPlatforms\": 0,\n      \"lastMsgTime\": null,\n      \"lastActivity\": \"2023-06-01T17:00:00.270Z[UTC]\",\n      \"runStatus\": \"ERR-OutputInit\",\n      \"hostname\": \"mmaloney3.local\",\n      \"lastInput\": null,\n      \"lastOutput\": null\n    }\n  ]\n```\n  \nThe entries are sorted in descending order by the runStart time. 'runStop' may be null if the execution was halted abnormally or if it is still running. If any messages were processed, the num Messages/Errors/Platforms will be non-zero.",
        "parameters": [
          {
            "name": "scheduleentryid",
            "in": "query",
            "description": "schedule entry identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 38
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutingExecEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (Routing)"
        ]
      }
    },
    "/odscapi/dacqevents": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "returns events stored in the DACQ_EVENT database table",
        "description": "Sample URL:\n  \n    http://localhost:8080/odcsapi/dacqevents?token=88d30903583e6751&appid=26\n  \nThe 'GET dacqevents' method returns events stored in the DACQ_EVENT database table. These are events having to do with data acquisition (DACQ) events. That can be associated with …\n  \n* An execution of a routing spec (pass argument routingexecid)\n  \n* An application (pass argument appid)\n  \n*  A specific platform (pass argument platformid)\n  \nThe URL must contain a valid user token (either on URL or in HTTP header). It may contain any of the following additional argument. Each argument refines a filter that determines which events are to be returned:\n  \n*  **appid** (*long integer*): only return events generated by a specific app.\n  \n*  **routingexecid** (*long integer*): only return events generated during a specific execution of a routing spec. (The 'GET routingexecstatus' method will return a list of executions, each with a unique ID.)\n  \n*  **platformid** (*long integer*): only return events generated during the processing of a specific platform.\n  \n*  **backlog** (*string*): either the word 'last' or one of the valid interval names returned in GET intervals (see section 3.4.1). Only events generated since the specified interval are returned. The word 'last' means only return events generated since the last 'GET dacqevents' call within this session. It can be used to approximate a real-time stream. \n  \nThe returned data looks like this:\n  \n```\n  [\n    {\n      \"eventId\": 181646,\n      \"routingExecId\": 607,\n      \"platformId\": null,\n      \"eventTime\": \"2023-06-08T19:21:15.255Z[UTC]\",\n      \"priority\": \"INFO\",\n      \"appId\": 26,\n      \"appName\": \"RoutingScheduler\",\n      \"subsystem\": null,\n      \"msgRecvTime\": null,\n      \"eventText\": \"RoutingSpec(test) Connected to DDS server at www.covesw.com:-1, username='covetest'\"\n    },\n    {\n      \"eventId\": 181647,\n      \"routingExecId\": 606,\n      \"platformId\": null,\n      \"eventTime\": \"2023-06-08T19:21:15.281Z[UTC]\",\n      \"priority\": \"INFO\",\n      \"appId\": 26,\n      \"appName\": \"RoutingScheduler\",\n      \"subsystem\": null,\n      \"msgRecvTime\": null,\n      \"eventText\": \"RoutingSpec(periodic-10-minute) Connected to DDS server at www.covesw.com:-1, username='covetest'\"\n    },\n    {\n      \"eventId\": 181648,\n      \"routingExecId\": 607,\n      \"platformId\": null,\n      \"eventTime\": \"2023-06-08T19:21:15.284Z[UTC]\",\n      \"priority\": \"INFO\",\n      \"appId\": 26,\n      \"appName\": \"RoutingScheduler\",\n      \"subsystem\": null,\n      \"msgRecvTime\": null,\n      \"eventText\": \"RoutingSpec(test) Purging old DACQ_EVENTs before Sat Jun 03 15:21:15 EDT 2023\"\n    }\n  ]\n\n```",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "Only return events generated by a specific app.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 26
            }
          },
          {
            "name": "routingexecid",
            "in": "query",
            "description": "Only return events generated during a specific execution of a routing spec. (The 'GET routingexecstatus' method will return a list of executions, each with a unique ID.)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 64
            }
          },
          {
            "name": "platformid",
            "in": "query",
            "description": "Only return events generated during the processing of a specific platform.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 45
            }
          },
          {
            "name": "backlog",
            "in": "query",
            "description": "Either the word 'last' or one of the valid interval names returned in GET intervals (see section 3.4.1). Only events generated since the specified interval are returned. The word 'last' means only return events generated since the last 'GET dacqevents' call within this session. It can be used to approximate a real-time stream.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "9fe6390676c7dca9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DacqEventsEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (Routing)"
        ]
      }
    },
    "/odscapi/platformstat": {
      "get": {
        "summary": "returned structure contains information about recent activity on each platform",
        "description": "Sample URL:\n  \n    http://localhost:8080/odcsapi/platformstat  \n  \n  \nToken is not required for this method but if passed in the header or URL, it will be updated.\n  \nOptional argument 'netlistid' can be passed to only return platforms that have a transport medium in the referenced network list.\n  \nThe returned data structure contains information about recent activity on each platform:\n  \n```\n  [\n    {\n      \"platformId\": 53,\n      \"platformName\": \"OKVI4\",\n      \"siteId\": 1,\n      \"lastContact\": \"2023-06-09T18:30:53.086Z[UTC]\",\n      \"lastMessage\": \"2023-06-09T18:30:53.086Z[UTC]\",\n      \"lastError\": null,\n      \"lastMsgQuality\": \"G\",\n      \"annotation\": null,\n      \"lastRoutingExecId\": 609,\n      \"routingSpecName\": \"periodic-10-minute\"\n    },\n    {\n      \"platformId\": 54,\n      \"platformName\": \"MROI4\",\n      \"siteId\": 6,\n      \"lastContact\": \"2023-06-09T18:30:53.102Z[UTC]\",\n      \"lastMessage\": \"2023-06-09T18:30:53.102Z[UTC]\",\n      \"lastError\": null,\n      \"lastMsgQuality\": \"G\",\n      \"annotation\": null,\n      \"lastRoutingExecId\": 609,\n      \"routingSpecName\": \"periodic-10-minute\"\n    },\n    {\n      \"platformId\": 55,\n      \"platformName\": \"ROWI4\",\n      \"siteId\": 2,\n      \"lastContact\": \"2023-06-09T18:30:53.013Z[UTC]\",\n      \"lastMessage\": \"2023-06-09T18:30:53.013Z[UTC]\",\n      \"lastError\": null,\n      \"lastMsgQuality\": \"G\",\n      \"annotation\": null,\n      \"lastRoutingExecId\": 609,\n      \"routingSpecName\": \"periodic-10-minute\"\n    }\n  ]\n\n```\n  \nThis may be used to populate a GUI similar to the Java 'Platform Monitor' GUI in OpenDCS. A pulldown list of network list IDs and names is recommended.\n  \nNote the following:\n  \n*  **lastContact** is the last time that any communication from this platform was received.\n  \n*  **lastMessage** is the time stamp that the last message from this platform was received.\n  \n*  **lastError** is the time that a decoding or communications error last occurred with this platform.\n*  **lastRoutingExecId** indicates the specific execution of a routing spec that was last used to process this platform. (See Routing Exec Status above.)\n  \n*  **annotation** is the text of the last error message generated from this platform. To retrieve a list of Data Acquisition events for a platform, you can use the GET dacqevent method described in section 5.2.3, passing the 'platformid' argument.",
        "parameters": [
          {
            "name": "netlistid",
            "in": "query",
            "description": "only return platforms that have a transport medium in the referenced network list.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 44
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformStatEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "OpenDCS Process Monitor and Control (Routing)"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Used during secure-mode"
      },
      "not-secure-mode": {
        "type": "apiKey",
        "in": "query",
        "name": "token",
        "description": "Only for use outside of secure-mode"
      }
    },
    "schemas": {
      "season": {
        "type": "object",
        "properties": {
          "abbr": {
            "type": "string",
            "example": "autmn"
          },
          "name": {
            "type": "string",
            "example": "Autumn"
          },
          "start": {
            "type": "string",
            "example": "09/22-12:00"
          },
          "end": {
            "type": "string",
            "example": "12/21-12:00"
          },
          "tz": {
            "type": "string",
            "example": "EST5EDT"
          }
        }
      },
      "NetworkRef": {
        "type": "object",
        "properties": {
          "lastModifyTime": {
            "type": "string",
            "example": "2020-12-15T17:51:04.194Z[UTC]"
          },
          "name": {
            "type": "string",
            "example": "goes2"
          },
          "netlistId": {
            "type": "integer",
            "example": 6
          },
          "numPlatforms": {
            "type": "integer",
            "example": 3
          },
          "siteNameTypePref": {
            "type": "string",
            "example": "nwshb5"
          },
          "transportMediumType": {
            "type": "string",
            "example": "goes"
          }
        }
      },
      "NetworkRefList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NetworkRef"
        }
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "example": 10
          },
          "groupMembers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "dataSourceId": {
                  "type": "integer",
                  "example": 4
                },
                "dataSourceName": {
                  "type": "string",
                  "example": "Cove-LRGS"
                }
              }
            },
            "example": [
              {
                "dataSourceId": 4,
                "dataSourceName": "Cove-LRGS"
              },
              {
                "dataSourceId": 5,
                "dataSourceName": "CDADATA-As-MBHydro"
              },
              {
                "dataSourceId": 7,
                "dataSourceName": "USGS-Web"
              }
            ]
          },
          "name": {
            "type": "string",
            "example": "testgroup"
          },
          "props": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "example": {
              "whatevs": "something 567",
              "abc": "def"
            }
          },
          "type": {
            "type": "string",
            "example": "hotbackupgroup"
          },
          "usedBy": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "Site": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "example": "USA"
          },
          "description": {
            "type": "string",
            "example": "Barre Falls Dam. Ware River"
          },
          "elevUnits": {
            "type": "string",
            "example": "M"
          },
          "elevation": {
            "type": "string",
            "example": 234.7
          },
          "latitude": {
            "type": "string",
            "example": 42.4278
          },
          "longitude": {
            "type": "string",
            "example": -72.06261
          },
          "nearestCity": {
            "type": "string",
            "example": "Barre Falls Dam"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "example": {
              "some": "thing",
              "something": "else"
            }
          },
          "region": {
            "type": "string",
            "example": ""
          },
          "siteId": {
            "type": "integer",
            "example": 7
          },
          "sitenames": {
            "properties": {
              "CWMS": {
                "type": "string",
                "example": "BFD"
              },
              "NWSHB5": {
                "type": "string",
                "example": "BFD"
              }
            }
          },
          "state": {
            "type": "string",
            "example": "MA"
          },
          "timezone": {
            "type": "string",
            "example": "America/New_York"
          }
        }
      },
      "Config": {
        "type": "object",
        "properties": {
          "configId": {
            "type": "integer",
            "example": 12
          },
          "configSensors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "dataTypes": {
                  "type": "object",
                  "properties": {
                    "NL-SHEF": {
                      "type": "string",
                      "example": "WL"
                    },
                    "SHEF-PE": {
                      "type": "string",
                      "example": "HG"
                    },
                    "W-SHEF": {
                      "type": "string",
                      "example": "WL"
                    }
                  }
                },
                "properties": {
                  "type": "object",
                  "example": {}
                },
                "recordingInterval": {
                  "type": "integer",
                  "example": 3600
                },
                "recordingMode": {
                  "type": "string",
                  "example": "F"
                },
                "sensorName": {
                  "type": "string",
                  "example": "WL"
                },
                "sensorNumber": {
                  "type": "integer",
                  "example": 1
                },
                "timeOfFirstSample": {
                  "type": "integer",
                  "example": 0
                }
              }
            }
          },
          "description": {
            "type": "string",
            "example": "WSC SHEF - 2 sensors - HG, VB"
          },
          "name": {
            "type": "string",
            "example": "Shef-WSC-Hydro-RVERMMAR"
          },
          "numPlatforms": {
            "type": "integer",
            "example": 0
          },
          "scripts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "dataOrder": {
                  "type": "string",
                  "example": "D"
                },
                "formatStatements": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "format": {
                        "type": "string",
                        "example": "s(50,':',DONE),x,F(F,A,10d' ')"
                      },
                      "label": {
                        "type": "string",
                        "example": "getlabel"
                      },
                      "sequenceNum": {
                        "type": "integer",
                        "example": 0
                      }
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "example": "ST"
                },
                "scriptSensors": {
                  "type": "object",
                  "properties": {
                    "sensorNumber": {
                      "type": "integer",
                      "example": 1
                    },
                    "unitConverter": {
                      "type": "object",
                      "properties": {
                        "a": {
                          "type": "integer",
                          "example": 0
                        },
                        "algorithm": {
                          "type": "string",
                          "example": "none"
                        },
                        "b": {
                          "type": "integer",
                          "example": 0
                        },
                        "c": {
                          "type": "integer",
                          "example": 0
                        },
                        "d": {
                          "type": "integer",
                          "example": 0
                        },
                        "e": {
                          "type": "integer",
                          "example": 0
                        },
                        "f": {
                          "type": "integer",
                          "example": 0
                        },
                        "fromAbbr": {
                          "type": "string",
                          "example": "raw"
                        },
                        "toAbbr": {
                          "type": "string",
                          "example": "M"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "configId": 12,
          "configSensors": [
            {
              "dataTypes": {
                "NL-SHEF": "WL",
                "SHEF-PE": "HG",
                "W-SHEF": "WL"
              },
              "properties": {},
              "recordingInterval": 3600,
              "recordingMode": "F",
              "sensorName": "WL",
              "sensorNumber": 1,
              "timeOfFirstSample": 0
            },
            {
              "dataTypes": {
                "SHEF-PE": "VB"
              },
              "properties": {},
              "recordingInterval": 3600,
              "recordingMode": "F",
              "sensorName": "VB",
              "sensorNumber": 4,
              "timeOfFirstSample": 0
            }
          ],
          "description": "WSC SHEF - 2 sensors - HG, VB",
          "name": "Shef-WSC-Hydro-RVERMMAR",
          "numPlatforms": 0,
          "scripts": [
            {
              "dataOrder": "D",
              "headerType": "decodes:goes",
              "formatStatements": [
                {
                  "format": "s(50,':',DONE),x,F(F,A,10d' ')",
                  "label": "getlabel",
                  "sequenceNum": 0
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',1),32(w,c(N,skiphg),F(S,A,12d' +-:',1)), >GETLABEL",
                  "label": "hg",
                  "sequenceNum": 1
                },
                {
                  "format": "s(12,'.',getlabel),-2x,32(w,c(N,getlabel),F(S,A,12d' +-:',4)), >GETLABEL",
                  "label": "vb",
                  "sequenceNum": 2
                },
                {
                  "format": "s(12,'.',enddata),-2x,32(w,c(N,enddata),F(S,A,12d' +-:',4)), >GETLABEL",
                  "label": "x-nointerval",
                  "sequenceNum": 3
                },
                {
                  "format": ">vb",
                  "label": "battery",
                  "sequenceNum": 4
                },
                {
                  "format": "-3x,>getlabel",
                  "label": "enddata",
                  "sequenceNum": 5
                },
                {
                  "format": "/",
                  "label": "error",
                  "sequenceNum": 6
                },
                {
                  "format": "/,>getlabel",
                  "label": "done",
                  "sequenceNum": 7
                },
                {
                  "format": "-2x,5(S(50,':',done),S(3,'HG',enddata))>getlabel",
                  "label": "skiphg",
                  "sequenceNum": 8
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',6),32(w,c(N,enddata),F(S,A,12d' +-:',6)), >GETLABEL",
                  "label": "pr",
                  "sequenceNum": 9
                },
                {
                  "format": ">pr",
                  "label": "pc",
                  "sequenceNum": 10
                },
                {
                  "format": ">hg",
                  "label": "hk",
                  "sequenceNum": 11
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',7),32(w,c(N,enddata),F(S,A,12d' +-:',7)), >GETLABEL",
                  "label": "tx",
                  "sequenceNum": 12
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',8),32(w,c(N,enddata),F(S,A,12d' +-:',8)), >GETLABEL",
                  "label": "tn",
                  "sequenceNum": 13
                },
                {
                  "format": "s(12,'.',enddata),-2x,32(w,c(N,enddata),F(S,A,12d' +-:',4)), >GETLABEL",
                  "label": "vb-x",
                  "sequenceNum": 14
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',9),32(w,c(N,skiphg),F(S,A,12d' +-:',9)), >GETLABEL",
                  "label": "hh",
                  "sequenceNum": 15
                }
              ],
              "name": "ST",
              "scriptSensors": [
                {
                  "sensorNumber": 1,
                  "unitConverter": {
                    "a": 0,
                    "algorithm": "none",
                    "b": 0,
                    "c": 0,
                    "d": 0,
                    "e": 0,
                    "f": 0,
                    "fromAbbr": "raw",
                    "toAbbr": "M"
                  }
                },
                {
                  "sensorNumber": 4,
                  "unitConverter": {
                    "a": 0,
                    "algorithm": "none",
                    "b": 0,
                    "c": 0,
                    "d": 0,
                    "e": 0,
                    "f": 0,
                    "fromAbbr": "raw",
                    "toAbbr": "V"
                  }
                }
              ]
            }
          ]
        }
      },
      "PlatformRefs": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "agency": {
              "type": "string",
              "example": "CWMS"
            },
            "configId": {
              "type": "integer",
              "example": 5
            },
            "description": {
              "type": "string",
              "example": "Barre Falls Dam, Ware River, MA"
            },
            "name": {
              "type": "string",
              "example": "BFD"
            },
            "platformId": {
              "type": "integer",
              "example": 4
            },
            "siteId": {
              "type": "integer",
              "example": 7
            },
            "transportMedia": {
              "type": "object",
              "properties": {
                "goes-random": {
                  "type": "string",
                  "example": "CE3234CC"
                },
                "goes-self-timed": {
                  "type": "string",
                  "example": "CE3234CC"
                }
              }
            }
          }
        },
        "example": {
          "BFD": {
            "agency": "CWMS",
            "configId": 5,
            "description": "Barre Falls Dam, Ware River, MA",
            "name": "BFD",
            "platformId": 4,
            "siteId": 7,
            "transportMedia": {
              "goes-random": "CE3234CC",
              "goes-self-timed": "CE3234CC"
            }
          },
          "BMD-tailwater": {
            "agency": "CWMS",
            "configId": 7,
            "description": "Ball Mountain TW",
            "designator": "tailwater",
            "name": "BMD-tailwater",
            "platformId": 6,
            "siteId": 8,
            "transportMedia": {
              "goes-random": "CE3941F4",
              "goes-self-timed": "CE3941F4"
            }
          },
          "BMD": {
            "agency": "CWMS",
            "configId": 6,
            "description": "Ball Mountain Dam, West River,VT",
            "name": "BMD",
            "platformId": 5,
            "siteId": 8,
            "transportMedia": {
              "goes-random": "CE31D030",
              "goes": "CE31D030",
              "goes-self-timed": "CE31D030"
            }
          }
        }
      },
      "DecodesPlatform": {
        "type": "object",
        "properties": {
          "agency": {
            "type": "string",
            "example": "CWMS"
          },
          "configId": {
            "type": "integer",
            "example": 6
          },
          "description": {
            "type": "string",
            "example": "BAll Mountain Dam, West River,VT"
          },
          "lastModified": {
            "type": "string",
            "example": "2022-01-21T14:18:21.176Z[UTC]"
          },
          "platformId": {
            "type": "integer",
            "example": 5
          },
          "platformSensors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sensorNum": {
                  "type": "integer",
                  "example": 1
                },
                "sensorProps": {
                  "type": "object",
                  "example": {}
                },
                "max": {
                  "type": "integer",
                  "example": 120
                },
                "min": {
                  "type": "integer",
                  "example": -40
                },
                "actualSiteId": {
                  "type": "integer",
                  "example": 5
                }
              }
            }
          },
          "production": {
            "type": "boolean",
            "example": false
          },
          "properties": {
            "type": "object",
            "example": {}
          },
          "siteId": {
            "type": "integer",
            "example": 8
          },
          "transportMedia": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "baud": {
                  "type": "integer",
                  "example": 0
                },
                "channelNum": {
                  "type": "integer",
                  "example": 161
                },
                "dataBits": {
                  "type": "integer",
                  "example": 0
                },
                "doLogin": {
                  "type": "boolean",
                  "example": false
                },
                "mediumId": {
                  "type": "string",
                  "example": "CE31D030"
                },
                "mediumType": {
                  "type": "string",
                  "example": "goes-self-timed"
                },
                "parity": {
                  "type": "string",
                  "example": "U"
                },
                "scriptName": {
                  "type": "string",
                  "example": "ST"
                },
                "stopBits": {
                  "type": "integer",
                  "example": 0
                },
                "timeAdjustment": {
                  "type": "integer",
                  "example": 0
                },
                "timezone": {
                  "type": "string",
                  "example": "UTC"
                },
                "transportInterval": {
                  "type": "integer",
                  "example": 3600
                },
                "assignedTime": {
                  "type": "integer",
                  "example": 2095
                },
                "transportWindow": {
                  "type": "integer",
                  "example": 5
                }
              }
            }
          }
        },
        "example": {
          "agency": "CWMS",
          "configId": 6,
          "description": "Ball Mountain Dam, West River,VT",
          "lastModified": "2022-01-21T14:18:21.176Z[UTC]",
          "platformId": 5,
          "platformSensors": [
            {
              "max": 120,
              "min": -40,
              "sensorNum": 1,
              "sensorProps": {}
            },
            {
              "sensorNum": 2,
              "sensorProps": {}
            },
            {
              "sensorNum": 3,
              "sensorProps": {}
            },
            {
              "sensorNum": 4,
              "sensorProps": {}
            },
            {
              "actualSiteId": 5,
              "sensorNum": 5,
              "sensorProps": {}
            }
          ],
          "production": false,
          "properties": {},
          "siteId": 8,
          "transportMedia": [
            {
              "assignedTime": 2095,
              "baud": 0,
              "channelNum": 161,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "CE31D030",
              "mediumType": "goes-self-timed",
              "parity": "U",
              "scriptName": "ST",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "UTC",
              "transportInterval": 3600,
              "transportWindow": 5
            },
            {
              "baud": 0,
              "channelNum": 129,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "CE31D030",
              "mediumType": "goes-random",
              "parity": "U",
              "scriptName": "RD",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "UTC",
              "transportInterval": 900
            },
            {
              "baud": 0,
              "channelNum": 235,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "CE31D030",
              "mediumType": "goes",
              "parity": "U",
              "scriptName": "Network_Tower",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "UTC",
              "transportInterval": 900
            }
          ]
        }
      },
      "DecodesPresentationRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupId": {
              "type": "integer"
            },
            "lastModified": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "production": {
              "type": "boolean"
            }
          }
        },
        "example": [
          {
            "groupId": 1,
            "lastModified": "2022-01-14T14:43:47.297Z[UTC]",
            "name": "CWMS-English",
            "production": false
          },
          {
            "groupId": 2,
            "lastModified": "2020-05-11T20:23:20.103Z[UTC]",
            "name": "CWMS-Metric",
            "production": false
          },
          {
            "groupId": 3,
            "lastModified": "2020-05-11T20:23:20.118Z[UTC]",
            "name": "SHEF-English",
            "production": false
          },
          {
            "groupId": 4,
            "lastModified": "2020-05-11T20:33:10.275Z[UTC]",
            "name": "regtest",
            "production": false
          },
          {
            "groupId": 5,
            "lastModified": "2022-03-04T18:17:58.885Z[UTC]",
            "name": "NRCS",
            "production": true
          },
          {
            "groupId": 6,
            "inheritsFrom": "CWMS-English",
            "lastModified": "2021-03-05T14:06:18.435Z[UTC]",
            "name": "hydrodcs",
            "production": false
          }
        ]
      },
      "DecodesPresentationGroup": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "dataTypeCode": {
                  "type": "string"
                },
                "dataTypeStd": {
                  "type": "string"
                },
                "fractionalDigits": {
                  "type": "integer"
                },
                "units": {
                  "type": "string"
                }
              }
            }
          },
          "groupId": {
            "type": "integer"
          },
          "lastModified": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "production": {
            "type": "boolean"
          }
        },
        "example": {
          "elements": [
            {
              "dataTypeCode": "Elev",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "ft"
            },
            {
              "dataTypeCode": "Elev-Pool",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "ft"
            },
            {
              "dataTypeCode": "FLOW-HOLDOUT",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "cfs"
            },
            {
              "dataTypeCode": "FLOW-INFLOW",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "cfs"
            },
            {
              "dataTypeCode": "Temp",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "max": 212,
              "min": 0,
              "units": "degF"
            },
            {
              "dataTypeCode": "Flow",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "cfs"
            }
          ],
          "groupId": 4,
          "lastModified": "2022-03-04T19:00:21.752Z[UTC]",
          "name": "regtest",
          "production": false
        }
      },
      "DecodesRoutingRef": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "dataSourceName": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            },
            "lastModified": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "routingId": {
              "type": "integer"
            }
          }
        },
        "example": [
          {
            "dataSourceName": "OKVI4",
            "destination": "pipe()",
            "lastModified": "2020-05-11T20:24:53.052Z[UTC]",
            "name": "OKVI4-input",
            "routingId": 1
          },
          {
            "dataSourceName": "OKVI4",
            "destination": "opentsdb()",
            "lastModified": "2022-01-14T14:50:50.982Z[UTC]",
            "name": "OKVI4-ingest",
            "routingId": 2
          },
          {
            "dataSourceName": "MROI4-ROWI4",
            "destination": "opentsdb()",
            "lastModified": "2020-05-11T20:33:10.274Z[UTC]",
            "name": "rs-MROI4-ROWI4",
            "routingId": 3
          },
          {
            "dataSourceName": "BFD-BMD",
            "destination": "pipe()",
            "lastModified": "2022-01-14T14:44:23.26Z[UTC]",
            "name": "BFD-BMD-Decode-Test",
            "routingId": 4
          }
        ]
      },
      "DecodesRoutingSpec": {
        "type": "object",
        "properties": {
          "applyTimeTo": {
            "type": "string"
          },
          "ascendingTime": {
            "type": "boolean"
          },
          "dataSourceId": {
            "type": "integer"
          },
          "dataSourceName": {
            "type": "string"
          },
          "destinationArg": {
            "type": "string"
          },
          "destinationType": {
            "type": "string"
          },
          "enableEquations": {
            "type": "boolean"
          },
          "goesChannels": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "goesRandom": {
            "type": "boolean"
          },
          "goesSelfTimed": {
            "type": "boolean"
          },
          "goesSpacecraftCheck": {
            "type": "boolean"
          },
          "goesSpacecraftSelection": {
            "type": "string"
          },
          "iridium": {
            "type": "boolean"
          },
          "lastModified": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "netlistNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "networkDCP": {
            "type": "boolean"
          },
          "outputFormat": {
            "type": "string"
          },
          "outputTZ": {
            "type": "string"
          },
          "parityCheck": {
            "type": "boolean"
          },
          "paritySelection": {
            "type": "string"
          },
          "platformIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "platformNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "presGroupName": {
            "type": "string"
          },
          "production": {
            "type": "boolean"
          },
          "properties": {
            "type": "object"
          },
          "qualityNotification": {
            "type": "boolean"
          },
          "routingId": {
            "type": "integer"
          },
          "settlingTimeDelay": {
            "type": "boolean"
          },
          "since": {
            "type": "string"
          }
        },
        "example": {
          "applyTimeTo": "Both",
          "ascendingTime": true,
          "dataSourceId": 4,
          "dataSourceName": "Cove-LRGS",
          "destinationArg": "some-directory-path",
          "destinationType": "directory",
          "enableEquations": true,
          "goesChannels": [
            123
          ],
          "goesRandom": true,
          "goesSelfTimed": true,
          "goesSpacecraftCheck": true,
          "goesSpacecraftSelection": "East",
          "iridium": true,
          "lastModified": "2022-03-22T17:44:15.941Z[UTC]",
          "name": "test",
          "netlistNames": [
            "goes1"
          ],
          "networkDCP": true,
          "outputFormat": "emit-ascii",
          "outputTZ": "EST5EDT",
          "parityCheck": true,
          "paritySelection": "Good",
          "platformIds": [
            "12345678",
            "004085C8"
          ],
          "platformNames": [
            "MROI4"
          ],
          "presGroupName": "CWMS-English",
          "production": true,
          "properties": {},
          "qualityNotifications": true,
          "routingId": 20,
          "settlingTimeDelay": true,
          "since": "2022/065 00:00:00"
        }
      },
      "ScheduleRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "appName": {
              "type": "string",
              "example": "RoutingScheduler"
            },
            "enabled": {
              "type": "boolean",
              "example": false
            },
            "lastModified": {
              "type": "string",
              "example": "2020-12-15T17:52:13.934Z[UTC]"
            },
            "name": {
              "type": "string",
              "example": "goes1"
            },
            "routingSpecName": {
              "type": "string",
              "example": "goes1"
            },
            "schedEntryId": {
              "type": "integer",
              "example": 9
            }
          }
        },
        "example": [
          {
            "appName": "RoutingScheduler",
            "enabled": false,
            "lastModified": "2020-12-15T17:52:13.934Z[UTC]",
            "name": "goes1",
            "routingSpecName": "goes1",
            "schedEntryId": 9
          },
          {
            "appName": "RoutingScheduler",
            "enabled": false,
            "lastModified": "2020-12-15T17:53:06.043Z[UTC]",
            "name": "goes2",
            "routingSpecName": "goes2",
            "schedEntryId": 10
          },
          {
            "enabled": false,
            "lastModified": "2022-03-23T13:54:09.188Z[UTC]",
            "name": "no_app_assigned",
            "routingSpecName": "polltest",
            "schedEntryId": 17
          },
          {
            "appName": "RoutingScheduler",
            "enabled": false,
            "lastModified": "2022-01-14T14:45:01.336Z[UTC]",
            "name": "junk",
            "routingSpecName": "polltest",
            "schedEntryId": 14
          }
        ]
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer"
          },
          "appName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "lastModified": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "routingSpecId": {
            "type": "integer"
          },
          "routingSpecName": {
            "type": "string"
          },
          "schedEntryId": {
            "type": "integer"
          },
          "timeZone": {
            "type": "integer"
          }
        },
        "example": {
          "appId": 14,
          "appName": "RoutingScheduler",
          "enabled": false,
          "lastModified": "2022-03-28T18:02:13.659Z[UTC]",
          "name": "something-else",
          "routingSpecId": 9,
          "routingSpecName": "goes1",
          "schedEntryId": 21,
          "timeZone": "America/New_York"
        }
      },
      "AppRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "appId": {
              "type": "integer"
            },
            "appName": {
              "type": "string"
            },
            "comment": {
              "type": "string"
            },
            "lastModified": {
              "type": "string"
            }
          }
        },
        "example": [
          {
            "appId": 1,
            "appName": "decodes",
            "comment": "Manual DECODES Routing Specs",
            "lastModified": "2020-05-11T20:23:21Z[UTC]"
          },
          {
            "appId": 3,
            "appName": "compedit",
            "comment": "Computation Editing Application",
            "lastModified": "2020-05-11T20:23:21Z[UTC]"
          },
          {
            "appId": 4,
            "appName": "compproc",
            "appType": "computationprocess",
            "comment": "Main Computation Process",
            "lastModified": "2022-03-30T20:49:44Z[UTC]"
          },
          {
            "appId": 8,
            "appName": "utility",
            "appType": "utility",
            "comment": "Utility Program -- used by several apps",
            "lastModified": "2022-01-14T15:28:40Z[UTC]"
          },
          {
            "appId": 10,
            "appName": "dcpmon",
            "comment": "DCP Monitor Web Application",
            "lastModified": "2020-05-11T20:23:21Z[UTC]"
          },
          {
            "appId": 14,
            "appName": "RoutingScheduler",
            "appType": "routingscheduler",
            "comment": "Schedules and Executes DECODES Routing Specs",
            "lastModified": "2020-05-11T20:23:21Z[UTC]"
          },
          {
            "appId": 15,
            "appName": "compdepends",
            "appType": "compdepends",
            "comment": "Daemon to determine computation dependencies",
            "lastModified": "2020-05-11T20:23:21Z[UTC]"
          }
        ]
      },
      "LoadingApp": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer"
          },
          "appName": {
            "type": "string"
          },
          "appType": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "lastModified": {
            "type": "string"
          },
          "manualEditingApp": {
            "type": "boolean"
          }
        },
        "example": {
          "appId": 4,
          "appName": "compproc",
          "appType": "computationprocess",
          "comment": "Main Computation Process",
          "lastModified": "2022-03-30T20:49:44Z[UTC]",
          "manualEditingApp": false,
          "properties": {
            "fromName": "idk"
          }
        }
      },
      "AlgorithmRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "algorithmId": {
              "type": "integer"
            },
            "algorithmName": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "execClass": {
              "type": "string"
            },
            "numCompsUsing": {
              "type": "integer"
            }
          }
        },
        "example": [
          {
            "algorithmId": 1,
            "algorithmName": "AlarmScreening",
            "description": "Perform value, rate-of-change, stuck-sensor, and missing-val",
            "execClass": "decodes.tsdb.alarm.AlarmScreeningAlgorithm",
            "numCompsUsing": 2
          },
          {
            "algorithmId": 2,
            "algorithmName": "Bridge Clearance",
            "description": "Computes bridge clearance by subtracting waterlevel from con",
            "execClass": "decodes.tsdb.algo.BridgeClearance",
            "numCompsUsing": 0
          },
          {
            "algorithmId": 3,
            "algorithmName": "CentralRunningAverageAlgorithm",
            "description": "CentralRunningAverageAlgorithm averages single 'input' param",
            "execClass": "decodes.tsdb.algo.CentralRunningAverageAlgorithm",
            "numCompsUsing": 0
          },
          {
            "algorithmId": 8,
            "algorithmName": "ExpressionParserAlgorithm",
            "description": "Allow up to 5 inputs labeled in1",
            "execClass": "decodes.tsdb.algo.ExpressionParserAlgorithm",
            "numCompsUsing": 0
          }
        ]
      },
      "OpenDCSAlgorithm": {
        "type": "object",
        "properties": {
          "algoScripts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "algorithmId": {
            "type": "integer",
            "example": 4
          },
          "descriptioin": {
            "type": "string",
            "example": "Given two inputs, output the best one: If only one is present at the time-slice, output it. If one is outside the specified upper or lower limit (see properties) output the other. If both are acceptable, output the first one. Useful in situations where you have redundant sensors."
          },
          "execClass": {
            "type": "string",
            "example": "decodes.tsdb.algo.ChooseOne"
          },
          "name": {
            "type": "string",
            "example": "ChooseOne"
          },
          "numCompsUsing": {
            "type": "integer",
            "example": 1
          },
          "parms": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "parmType": {
                  "type": "string",
                  "example": "i"
                },
                "roleName": {
                  "type": "string",
                  "example": "input1"
                }
              }
            }
          },
          "props": {
            "type": "object",
            "properties": {
              "input1_MISSING": {
                "type": "string",
                "example": "IGNORE"
              },
              "chooseHigher": {
                "type": "boolean",
                "example": true
              },
              "upperLimit": {
                "type": "number",
                "example": 999999999999.9
              },
              "lowerLimit": {
                "type": "number",
                "example": -999999999999.9
              },
              "input2_MISSING": {
                "type": "string",
                "example": "IGNORE"
              }
            }
          }
        },
        "example": {
          "algoScripts": [],
          "algorithmId": 4,
          "description": "Given two inputs, output the best one: If only one is present at the time-slice, output it. If one is outside the specified upper or lower limit (see properties) output the other. If both are acceptable, output the first one. Useful in situations where you have redundant sensors.",
          "execClass": "decodes.tsdb.algo.ChooseOne",
          "name": "ChooseOne",
          "numCompsUsing": 1,
          "parms": [
            {
              "parmType": "i",
              "roleName": "input1"
            },
            {
              "parmType": "i",
              "roleName": "input2"
            },
            {
              "parmType": "o",
              "roleName": "output"
            }
          ],
          "props": {
            "input1_MISSING": "IGNORE",
            "chooseHigher": "true",
            "upperLimit": "999999999999.9",
            "lowerLimit": "-999999999999.9",
            "input2_MISSING": "IGNORE"
          }
        }
      },
      "OpenDCSComputation": {
        "type": "object",
        "properties": {
          "algorithmId": {
            "type": "integer",
            "example": 24
          },
          "algorithmName": {
            "type": "string",
            "example": "AverageAlgorithm"
          },
          "appId": {
            "type": "integer",
            "example": 5
          },
          "comment": {
            "type": "string",
            "example": ""
          },
          "computationId": {
            "type": "integer",
            "example": 4
          },
          "effectiveEndType": {
            "type": "string",
            "example": "No Limit"
          },
          "effectiveStartType": {
            "type": "string",
            "example": "No Limit"
          },
          "enabled": {
            "type": "boolean",
            "example": false
          },
          "groupId": {
            "type": "integer",
            "example": -1
          },
          "lastModified": {
            "type": "string",
            "example": "2022-05-17T17:17:04.693Z[UTC]"
          },
          "name": {
            "type": "string",
            "example": "Daily Ave (...)"
          },
          "parmList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "algoParmType": {
                  "type": "string",
                  "example": "i"
                },
                "algoRoleName": {
                  "type": "string",
                  "example": "input"
                },
                "dataType": {
                  "type": "string",
                  "example": "Stage"
                },
                "dataTypeId": {
                  "type": "integer",
                  "example": 48
                },
                "deltaT": {
                  "type": "integer",
                  "example": 0
                },
                "duration": {
                  "type": "string",
                  "example": 0
                },
                "interval": {
                  "type": "string",
                  "example": "15Minutes"
                },
                "paramType": {
                  "type": "string",
                  "example": "Inst"
                },
                "siteId": {
                  "type": "integer",
                  "example": 1
                },
                "siteName": {
                  "type": "string",
                  "example": "OKVI4"
                },
                "tsKey": {
                  "type": "integer",
                  "example": 1
                },
                "version": {
                  "type": "string",
                  "example": "raw"
                }
              }
            }
          },
          "props": {
            "type": "object",
            "properties": {
              "minSamplesNeeded": {
                "type": "string",
                "example": 1
              },
              "aggUpperBoundClosed": {
                "type": "string",
                "example": false
              },
              "aggregateTimeZone": {
                "type": "string",
                "example": "UTC"
              },
              "average_tsname": {
                "type": "string",
                "example": "HG-Ave-Open-Open"
              },
              "aggLowerBoundClosed": {
                "type": "string",
                "example": false
              }
            }
          }
        },
        "example": {
          "algorithmId": 24,
          "algorithmName": "AverageAlgorithm",
          "appId": 5,
          "comment": "",
          "computationId": 4,
          "effectiveEndType": "No Limit",
          "effectiveStartType": "No Limit",
          "enabled": false,
          "groupId": -1,
          "lastModified": "2022-05-17T17:17:04.693Z[UTC]",
          "name": "Daily Ave ( ... )",
          "parmList": [
            {
              "algoParmType": "i",
              "algoRoleName": "input",
              "dataType": "Stage",
              "dataTypeId": 48,
              "deltaT": 0,
              "duration": "0",
              "interval": "15Minutes",
              "paramType": "Inst",
              "siteId": 1,
              "siteName": "OKVI4",
              "tsKey": 1,
              "version": "raw"
            },
            {
              "algoParmType": "o",
              "algoRoleName": "average",
              "dataType": "Stage",
              "dataTypeId": 48,
              "deltaT": 0,
              "duration": "1Day",
              "interval": "1Day",
              "paramType": "Ave",
              "siteId": 1,
              "siteName": "OKVI4",
              "tsKey": 5,
              "version": "OO"
            }
          ],
          "props": {
            "minSamplesNeeded": "1",
            "aggUpperBoundClosed": "false",
            "aggregateTimeZone": "UTC",
            "average_tsname": "HG-Ave-Open-Open",
            "aggLowerBoundClosed": "false"
          }
        }
      },
      "tsdb_properties": {
        "type": "object",
        "properties": {
          "offsetErrorAction": {
            "type": "string",
            "example": "ROUND"
          },
          "storagePresentationGroup": {
            "type": "string",
            "example": "hydrodcs"
          },
          "api.datasource": {
            "type": "string",
            "example": "Cove-LRGS"
          },
          "allowDstOffsetVariation": {
            "type": "string",
            "example": true
          }
        },
        "example": {
          "offsetErrorAction": "ROUND",
          "storagePresentationGroup": "hydrodcs",
          "api.datasource": "Cove-LRGS",
          "allowDstOffsetVariation": "true"
        }
      },
      "eu": {
        "type": "object",
        "properties": {
          "abbr": {
            "type": "string",
            "example": "$"
          },
          "family": {
            "type": "string",
            "example": "univ"
          },
          "measures": {
            "type": "string",
            "example": "Currency"
          },
          "name": {
            "type": "string",
            "example": "Dollars"
          }
        },
        "example": {
          "abbr": "blob",
          "family": "Metric",
          "measures": "stuff",
          "name": "A Blob of Stuff"
        }
      },
      "EUConversion": {
        "type": "object",
        "properties": {
          "ucid": {
            "type": "string",
            "example": 3689
          },
          "fromAbbr": {
            "type": "string",
            "example": "m^3/s"
          },
          "toAbbr": {
            "type": "string",
            "example": "cms"
          },
          "algorithm": {
            "type": "string",
            "example": "none"
          },
          "a": {
            "type": "integer",
            "example": 0
          },
          "b": {
            "type": "integer",
            "example": 0
          },
          "c": {
            "type": "integer",
            "example": 0
          },
          "d": {
            "type": "integer",
            "example": 0
          },
          "e": {
            "type": "integer",
            "example": 0
          },
          "f": {
            "type": "integer",
            "example": 0
          }
        },
        "example": {
          "ucId": 3689,
          "fromAbbr": "m^3/s",
          "toAbbr": "cms",
          "algorithm": "none",
          "a": 0,
          "b": 0,
          "c": 0,
          "d": 0,
          "e": 0,
          "f": 0
        }
      },
      "datatypelist": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": 72114
          },
          "displayName": {
            "type": "string",
            "example": "CWMS:72114"
          },
          "id": {
            "type": "integer",
            "example": 367
          },
          "standard": {
            "type": "string",
            "example": "CWMS"
          }
        },
        "example": [
          {
            "code": "72114",
            "displayName": "CWMS:72114",
            "id": 367,
            "standard": "CWMS"
          },
          {
            "code": "Address",
            "displayName": "CWMS:Address",
            "id": 368,
            "standard": "CWMS"
          },
          {
            "code": "Code-Channel",
            "displayName": "CWMS:Code-Channel",
            "id": 382,
            "standard": "CWMS"
          },
          {
            "code": "Code-DCPAddress",
            "displayName": "CWMS:Code-DCPAddress",
            "id": 372,
            "standard": "CWMS"
          },
          {
            "code": "Depth-Snow",
            "id": 72,
            "standard": "CWMS"
          }
        ]
      },
      "DCPMessage": {
        "type": "object",
        "properties": {
          "flags": {
            "type": "integer",
            "example": 71765
          },
          "platformId": {
            "type": "string",
            "example": "CE31D030"
          },
          "sequenceNum": {
            "type": "integer",
            "example": 25693
          },
          "localRecvTime": {
            "type": "string",
            "example": "2023-05-09T12:34:54.428Z[UTC]"
          },
          "carrierStart": {
            "type": "string",
            "example": "2023-05-09T12:34:55.284Z[UTC]"
          },
          "carrierStop": {
            "type": "string",
            "example": "2023-05-09T12:34:56.752Z[UTC]"
          },
          "baud": {
            "type": "integer",
            "example": 300
          },
          "goodPhasePct": {
            "type": "integer",
            "example": 100
          },
          "freqOffset": {
            "type": "number",
            "example": 0.5
          },
          "signalStrength": {
            "type": "number",
            "example": 44.8
          },
          "phaseNoise": {
            "type": "number",
            "example": 1.97
          },
          "xmitTime": {
            "type": "string",
            "example": null
          },
          "momsn": {
            "type": "string",
            "example": null
          },
          "mtmsn": {
            "type": "string",
            "example": null
          },
          "cdrReference": {
            "type": "string",
            "example": null
          },
          "sessionStatus": {
            "type": "string",
            "example": null
          },
          "base64": {
            "type": "string",
            "example": "Q0UzMUQwMzAyMzEyOTEyMzQ1NUc0NSswTk4xNjFFTjIwMDAyN2JCMURBTXRBTXRBTXRBTXM6WUIgMTMuNTkgIA=="
          }
        },
        "example": {
          "flags": 71765,
          "platformId": "CE31D030",
          "sequenceNum": 25693,
          "localRecvTime": "2023-05-09T12:34:54.428Z[UTC]",
          "carrierStart": "2023-05-09T12:34:55.284Z[UTC]",
          "carrierStop": "2023-05-09T12:34:56.752Z[UTC]",
          "baud": 300,
          "goodPhasePct": 100,
          "freqOffset": 0.5,
          "signalStrength": 44.8,
          "phaseNoise": 1.97,
          "xmitTime": null,
          "momsn": null,
          "mtmsn": null,
          "cdrReference": null,
          "sessionStatus": null,
          "base64": "Q0UzMUQwMzAyMzEyOTEyMzQ1NUc0NSswTk4xNjFFTjIwMDAyN2JCMURBTXRBTXRBTXRBTXM6WUIgMTMuNTkgIA=="
        }
      },
      "TimeSeriesInterval": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "fortnight"
          },
          "calConstant": {
            "type": "string",
            "example": "day"
          },
          "calMultilier": {
            "type": "integer",
            "example": 14
          }
        },
        "example": {
          "name": "fortnight",
          "calConstant": "day",
          "calMultilier": 14
        }
      },
      "LoginCredentials": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "UserNameForLogin"
          },
          "password": {
            "type": "string",
            "example": "PasswordForLogin"
          }
        }
      },
      "RefListObject": {
        "type": "object",
        "properties": {
          "reflistId": {
            "type": "integer",
            "example": 3
          },
          "enumName": {
            "type": "string",
            "example": "ScriptType"
          },
          "items": {
            "additionalProperties": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "example": "standard"
                },
                "description": {
                  "type": "string",
                  "example": "DECODES Format Statements and Unit Conversions"
                },
                "execClassName": {
                  "type": "string",
                  "example": "DecodesScript"
                },
                "editClassName": {
                  "type": "string",
                  "example": null
                },
                "sortNumber": {
                  "type": "integer",
                  "example": 3
                }
              }
            }
          },
          "defaultValue": {
            "example": null
          },
          "description": {
            "type": "string",
            "example": null
          }
        },
        "example": {
          "reflistId": 3,
          "enumName": "ScriptType",
          "items": {
            "standard": {
              "value": "standard",
              "description": "DECODES Format Statements and Unit Conversions",
              "execClassName": "DecodesScript",
              "editClassName": null,
              "sortNumber": 3
            },
            "nos": {
              "value": "nos",
              "description": "Hard-coded NOS data parser",
              "execClassName": "NOSMessageParser",
              "editClassName": null,
              "sortNumber": 2
            },
            "ndbc": {
              "value": "ndbc",
              "description": "National Data Buoy Center Context-Sensitive Parser",
              "execClassName": "NDBCMessageParser",
              "editClassName": null,
              "sortNumber": 1
            }
          },
          "defaultValue": null,
          "description": null
        }
      },
      "RefLists": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/RefListObject"
        },
        "example": {
          "ScriptType": {
            "reflistId": 3,
            "enumName": "ScriptType",
            "items": {
              "standard": {
                "value": "standard",
                "description": "DECODES Format Statements and Unit Conversions",
                "execClassName": "DecodesScript",
                "editClassName": null,
                "sortNumber": 3
              },
              "nos": {
                "value": "nos",
                "description": "Hard-coded NOS data parser",
                "execClassName": "NOSMessageParser",
                "editClassName": null,
                "sortNumber": 2
              },
              "ndbc": {
                "value": "ndbc",
                "description": "National Data Buoy Center Context-Sensitive Parser",
                "execClassName": "NDBCMessageParser",
                "editClassName": null,
                "sortNumber": 1
              }
            },
            "defaultValue": null,
            "description": null
          },
          "DataOrder": {
            "reflistId": 9,
            "enumName": "DataOrder",
            "items": {
              "a": {
                "value": "a",
                "description": "Ascending",
                "execClassName": null,
                "editClassName": null,
                "sortNumber": null
              },
              "d": {
                "value": "d",
                "description": "Descending",
                "execClassName": null,
                "editClassName": null,
                "sortNumber": null
              }
            },
            "defaultValue": "d",
            "description": null
          }
        }
      },
      "Season": {
        "type": "object",
        "properties": {
          "abbr": {
            "type": "string",
            "example": "autmn"
          },
          "name": {
            "type": "string",
            "example": "Autumn"
          },
          "start": {
            "type": "string",
            "example": "09/22-12:00"
          },
          "end": {
            "type": "string",
            "example": "12/21-12:00"
          },
          "tz": {
            "type": "string",
            "example": "EST5EDT"
          }
        },
        "example": {
          "abbr": "autumn",
          "name": "Autumn",
          "start": "09/22-12:00",
          "end": "12/21-12:00",
          "tz": "EST5EDT"
        }
      },
      "SeasonList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Season"
        },
        "example": [
          {
            "abbr": "autumn",
            "name": "Autumn",
            "start": "09/22-12:00",
            "end": "12/21-12:00",
            "tz": "EST5EDT"
          },
          {
            "abbr": "winter",
            "name": "Winter",
            "start": "12/21-12:00",
            "end": "03/20-12:00",
            "tz": "EST5EDT"
          },
          {
            "abbr": "all_year",
            "name": "All Year",
            "start": "01/01-00:00",
            "end": "12/31-23:59",
            "tz": null
          },
          {
            "abbr": "0211",
            "name": "Feb through Nov",
            "start": "02/01-00:00",
            "end": "11/30-23:59",
            "tz": "UTC"
          }
        ]
      },
      "NetList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "example": ""
                },
                "platformName": {
                  "type": "string",
                  "example": "CGRO"
                },
                "transportID": {
                  "type": "string",
                  "example": 14159500
                }
              }
            }
          },
          "lastModifyTime": {
            "type": "string",
            "example": "2020-10-19T18:14:14.788Z[UTC]"
          },
          "name": {
            "type": "string",
            "example": "USGS-Sites"
          },
          "netlistId": {
            "type": "integer",
            "example": 4
          },
          "siteNameTypePref": {
            "type": "string",
            "example": "newshb5"
          },
          "transportMediumType": {
            "type": "string",
            "example": "other"
          }
        },
        "example": {
          "items": {
            "14159500": {
              "description": "",
              "platformName": "CGRO",
              "transportId": "14159500"
            },
            "14372300": {
              "description": "",
              "platformName": "AGNO",
              "transportId": "14372300"
            }
          },
          "lastModifyTime": "2020-10-19T18:14:14.788Z[UTC]",
          "name": "USGS-Sites",
          "netlistId": 4,
          "siteNameTypePref": "nwshb5",
          "transportMediumType": "other"
        }
      },
      "DataSourceRef": {
        "type": "object",
        "properties": {
          "additionalProperties": {
            "type": "object",
            "properties": {
              "arguments": {
                "type": "string",
                "example": "host=cdadata.wcda.noaa.gov, password=****, username=mbhydro"
              },
              "dataSourceId": {
                "type": "integer",
                "example": 5
              },
              "name": {
                "type": "string",
                "example": "CDADATA-As-MBHydro"
              },
              "usedBy": {
                "type": "integer",
                "example": 0
              }
            }
          }
        },
        "example": {
          "CDADATA-As-MBHydro": {
            "arguments": "host=cdadata.wcda.noaa.gov, password=****, username=mbhydro",
            "dataSourceId": 5,
            "name": "CDADATA-As-MBHydro",
            "type": "lrgs",
            "usedBy": 0
          },
          "edl-tcp-poll": {
            "arguments": "availablePorts=20, maxBacklogHours=48, pollNumTries=3, portType=tcpclient, saveSessionFile=$DCSTOOL_USERDIR/edl-polled/$SITENAME-$DATE",
            "dataSourceId": 9,
            "name": "edl-tcp-poll",
            "type": "polled",
            "usedBy": 1
          },
          "testgroup": {
            "dataSourceId": 10,
            "name": "testgroup",
            "type": "hotbackupgroup",
            "usedBy": 0
          }
        }
      },
      "ConfigRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "configId": {
              "type": "integer",
              "example": 1
            },
            "description": {
              "type": "string",
              "example": "WSC SHEF - 2 sensors - HG, VB"
            },
            "name": {
              "type": "string",
              "example": "Shef-WSC-Hydro-RBRDDDVH"
            },
            "numPlatforms": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "example": [
          {
            "configId": 1,
            "description": "WSC SHEF - 2 sensors - HG, VB",
            "name": "Shef-WSC-Hydro-RCOYCHER",
            "numPlatforms": 1
          },
          {
            "configId": 2,
            "description": "WSC SHEF - 2 sensors - QR=QF, HG",
            "name": "Shef-WSC-Hydro-RBRDDDVH",
            "numPlatforms": 1
          },
          {
            "configId": 3,
            "description": "WSC SHEF - 2 sensors - HG, VB",
            "name": "Shef-WSC-Hydro-RBLOCLEE",
            "numPlatforms": 1
          },
          {
            "configId": 4,
            "description": "AE SHEF - 4 sensors - PC, TA, SW, YB=VB",
            "name": "Shef-AE-Met-SESK",
            "numPlatforms": 1
          },
          {
            "configId": 5,
            "description": "WSC SHEF - 2 sensors - HG, VB",
            "name": "Shef-WSC-Hydro-RBULLRES",
            "numPlatforms": 1
          },
          {
            "configId": 6,
            "description": "WSC SHEF - 2 sensors - HG, VB",
            "name": "Shef-WSC-Hydro-RREDBIN",
            "numPlatforms": 1
          }
        ]
      },
      "ComputationRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "algorithmId": {
              "type": "integer",
              "example": 24
            },
            "algorithmName": {
              "type": "string",
              "example": "AverageAlgorithm"
            },
            "computationId": {
              "type": "integer",
              "example": 1
            },
            "description": {
              "type": "string",
              "example": ""
            },
            "enabled": {
              "type": "string",
              "example": false
            },
            "name": {
              "type": "string",
              "example": "Daily Ave [ ... )"
            },
            "processId": {
              "type": "integer",
              "example": 5
            },
            "processName": {
              "type": "string",
              "example": "compproc_regtest"
            }
          }
        },
        "example": [
          {
            "algorithmId": 24,
            "algorithmName": "AverageAlgorithm",
            "computationId": 1,
            "description": "",
            "enabled": false,
            "name": "Daily Ave [ ... )",
            "processId": 5,
            "processName": "compproc_regtest"
          },
          {
            "algorithmId": 24,
            "algorithmName": "AverageAlgorithm",
            "computationId": 2,
            "description": "",
            "enabled": false,
            "name": "Daily Ave ( ... ]",
            "processId": 5,
            "processName": "compproc_regtest"
          },
          {
            "algorithmId": 24,
            "algorithmName": "AverageAlgorithm",
            "computationId": 3,
            "description": "",
            "enabled": false,
            "name": "Daily Ave [ ... ]",
            "processId": 5,
            "processName": "compproc_regtest"
          }
        ]
      },
      "OpenDCSComputationTimeseriesEntry": {
        "type": "object",
        "properties": {
          "uniqueString": {
            "type": "string",
            "example": "ROWI4.Stage.Inst.15Minutes.0.raw"
          },
          "key": {
            "type": "integer",
            "example": 8
          },
          "description": {
            "type": "string",
            "example": "ROWI4 - Stage (created by DECODES)"
          },
          "sotargeUnits": {
            "type": "string",
            "example": "ft"
          }
        },
        "example": {
          "uniqueString": "ROWI4.Stage.Inst.15Minutes.0.raw",
          "key": 8,
          "description": "ROWI4 - Stage (created by DECODES)",
          "storageUnits": "ft"
        }
      },
      "OpenDCSComputationTimeseries": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OpenDCSComputationTimeseriesEntry"
        },
        "example": [
          {
            "uniqueString": "ROWI4.Stage.Inst.15Minutes.0.raw",
            "key": 8,
            "description": "ROWI4 - Stage (created by DECODES)",
            "storageUnits": "ft"
          },
          {
            "uniqueString": "MROI4.Stage.Inst.30Minutes.0.raw",
            "key": 11,
            "description": "MROI4 - Stage (created by DECODES)",
            "storageUnits": "ft"
          }
        ]
      },
      "OpenDCSCompTestRequest": {
        "type": "object",
        "properties": {
          "computation": {
            "type": "object",
            "properties": {
              "computationId": {
                "type": "integer",
                "example": 5
              },
              "name": {
                "type": "string",
                "example": "MROI4-ROWI4-Stage-Copy"
              },
              "comment": {
                "type": "string",
                "example": ""
              },
              "appId": {
                "type": "integer",
                "example": 5
              },
              "applicationName": {
                "example": null
              },
              "lastModified": {
                "type": "integer",
                "example": 1654538252952
              },
              "enabled": {
                "type": "boolean",
                "example": false
              },
              "effectiveStartType": {
                "type": "string",
                "example": "No Limit"
              },
              "effectiveStartDate": {
                "example": null
              },
              "effectiveStartInterval": {
                "example": null
              },
              "effectiveEndType": {
                "type": "string",
                "example": "No Limit"
              },
              "effectiveEndDate": {
                "example": null
              },
              "effectiveEndInterval": {
                "example": null
              },
              "algorithmId": {
                "type": "integer",
                "example": 26
              },
              "algorithmName": {
                "type": "string",
                "example": "CopyAlgorithm"
              },
              "parmList": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoParmType": {
                      "type": "string",
                      "example": "i"
                    },
                    "algoRoleName": {
                      "type": "string",
                      "example": null
                    },
                    "tsKey": {
                      "example": null
                    },
                    "dataTypeId": {
                      "type": "string",
                      "example": ""
                    },
                    "dataType": {
                      "type": "string",
                      "example": null
                    },
                    "interval": {
                      "type": "string",
                      "example": ""
                    },
                    "deltaT": {
                      "type": "integer",
                      "example": 0
                    },
                    "deltaTUnits": {
                      "example": null
                    },
                    "unitsAbbr": {
                      "example": null
                    },
                    "siteId": {
                      "example": null
                    },
                    "siteName": {
                      "type": "string",
                      "example": ""
                    },
                    "tableSelector": {
                      "example": null
                    },
                    "modelId": {
                      "example": null
                    },
                    "paramType": {
                      "type": "string",
                      "example": ""
                    },
                    "duration": {
                      "type": "string",
                      "example": ""
                    },
                    "version": {
                      "type": "string",
                      "example": ""
                    },
                    "ifMissing": {
                      "example": null
                    }
                  }
                }
              },
              "props": {
                "type": "object",
                "example": {}
              },
              "groupId": {
                "type": "integer",
                "example": 1
              },
              "groupName": {
                "type": "string",
                "example": "MROI4-ROWI4-HG"
              }
            }
          },
          "tsid": {
            "$ref": "#/components/schemas/OpenDCSComputationTimeseriesEntry"
          },
          "since": {
            "type": "string",
            "example": "2000-12-19T20:15:00.000Z[UTC]"
          },
          "until": {
            "type": "string",
            "example": "2022-12-19T20:15:00.000Z[UTC]"
          },
          "traceOutput": {
            "type": "boolean",
            "example": true
          }
        },
        "example": {
          "computation": {
            "computationId": 5,
            "name": "MROI4-ROWI4-Stage-Copy",
            "comment": "",
            "appId": 5,
            "applicationName": null,
            "lastModified": 1654538252952,
            "enabled": false,
            "effectiveStartType": "No Limit",
            "effectiveStartDate": null,
            "effectiveStartInterval": null,
            "effectiveEndType": "No Limit",
            "effectiveEndDate": null,
            "effectiveEndInterval": null,
            "algorithmId": 26,
            "algorithmName": "CopyAlgorithm",
            "parmList": [
              {
                "algoParmType": "i",
                "algoRoleName": "input",
                "tsKey": null,
                "dataTypeId": null,
                "dataType": "",
                "interval": "",
                "deltaT": 0,
                "deltaTUnits": null,
                "unitsAbbr": null,
                "siteId": null,
                "siteName": "",
                "tableSelector": null,
                "modelId": null,
                "paramType": "",
                "duration": "",
                "version": "",
                "ifMissing": null
              },
              {
                "algoParmType": "o",
                "algoRoleName": "output",
                "tsKey": null,
                "dataTypeId": null,
                "dataType": "",
                "interval": "",
                "deltaT": 0,
                "deltaTUnits": null,
                "unitsAbbr": null,
                "siteId": null,
                "siteName": "",
                "tableSelector": null,
                "modelId": null,
                "paramType": "",
                "duration": "",
                "version": "rev",
                "ifMissing": null
              }
            ],
            "props": {},
            "groupId": 1,
            "groupName": "MROI4-ROWI4-HG"
          },
          "tsid": {
            "uniqueString": "ROWI4.Stage.Inst.15Minutes.0.raw",
            "key": 8,
            "description": "ROWI4 - Stage (created by DECODES)",
            "storageUnits": "ft"
          },
          "since": "2000-12-19T20:15:00.000Z[UTC]",
          "until": "2022-12-19T20:15:00.000Z[UTC]",
          "traceOutput": true
        }
      },
      "OpenDCSCompTestResponse": {
        "type": "object",
        "properties": {
          "compParmData": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "algoRoleName": {
                  "type": "string",
                  "example": "input"
                },
                "parmData": {
                  "type": "object",
                  "properties": {
                    "tsid": {
                      "$ref": "#/components/schemas/OpenDCSComputationTimeseriesEntry"
                    }
                  }
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sampleTime": {
                        "type": "string",
                        "example": "2010-12-19T20:15:00.000Z[UTC]"
                      },
                      "value": {
                        "type": "number",
                        "example": 4.46
                      },
                      "flags": {
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "logMessages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "example": "2022-08-31T18:36:06.229Z[UTC]"
                },
                "priority": {
                  "type": "string",
                  "example": "DBG3"
                },
                "text": {
                  "type": "string",
                  "example": "DBG1    08/31/22 18:36:06 ComputationDaoWrapper Setting manual connection for algorithmDAO"
                }
              }
            }
          }
        },
        "example": {
          "compParmData": [
            {
              "algoRoleName": "input",
              "parmData": {
                "tsid": {
                  "uniqueString": "ROWI4.Stage.Inst.15Minutes.0.raw",
                  "key": 8,
                  "description": "Stage @ ROWI4",
                  "storageUnits": "ft"
                },
                "values": [
                  {
                    "sampleTime": "2010-12-19T20:15:00.000Z[UTC]",
                    "value": 4.46,
                    "flags": 1
                  },
                  {
                    "sampleTime": "2010-12-19T20:30:00.000Z[UTC]",
                    "value": 4.47,
                    "flags": 1
                  }
                ]
              }
            },
            {
              "algoRoleName": "output",
              "parmData": {
                "tsid": {
                  "uniqueString": "ROWI4.Stage.Inst.15Minutes.0.rev",
                  "key": 68,
                  "description": null,
                  "storageUnits": "ft"
                },
                "values": [
                  {
                    "sampleTime": "2010-12-19T20:15:00.000Z[UTC]",
                    "value": 4.46,
                    "flags": 268435460
                  },
                  {
                    "sampleTime": "2010-12-19T20:30:00.000Z[UTC]",
                    "value": 4.47,
                    "flags": 268435460
                  }
                ]
              }
            }
          ],
          "logMessages": [
            {
              "timeStamp": "2022-08-31T18:36:06.229Z[UTC]",
              "priority": "DBG1   ",
              "text": "DBG1    08/31/22 18:36:06 ComputationDaoWrapper Setting manual connection for algorithmDAO"
            },
            {
              "timeStamp": "2022-08-31T18:36:06.229Z[UTC]",
              "priority": "DBG3   ",
              "text": "DBG3    08/31/22 18:36:06 OpenTimeSeriesDAO Query1 'SELECT TS_ID, SITE_ID, DATATYPE_ID, STATISTICS_CODE, INTERVAL_ID, DURATION_ID, TS_VERSION, ACTIVE_FLAG, STORAGE_UNITS, STORAGE_TABLE, STORAGE_TYPE, MODIFY_TIME, DESCRIPTION, UTC_OFFSET, ALLOW_DST_OFFSET_VARIATION, OFFSET_ERROR_ACTION from TS_SPEC'"
            }
          ]
        }
      },
      "PropertySpecObject": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": null
          },
          "dynamic": {
            "type": "boolean",
            "example": false
          },
          "name": {
            "type": "string",
            "example": "pollPriority"
          },
          "type": {
            "type": "string",
            "example": "i"
          }
        },
        "example": {
          "description": "(default=3) For polled stations, this determines the order in which they will be polled (1 = highest priority = polled first)",
          "dynamic": false,
          "name": "pollPriority",
          "type": "i"
        }
      },
      "SearchCriteria": {
        "type": "object",
        "properties": {
          "since": {
            "type": "string",
            "example": "now - 1 hour"
          },
          "until": {
            "type": "string",
            "example": "now"
          },
          "settlingTimeDelay": {
            "type": "boolean",
            "example": false
          },
          "platofrmIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "platformNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "BMD-NRE",
              "BFD",
              "OKVI4",
              "BMD-tailwater"
            ]
          },
          "netlistNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "goesChannels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "goesSelfTimed": {
            "type": "boolean",
            "example": false
          },
          "goesRandom": {
            "type": "boolean",
            "example": false
          },
          "networkDCP": {
            "type": "boolean",
            "example": false
          },
          "iridium": {
            "type": "boolean",
            "example": false
          },
          "quality:Notifications": {
            "type": "boolean",
            "example": false
          },
          "goesSpacecraftCheck": {
            "type": "boolean",
            "example": false
          },
          "goesSpacecraftSelection": {
            "type": "string",
            "example": "East"
          },
          "parityCheck": {
            "type": "boolean",
            "example": false
          },
          "paritySelection": {
            "type": "string",
            "example": "Good"
          }
        },
        "example": {
          "since": "now - 1 hour",
          "until": "now",
          "settlingTimeDelay": false,
          "platformIds": [],
          "platformNames": [
            "BMD-NRE",
            "BFD",
            "OKVI4",
            "BMD-tailwater"
          ],
          "netlistNames": [],
          "goesChannels": [],
          "goesSelfTimed": false,
          "goesRandom": false,
          "networkDCP": false,
          "iridium": false,
          "qualityNotifications": false,
          "goesSpacecraftCheck": false,
          "goesSpacecraftSelection": "East",
          "parityCheck": false,
          "paritySelection": "Good"
        }
      },
      "LRGSStatus": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "example": "covesw4"
          },
          "systemStatus": {
            "type": "string",
            "example": "Running"
          },
          "isUsable": {
            "type": "boolean",
            "example": true
          },
          "systemTime": {
            "type": "string",
            "example": "2023-05-15T18:38:22.000Z[UTC]"
          },
          "maxClients": {
            "type": "integer",
            "example": 150
          },
          "currentNumClients": {
            "type": "integer",
            "example": 4
          },
          "lrgsVersion": {
            "type": "string",
            "example": "9.5.OpenDCS-6.8 RC12 (Jul 27, 2021)"
          },
          "arcDirOldest": {
            "type": "integer",
            "example": 0
          },
          "arcDirNext": {
            "type": "integer",
            "example": 846181
          },
          "arcDirWrap": {
            "type": "integer",
            "example": 0
          },
          "arcDirSize": {
            "type": "integer",
            "example": 7385773
          },
          "arcOldestOffset": {
            "type": "integer",
            "example": 0
          },
          "arcOldestMsgTime": {
            "type": "string",
            "example": "2023-05-09T00:00:02.000Z[UTC"
          },
          "arcLastSeqNum": {
            "type": "integer",
            "example": 60546
          },
          "procStatis": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "slot": {
                  "type": "integer",
                  "example": 0
                },
                "pid": {
                  "type": "integer",
                  "example": 893924
                },
                "name": {
                  "type": "string",
                  "example": "-"
                },
                "type": {
                  "type": "string",
                  "example": "DDS-CLI"
                },
                "user": {
                  "type": "string",
                  "example": "covetest"
                },
                "status": {
                  "type": "string",
                  "example": "running"
                },
                "lastSeqNum": {
                  "type": "integer",
                  "example": 0
                },
                "lastPollTime": {
                  "type": "string",
                  "example": "1970-01-20T11:49:35.880Z[UTC]"
                },
                "lastMsgTime": {
                  "type": "string",
                  "example": "1970-01-01T00:00:00.000Z[UTC]"
                },
                "staleCount": {
                  "type": "integer",
                  "example": 0
                }
              }
            }
          },
          "downlinkStatus": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "slot": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "DDS-Recv:Main"
                },
                "type": {
                  "type": "string",
                  "example": "DL_DDS"
                },
                "status": {
                  "type": "string",
                  "example": "Active"
                },
                "lastMsgRecvTime": {
                  "type": "string",
                  "example": "2023-05-15T18:38:20.000Z[UTC]"
                },
                "group": {
                  "type": "string",
                  "example": ""
                },
                "lastSeqNum": {
                  "type": "integer",
                  "example": 0
                },
                "hourlyQuality": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "hour": {
                        "type": "integer",
                        "example": 0
                      },
                      "numGood": {
                        "type": "integer",
                        "example": 47704
                      },
                      "numBad": {
                        "type": "integer",
                        "example": 207
                      },
                      "numRecovered": {
                        "type": "integer",
                        "example": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "hourlyArchiveQuality": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "hour": {
                  "type": "integer",
                  "example": 0
                },
                "numGood": {
                  "type": "integer",
                  "example": 47704
                },
                "numBad": {
                  "type": "integer",
                  "example": 207
                },
                "numRecovered": {
                  "type": "integer",
                  "example": 0
                }
              }
            }
          }
        },
        "example": {
          "hostname": "covesw4",
          "systemStatus": "Running",
          "isUsable": true,
          "systemTime": "2023-05-15T18:38:22.000Z[UTC]",
          "maxClients": 150,
          "currentNumClients": 4,
          "lrgsVersion": "9.5.OpenDCS-6.8 RC12 (Jul 27, 2021)",
          "arcDirOldest": 0,
          "arcDirNext": 846181,
          "arcDirWrap": 0,
          "arcDirSize": 7385773,
          "arcOldestOffset": 0,
          "arcOldestMsgTime": "2023-05-09T00:00:02.000Z[UTC]",
          "arcLastSeqNum": 60546,
          "procStatus": [
            {
              "slot": 0,
              "pid": 893924,
              "name": "-",
              "type": "DDS-CLI",
              "user": "covetest",
              "status": "running",
              "lastSeqNum": 0,
              "lastPollTime": "1970-01-20T11:49:35.880Z[UTC]",
              "lastMsgTime": "1970-01-01T00:00:00.000Z[UTC]",
              "staleCount": 0
            }
          ],
          "downlinkStatus": [
            {
              "slot": 1,
              "name": "DDS-Recv:Main",
              "type": "DL_DDS",
              "status": "Active",
              "lastMsgRecvTime": "2023-05-15T18:38:20.000Z[UTC]",
              "group": "",
              "lastSeqNum": 0,
              "hourlyQuality": [
                {
                  "hour": 0,
                  "numGood": 47704,
                  "numBad": 207,
                  "numRecovered": 0
                },
                {
                  "hour": 1,
                  "numGood": 47543,
                  "numBad": 205,
                  "numRecovered": 0
                }
              ]
            }
          ],
          "hourlyArchiveQuality": [
            {
              "hour": 0,
              "numGood": 44123,
              "numBad": 170,
              "numRecovered": 0
            },
            {
              "hour": 1,
              "numGood": 44016,
              "numBad": 141,
              "numRecovered": 0
            }
          ]
        }
      },
      "TestDecodesRequest": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "properties": {
              "configId": {
                "type": "integer",
                "example": 2
              },
              "confiSensors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "absoluteMax": {
                      "type": "number",
                      "example": 30
                    },
                    "absoluteMin": {
                      "type": "number",
                      "example": 0.00999999977648258
                    },
                    "dataType": {
                      "type": "object",
                      "properties": {
                        "SHEF-PE": {
                          "type": "string",
                          "example": "HG"
                        },
                        "CWMS": {
                          "type": "string",
                          "example": "Stage"
                        }
                      }
                    },
                    "properties": {
                      "type": "object",
                      "example": {}
                    },
                    "recordingInvterval": {
                      "type": "integer",
                      "example": 900
                    },
                    "recordingMode": {
                      "type": "string",
                      "example": "F"
                    },
                    "sensorName": {
                      "type": "string",
                      "example": "Stage"
                    },
                    "sensorNumber": {
                      "type": "integer",
                      "example": 1
                    },
                    "timeOffFirstSample": {
                      "type": "integer",
                      "example": 0
                    }
                  }
                }
              },
              "description": {
                "type": "string",
                "example": ""
              },
              "name": {
                "type": "string",
                "example": "ROWI4"
              },
              "numPlatforms": {
                "type": "integer",
                "example": 0
              },
              "scripts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "dataOrder": {
                      "type": "string",
                      "example": "U"
                    },
                    "formatStatements": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "format": {
                            "type": "string",
                            "example": "4x,8(f(s,b,3,1),f(s,b,3,2)),24x,f(s,b,1,3)"
                          },
                          "label": {
                            "type": "string",
                            "example": "st"
                          },
                          "sequenceNum": {
                            "type": "integer",
                            "example": 0
                          }
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "example": "ST"
                    },
                    "scriptSensors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "sensorNumber": {
                            "type": "integer",
                            "example": 1
                          },
                          "unitConverter": {
                            "type": "object",
                            "properties": {
                              "a": {
                                "type": "number",
                                "example": 0.01
                              },
                              "algorithm": {
                                "type": "string",
                                "example": "usgs-standard"
                              },
                              "b": {
                                "type": "number",
                                "example": 0.01
                              },
                              "c": {
                                "type": "number",
                                "example": 0.01
                              },
                              "d": {
                                "type": "number",
                                "example": 0.01
                              },
                              "e": {
                                "type": "number",
                                "example": 0.01
                              },
                              "f": {
                                "type": "number",
                                "example": 0.01
                              },
                              "fromAbbr": {
                                "type": "string",
                                "example": "raw"
                              },
                              "toAbbr": {
                                "type": "string",
                                "example": "ft"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rawmsg": {
            "type": "object",
            "properties": {
              "base64": {
                "type": "string",
                "example": "Q0UyREQ2MzIyMjE5MjE0MDYyM0c0Ni0xTk4wNDlFTjIwMDA3OCJCU1RARnZAVX1ARm5ARnhAVX1ARm5ARnhAVX1ARm5ARnhAVX1ARm5ARndAVX1ARm5ARnZAVX1ARm5ARnhAVX1ARm5ARnhAVX1ARm9nIA=="
              }
            }
          }
        },
        "example": {
          "config": {
            "configId": 2,
            "configSensors": [
              {
                "absoluteMax": 30,
                "absoluteMin": 0.009999999776482582,
                "dataTypes": {
                  "SHEF-PE": "HG",
                  "CWMS": "Stage"
                },
                "properties": {},
                "recordingInterval": 900,
                "recordingMode": "F",
                "sensorName": "Stage",
                "sensorNumber": 1,
                "timeOfFirstSample": 0
              },
              {
                "absoluteMax": 251,
                "absoluteMin": -0.10000000149011612,
                "dataTypes": {
                  "SHEF-PE": "PC",
                  "CWMS": "Precip"
                },
                "properties": {},
                "recordingInterval": 900,
                "recordingMode": "F",
                "sensorName": "Precip",
                "sensorNumber": 2,
                "timeOfFirstSample": 0
              },
              {
                "dataTypes": {
                  "SHEF-PE": "VB",
                  "CWMS": "Volt-Battery"
                },
                "properties": {},
                "recordingInterval": 3600,
                "recordingMode": "F",
                "sensorName": "Battery",
                "sensorNumber": 3,
                "timeOfFirstSample": 0
              }
            ],
            "description": "",
            "name": "ROWI4",
            "numPlatforms": 0,
            "scripts": [
              {
                "dataOrder": "U",
                "headerType": "decodes:goes",
                "formatStatements": [
                  {
                    "format": "4x,8(f(s,b,3,1),f(s,b,3,2)),24x,f(s,b,1,3)",
                    "label": "st",
                    "sequenceNum": 0
                  }
                ],
                "name": "ST",
                "scriptSensors": [
                  {
                    "sensorNumber": 1,
                    "unitConverter": {
                      "a": 0.01,
                      "algorithm": "usgs-standard",
                      "b": 0,
                      "c": 1,
                      "d": 0,
                      "e": 0,
                      "f": 0,
                      "fromAbbr": "raw",
                      "toAbbr": "ft"
                    }
                  },
                  {
                    "sensorNumber": 2,
                    "unitConverter": {
                      "a": 0.01,
                      "algorithm": "usgs-standard",
                      "b": 0,
                      "c": 1,
                      "d": 0,
                      "e": 0,
                      "f": 0,
                      "fromAbbr": "raw",
                      "toAbbr": "in"
                    }
                  },
                  {
                    "sensorNumber": 3,
                    "unitConverter": {
                      "a": 0.3125,
                      "algorithm": "usgs-standard",
                      "b": 0,
                      "c": 1,
                      "d": 0.311,
                      "e": 0,
                      "f": 0,
                      "fromAbbr": "raw",
                      "toAbbr": "v"
                    }
                  }
                ]
              }
            ]
          },
          "rawmsg": {
            "base64": "Q0UyREQ2MzIyMjE5MjE0MDYyM0c0Ni0xTk4wNDlFTjIwMDA3OCJCU1RARnZAVX1ARm5ARnhAVX1ARm5ARnhAVX1ARm5ARnhAVX1ARm5ARndAVX1ARm5ARnZAVX1ARm5ARnhAVX1ARm5ARnhAVX1ARm9nIA=="
          }
        }
      },
      "TestDecodesResponse": {
        "type": "object",
        "properties": {
          "logMessages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "priority": {
                  "type": "string",
                  "example": "INFO"
                },
                "text": {
                  "type": "string",
                  "example": "Header type 'GOES' length=37"
                },
                "timeStamp": {
                  "type": "string",
                  "example": "2022-07-14T17:14:27.332Z[UTC]"
                }
              }
            }
          }
        },
        "example": {
          "logMessages": [
            {
              "priority": "INFO   ",
              "text": "Header type 'GOES' length=37",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:ModulationIndex=N",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:Length=78",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:Quality=N",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:Channel=49",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:FrequencyOffset=-1",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:Spacecraft=E",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:FailureCode=G",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:Time=07/11/2022 14:06:23 UTC",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:GPS=1",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:UplinkCarrier=N2",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:DcpAddress=CE2DD632",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "INFO   ",
              "text": "  PM:SignalStrength=46",
              "timeStamp": "2022-07-14T17:14:27.332Z[UTC]"
            },
            {
              "priority": "DBG1   ",
              "text": "After decoding there are 17 decoded samples.",
              "timeStamp": "2022-07-14T17:14:27.349Z[UTC]"
            }
          ],
          "messageTime": "2022-07-11T14:06:23Z[UTC]",
          "timeSeries": [
            {
              "sensorName": "Stage",
              "sensorNum": 1,
              "units": "ft",
              "values": [
                {
                  "rawDataPosition": {
                    "end": 7,
                    "start": 4
                  },
                  "time": "2022-07-11T14:00:00Z[UTC]",
                  "value": "4.38"
                },
                {
                  "rawDataPosition": {
                    "end": 13,
                    "start": 10
                  },
                  "time": "2022-07-11T13:45:00Z[UTC]",
                  "value": "4.3"
                },
                {
                  "rawDataPosition": {
                    "end": 19,
                    "start": 16
                  },
                  "time": "2022-07-11T13:30:00Z[UTC]",
                  "value": "14.05"
                },
                {
                  "rawDataPosition": {
                    "end": 25,
                    "start": 22
                  },
                  "time": "2022-07-11T13:15:00Z[UTC]",
                  "value": "4.4"
                },
                {
                  "rawDataPosition": {
                    "end": 31,
                    "start": 28
                  },
                  "time": "2022-07-11T13:00:00Z[UTC]",
                  "value": "4.3"
                },
                {
                  "rawDataPosition": {
                    "end": 37,
                    "start": 34
                  },
                  "time": "2022-07-11T12:45:00Z[UTC]",
                  "value": "14.05"
                },
                {
                  "rawDataPosition": {
                    "end": 43,
                    "start": 40
                  },
                  "time": "2022-07-11T12:30:00Z[UTC]",
                  "value": "4.39"
                },
                {
                  "rawDataPosition": {
                    "end": 49,
                    "start": 46
                  },
                  "time": "2022-07-11T12:15:00Z[UTC]",
                  "value": "4.3"
                }
              ]
            },
            {
              "sensorName": "Precip",
              "sensorNum": 2,
              "units": "in",
              "values": [
                {
                  "rawDataPosition": {
                    "end": 10,
                    "start": 7
                  },
                  "time": "2022-07-11T14:00:00Z[UTC]",
                  "value": "14.05"
                },
                {
                  "rawDataPosition": {
                    "end": 16,
                    "start": 13
                  },
                  "time": "2022-07-11T13:45:00Z[UTC]",
                  "value": "4.4"
                },
                {
                  "rawDataPosition": {
                    "end": 22,
                    "start": 19
                  },
                  "time": "2022-07-11T13:30:00Z[UTC]",
                  "value": "4.3"
                },
                {
                  "rawDataPosition": {
                    "end": 28,
                    "start": 25
                  },
                  "time": "2022-07-11T13:15:00Z[UTC]",
                  "value": "14.05"
                },
                {
                  "rawDataPosition": {
                    "end": 34,
                    "start": 31
                  },
                  "time": "2022-07-11T13:00:00Z[UTC]",
                  "value": "4.4"
                },
                {
                  "rawDataPosition": {
                    "end": 40,
                    "start": 37
                  },
                  "time": "2022-07-11T12:45:00Z[UTC]",
                  "value": "4.3"
                },
                {
                  "rawDataPosition": {
                    "end": 46,
                    "start": 43
                  },
                  "time": "2022-07-11T12:30:00Z[UTC]",
                  "value": "14.05"
                },
                {
                  "rawDataPosition": {
                    "end": 52,
                    "start": 49
                  },
                  "time": "2022-07-11T12:15:00Z[UTC]",
                  "value": "4.38"
                }
              ]
            },
            {
              "sensorName": "Battery",
              "sensorNum": 3,
              "units": "V",
              "values": [
                {
                  "rawDataPosition": {
                    "end": 77,
                    "start": 76
                  },
                  "time": "2022-07-11T14:00:00Z[UTC]",
                  "value": "12.4985"
                }
              ]
            }
          ]
        }
      },
      "TsRefsEntry": {
        "type": "object",
        "properties": {
          "uniqueString": {
            "type": "string",
            "example": "OKVI4.Stage.Inst.15Minutes.0.raw"
          },
          "key": {
            "type": "integer",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": null
          },
          "sotargeUnits": {
            "type": "string",
            "example": "ft"
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        },
        "example": {
          "uniqueString": "OKVI4.Stage.Inst.15Minutes.0.raw",
          "key": 1,
          "description": null,
          "storageUnits": "ft",
          "active": true
        }
      },
      "TsVal": {
        "type": "object",
        "properties": {
          "sampleTime": {
            "type": "string",
            "example": "2010-12-20T14:00:00.000Z[UTC]"
          },
          "value": {
            "type": "number",
            "example": 14.07
          },
          "flags": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "TsSpec": {
        "type": "object",
        "properties": {
          "tsid": {
            "$ref": "#/components/schemas/TsRefsEntry"
          },
          "location": {
            "type": "string",
            "example": "MROI4"
          },
          "param": {
            "type": "string",
            "example": "Stage"
          },
          "statCode": {
            "type": "string",
            "example": "Inst"
          },
          "interval": {
            "type": "string",
            "example": "30Minutes"
          },
          "duration": {
            "type": "integer",
            "example": 0
          },
          "version": {
            "type": "string",
            "example": "raw"
          },
          "siteId": {
            "type": "integer",
            "example": 6
          },
          "datatypeId": {
            "type": "integer",
            "example": 48
          },
          "intervalId": {
            "type": "integer",
            "example": 12
          },
          "durationId": {
            "type": "integer",
            "example": 36
          },
          "lastModified": {
            "type": "string",
            "example": "2020-05-11T20:50:55.795Z[UTC]"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "allowDSTVariation": {
            "type": "boolean",
            "example": false
          },
          "utcOffset": {
            "type": "integer",
            "example": 0
          },
          "offsetErrorAction": {
            "type": "string",
            "example": "IGNORE"
          },
          "storageType": {
            "type": "string",
            "example": "N"
          },
          "storageTable": {
            "type": "integer",
            "example": 2
          },
          "numValues": {
            "type": "integer",
            "example": 144
          },
          "min": {
            "$ref": "#/components/schemas/TsVal"
          },
          "max": {
            "$ref": "#/components/schemas/TsVal"
          },
          "oldest": {
            "$ref": "#/components/schemas/TsVal"
          },
          "newest": {
            "$ref": "#/components/schemas/TsVal"
          }
        },
        "example": {
          "tsid": {
            "uniqueString": "MROI4.Stage.Inst.30Minutes.0.raw",
            "key": 11,
            "description": "MROI4 - Stage (created by DECODES)",
            "storageUnits": "ft",
            "active": true
          },
          "location": "MROI4",
          "param": "Stage",
          "statCode": "Inst",
          "interval": "30Minutes",
          "duration": "0",
          "version": "raw",
          "siteId": 6,
          "datatypeId": 48,
          "intervalId": 12,
          "durationId": 36,
          "lastModified": "2020-05-11T20:50:55.795Z[UTC]",
          "active": true,
          "allowDSTVariation": false,
          "utcOffset": 0,
          "offsetErrorAction": "IGNORE",
          "storageType": "N",
          "storageTable": 2,
          "numValues": 144,
          "min": {
            "sampleTime": "2010-12-22T20:00:00.000Z[UTC]",
            "value": 8.18,
            "flags": 0
          },
          "max": {
            "sampleTime": "2010-12-20T14:00:00.000Z[UTC]",
            "value": 14.07,
            "flags": 0
          },
          "oldest": {
            "sampleTime": "2010-12-19T20:30:00.000Z[UTC]",
            "value": 8.43,
            "flags": 0
          },
          "newest": {
            "sampleTime": "2010-12-22T20:00:00.000Z[UTC]",
            "value": 8.18,
            "flags": 0
          }
        }
      },
      "TsData": {
        "type": "object",
        "properties": {
          "tsid": {
            "$ref": "#/components/schemas/TsRefsEntry"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TsVal"
            }
          }
        },
        "example": {
          "tsid": {
            "uniqueString": "MROI4.Precip.Inst.30Minutes.0.raw",
            "key": 12,
            "description": "MROI4 - Precip (created by DECODES)",
            "storageUnits": "in",
            "active": true
          },
          "values": [
            {
              "sampleTime": "2010-12-19T20:30:00.000Z[UTC]",
              "value": 11,
              "flags": 0
            },
            {
              "sampleTime": "2010-12-19T21:00:00.000Z[UTC]",
              "value": 11,
              "flags": 0
            },
            {
              "sampleTime": "2010-12-19T21:30:00.000Z[UTC]",
              "value": 11,
              "flags": 0
            }
          ]
        }
      },
      "IntervalEntry": {
        "type": "object",
        "properties": {
          "intervalId": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "irregular"
          },
          "calConstant": {
            "type": "string",
            "example": "minute"
          },
          "calMultilier": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "IntervalList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "intervalId": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "irregular"
            },
            "calConstant": {
              "type": "string",
              "example": "minute"
            },
            "calMultilier": {
              "type": "integer",
              "example": 0
            }
          }
        },
        "example": [
          {
            "intervalId": 1,
            "name": "irregular",
            "calConstant": "minute",
            "calMultilier": 0
          },
          {
            "intervalId": 2,
            "name": "2Minutes",
            "calConstant": "minute",
            "calMultilier": 2
          }
        ]
      },
      "AppStatEntry": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer",
            "example": 1
          },
          "appName": {
            "type": "string",
            "example": "decodes"
          },
          "appType": {
            "type": "string",
            "example": "computationprocess"
          },
          "hostname": {
            "type": "string",
            "example": null
          },
          "pid": {
            "type": "integer",
            "example": 12176
          },
          "heartbeat": {
            "type": "string",
            "example": "2023-05-25-T16:34:18.073z[UTC]"
          },
          "eventPort": {
            "type": "integer",
            "example": null
          },
          "status": {
            "type": "string",
            "example": "Cmps: 0/0"
          }
        }
      },
      "AppEventEntry": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer",
            "example": 4
          },
          "appName": {
            "type": "string",
            "example": "compproc"
          },
          "priority": {
            "type": "string",
            "example": "DBG1"
          },
          "eventTime": {
            "type": "string",
            "example": "2023-05-25-T17:26:15.000z[UTC]"
          },
          "eventText": {
            "type": "string",
            "example": "OpenTimeSeriesDAO No new data for appId=4"
          }
        }
      },
      "RoutingStatusEntry": {
        "type": "object",
        "properties": {
          "routingspecId": {
            "type": "integer",
            "example": 44
          },
          "name": {
            "type": "string",
            "example": "rs-MROI4-ROWI4"
          },
          "scheduleEntryId": {
            "type": "integer",
            "example": 43
          },
          "appId": {
            "type": "integer",
            "example": 26
          },
          "appName": {
            "type": "string",
            "example": "RoutingScheduler"
          },
          "runInterval": {
            "type": "string",
            "example": "5 minute"
          },
          "lastActivity": {
            "type": "string",
            "example": "2023-05-31T18:56:54.354[UTC]"
          },
          "lastMsgTime": {
            "type": "string",
            "example": "2023-05-31T18:56:54.354[UTC]"
          },
          "numMessages": {
            "type": "integer",
            "example": 3362
          },
          "numErrors": {
            "type": "integer",
            "example": 3362
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "manual": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "RoutingExecEntry": {
        "type": "object",
        "properties": {
          "routingExecId": {
            "type": "integer",
            "example": 565
          },
          "scheduleEntryId": {
            "type": "integer",
            "example": 38
          },
          "routingSpecId": {
            "type": "integer",
            "example": 63
          },
          "runStart": {
            "type": "string",
            "example": "2023-06-01T17:10:00.841Z[UTC]"
          },
          "runStop": {
            "type": "string",
            "example": "2023-06-01T17:10:00.855Z[UTC]"
          },
          "numMessages": {
            "type": "integer",
            "example": 0
          },
          "numErrors": {
            "type": "integer",
            "example": 0
          },
          "numPlatforms": {
            "type": "integer",
            "example": 0
          },
          "lastMsgTime": {
            "type": "string",
            "example": null
          },
          "lastActivity": {
            "type": "string",
            "example": "2023-06-01T17:10:00.855Z[UTC]"
          },
          "runStatus": {
            "type": "string",
            "example": "ERR-OutputInit"
          },
          "hostname": {
            "type": "string",
            "example": "mmaloney3.local"
          },
          "lastInput": {
            "type": "string",
            "example": null
          },
          "lastOutput": {
            "type": "string",
            "example": null
          }
        }
      },
      "DacqEventsEntry": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "example": 181646
          },
          "routingExecId": {
            "type": "integer",
            "example": 607
          },
          "platformId": {
            "type": "integer",
            "example": null
          },
          "eventTime": {
            "type": "string",
            "example": "2023-06-08T19:21:15.255Z[UTC]"
          },
          "priority": {
            "type": "string",
            "example": "INFO"
          },
          "appId": {
            "type": "integer",
            "example": 26
          },
          "appName": {
            "type": "string",
            "example": "RoutingScheduler"
          },
          "subsystem": {
            "type": "string",
            "example": null
          },
          "msgRecvTime": {
            "type": "string",
            "example": null
          },
          "eventText": {
            "type": "string",
            "example": "RoutingSpec(test) Connected to DDS server at www.covesw.com:-1"
          }
        }
      },
      "PlatformStatEntry": {
        "type": "object",
        "properties": {
          "platformId": {
            "type": "integer",
            "example": 53
          },
          "platformName": {
            "type": "string",
            "example": "OKVI4"
          },
          "siteId": {
            "type": "integer",
            "example": 1
          },
          "lastContact": {
            "type": "string",
            "example": "2023-06-09T18:30:53.086Z[UTC]",
            "description": "the last time that any communication from this platform was received"
          },
          "lastMessage": {
            "type": "string",
            "example": "2023-06-09T18:30:53.086Z[UTC]",
            "description": "the time stamp that the last message from this platform was received"
          },
          "lastError": {
            "type": "string",
            "example": null,
            "description": "the time that a decoding or communications error last occurred with this platform"
          },
          "lastMsgQuality": {
            "type": "string",
            "example": "G"
          },
          "annotation": {
            "type": "string",
            "example": null,
            "description": "is the text of the last error message generated from this platform. To retrieve a list of Data Acquisition events for a platform, you can use the GET dacqevent method described in section 5.2.3, passing the 'platformid' argument."
          },
          "lastRoutingExecId": {
            "type": "integer",
            "example": 609,
            "description": "indicates the specific execution of a routing spec that was last used to process this platform"
          },
          "routingSpecName": {
            "type": "string",
            "example": "periodic-10-minute"
          }
        }
      },
      "TimeseriesGroupRefsEntry": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "example": 1
          },
          "groupName": {
            "type": "string",
            "example": "topgroup"
          },
          "groupType": {
            "type": "string",
            "example": "data type"
          },
          "description": {
            "type": "string",
            "example": "testing for OPENDCS-15 issue"
          }
        }
      },
      "GroupTimeseriesIdentifiers": {
        "type": "object",
        "properties": {
          "uniqueString": {
            "type": "string",
            "example": "OKVI4.Stage.Inst.15Minutes.0.raw"
          },
          "key": {
            "type": "integer",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": ""
          },
          "storageUnits": {
            "type": "string",
            "example": "ft"
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "TimeseriesGroupEntry": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "example": 9
          },
          "groupName": {
            "type": "string",
            "example": "junk"
          },
          "groupType": {
            "type": "string",
            "example": "basin"
          },
          "description": {
            "type": "string",
            "example": ""
          },
          "tsIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupTimeseriesIdentifiers"
            }
          },
          "includeGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeseriesGroupRefsEntry"
            }
          },
          "excludeGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeseriesGroupRefsEntry"
            }
          },
          "intersectGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeseriesGroupRefsEntry"
            }
          },
          "groupAttrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "BaseLocation=TESTSITE2",
              "BaseParam=ELEV",
              "BaseVersion=DCP",
              "Duration=0",
              "Interval=1Hour",
              "ParamType=Inst",
              "SubLocation=Spillway2-Gate1",
              "SubParam=PZ1B",
              "SubVersion=Raw",
              "Version=DCP-Raw"
            ]
          },
          "groupSites": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "siteId": {
                  "type": "integer",
                  "example": 2
                },
                "sitenames": {
                  "type": "object",
                  "properties": {
                    "CWMS": {
                      "type": "string",
                      "example": "ROWI4"
                    },
                    "USGS": {
                      "type": "string",
                      "example": 5449500
                    }
                  }
                },
                "publicName": {
                  "type": "string",
                  "example": "IOWA RIVER NEAR ROWAN"
                },
                "description": {
                  "type": "string",
                  "example": "IOWA RIVER NEAR ROWAN 4NW"
                }
              }
            }
          },
          "groupDataTypes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 224
                },
                "standard": {
                  "type": "string",
                  "example": "CWMS"
                },
                "code": {
                  "type": "string",
                  "example": "ELEV-PZ2A"
                },
                "displayName": {
                  "type": "string",
                  "example": "CWMS:ELEV-PZ2A"
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "POST_BASIC_RefListObject": {
        "value": {
          "reflistId": 3,
          "enumName": "",
          "items": {
            "standard": {
              "value": "",
              "description": "",
              "execClassName": "",
              "editClassName": null,
              "sortNumber": 3
            }
          },
          "defaultValue": null,
          "description": null
        }
      },
      "POST_NEW_RefListObject": {
        "value": {
          "enumName": "ScriptType",
          "items": {
            "standard": {
              "value": "standard",
              "description": "DECODES Format Statements and Unit Conversions",
              "execClassName": "DecodesScript",
              "editClassName": null,
              "sortNumber": 3
            }
          },
          "defaultValue": null,
          "description": null
        }
      },
      "POST_UPDATE_RefListObject": {
        "value": {
          "reflistId": 3,
          "enumName": "ScriptType",
          "items": {
            "standard": {
              "value": "standard",
              "description": "DECODES Format Statements and Unit Conversions",
              "execClassName": "DecodesScript",
              "editClassName": null,
              "sortNumber": 3
            },
            "nos": {
              "value": "nos",
              "description": "Hard-coded NOS data parser",
              "execClassName": "NOSMessageParser",
              "editClassName": null,
              "sortNumber": 2
            },
            "ndbc": {
              "value": "ndbc",
              "description": "National Data Buoy Center Context-Sensitive Parser",
              "execClassName": "NDBCMessageParser",
              "editClassName": null,
              "sortNumber": 1
            }
          },
          "defaultValue": null,
          "description": null
        }
      },
      "POST_BASIC_NetList": {
        "value": {
          "items": {
            "": {
              "description": "",
              "platformName": "",
              "transportId": ""
            }
          },
          "lastModifyTime": "",
          "name": "",
          "netlistId": 4,
          "siteNameTypePref": "",
          "transportMediumType": ""
        }
      },
      "POST_NEW_NetList": {
        "value": {
          "items": {
            "14159500": {
              "description": "",
              "platformName": "CGRO",
              "transportId": "14159500"
            }
          },
          "lastModifyTime": null,
          "name": "USGS-Sites",
          "siteNameTypePref": "nwshb5",
          "transportMediumType": "other"
        }
      },
      "POST_UPDATE_NetList": {
        "value": {
          "items": {
            "14159500": {
              "description": "",
              "platformName": "CGRO",
              "transportId": "14159500"
            },
            "14372300": {
              "description": "",
              "platformName": "AGNO",
              "transportId": "14372300"
            }
          },
          "lastModifyTime": "2020-10-19T18:14:14.788Z[UTC]",
          "name": "USGS-Sites",
          "netlistId": 4,
          "siteNameTypePref": "nwshb5",
          "transportMediumType": "other"
        }
      },
      "POST_BASIC_DataSource": {
        "value": {
          "dataSourceId": 10,
          "groupMembers": [
            {
              "dataSourceId": 4,
              "dataSourceName": ""
            }
          ],
          "name": "",
          "props": {},
          "type": "",
          "usedBy": 0
        }
      },
      "POST_NEW_DataSource": {
        "value": {
          "groupMembers": [
            {
              "dataSourceId": 4,
              "dataSourceName": "Cove-LRGS"
            }
          ],
          "name": "testgroup",
          "props": {},
          "type": "hotbackupgroup",
          "usedBy": 0
        }
      },
      "POST_UPDATE_DataSource": {
        "value": {
          "dataSourceId": 10,
          "groupMembers": [
            {
              "dataSourceId": 4,
              "dataSourceName": "Cove-LRGS"
            },
            {
              "dataSourceId": 5,
              "dataSourceName": "CDADATA-As-MBHydro"
            },
            {
              "dataSourceId": 7,
              "dataSourceName": "USGS-Web"
            }
          ],
          "name": "testgroup",
          "props": {
            "whatevs": "something 567",
            "bc": "def"
          },
          "type": "hotbackupgroup",
          "usedBy": 0
        }
      },
      "POST_BASIC_Site": {
        "value": {
          "country": "",
          "description": "",
          "elevUnits": "",
          "elevation": 234.7,
          "latitude": 42.4278,
          "longitude": -72.06261,
          "nearestCity": "",
          "properties": {},
          "region": "",
          "siteId": 7,
          "sitenames": {
            "CWMS": "",
            "NWSHB5": ""
          },
          "state": "",
          "timezone": ""
        }
      },
      "POST_NEW_Site": {
        "value": {
          "country": "USA",
          "description": "Barre Falls Dam. Ware River",
          "elevUnits": "M",
          "elevation": 234.7,
          "latitude": 42.4278,
          "longitude": -72.06261,
          "nearestCity": "Barre Falls Dam",
          "properties": {},
          "region": "",
          "siteId": 7,
          "sitenames": {
            "CWMS": "BFD",
            "NWSHB5": "BFD"
          },
          "state": "MA",
          "timezone": "America/New_York"
        }
      },
      "POST_UPDATE_Site": {
        "value": {
          "country": "USA",
          "description": "Barre Falls Dam. Ware River",
          "elevUnits": "M",
          "elevation": 234.7,
          "latitude": 42.4278,
          "longitude": -72.06261,
          "nearestCity": "Barre Falls Dam",
          "properties": {
            "some": "thing",
            "something": "else"
          },
          "region": "",
          "siteId": 7,
          "sitenames": {
            "CWMS": "BFD",
            "NWSHB5": "BFD"
          },
          "state": "MA",
          "timezone": "America/New_York"
        }
      },
      "POST_BASIC_Config": {
        "value": {
          "configId": 12,
          "configSensors": [
            {
              "dataTypes": {},
              "properties": {},
              "recordingInterval": 3600,
              "recordingMode": "",
              "sensorName": "",
              "sensorNumber": 1,
              "timeOfFirstSample": 0
            }
          ],
          "description": "",
          "name": "",
          "numPlatforms": 0,
          "scripts": [
            {
              "dataOrder": "",
              "headerType": "decodes:goes",
              "formatStatements": [
                {
                  "format": "",
                  "label": "",
                  "sequenceNum": 1
                }
              ],
              "name": "ST",
              "scriptSensors": [
                {
                  "sensorNumber": 1,
                  "unitConverter": {
                    "a": 0,
                    "algorithm": "none",
                    "b": 0,
                    "c": 0,
                    "d": 0,
                    "e": 0,
                    "f": 0,
                    "fromAbbr": "",
                    "toAbbr": ""
                  }
                }
              ]
            }
          ]
        }
      },
      "POST_NEW_Config": {
        "value": {
          "configId": 12,
          "configSensors": [
            {
              "dataTypes": {
                "NL-SHEF": "WL",
                "SHEF-PE": "HG",
                "W-SHEF": "WL"
              },
              "properties": {},
              "recordingInterval": 3600,
              "recordingMode": "F",
              "sensorName": "WL",
              "sensorNumber": 1,
              "timeOfFirstSample": 0
            }
          ],
          "description": "WSC SHEF - 2 sensors - HG, VB",
          "name": "Shef-WSC-Hydro-RVERMMAR",
          "numPlatforms": 0,
          "scripts": [
            {
              "dataOrder": "D",
              "headerType": "decodes:goes",
              "formatStatements": [
                {
                  "format": "s(50,':',DONE),x,F(F,A,10d' ')",
                  "label": "getlabel",
                  "sequenceNum": 0
                }
              ],
              "name": "ST",
              "scriptSensors": [
                {
                  "sensorNumber": 1,
                  "unitConverter": {
                    "a": 0,
                    "algorithm": "none",
                    "b": 0,
                    "c": 0,
                    "d": 0,
                    "e": 0,
                    "f": 0,
                    "fromAbbr": "raw",
                    "toAbbr": "M"
                  }
                }
              ]
            }
          ]
        }
      },
      "POST_UPDATE_Config": {
        "value": {
          "configId": 12,
          "configSensors": [
            {
              "dataTypes": {
                "NL-SHEF": "WL",
                "SHEF-PE": "HG",
                "W-SHEF": "WL"
              },
              "properties": {},
              "recordingInterval": 3600,
              "recordingMode": "F",
              "sensorName": "WL",
              "sensorNumber": 1,
              "timeOfFirstSample": 0
            },
            {
              "dataTypes": {
                "SHEF-PE": "VB"
              },
              "properties": {},
              "recordingInterval": 3600,
              "recordingMode": "F",
              "sensorName": "VB",
              "sensorNumber": 4,
              "timeOfFirstSample": 0
            }
          ],
          "description": "WSC SHEF - 2 sensors - HG, VB",
          "name": "Shef-WSC-Hydro-RVERMMAR",
          "numPlatforms": 0,
          "scripts": [
            {
              "dataOrder": "D",
              "headerType": "decodes:goes",
              "formatStatements": [
                {
                  "format": "s(50,':',DONE),x,F(F,A,10d' ')",
                  "label": "getlabel",
                  "sequenceNum": 0
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',1),32(w,c(N,skiphg),F(S,A,12d' +-:',1)), >GETLABEL",
                  "label": "hg",
                  "sequenceNum": 1
                },
                {
                  "format": "s(12,'.',getlabel),-2x,32(w,c(N,getlabel),F(S,A,12d' +-:',4)), >GETLABEL",
                  "label": "vb",
                  "sequenceNum": 2
                },
                {
                  "format": "s(12,'.',enddata),-2x,32(w,c(N,enddata),F(S,A,12d' +-:',4)), >GETLABEL",
                  "label": "x-nointerval",
                  "sequenceNum": 3
                },
                {
                  "format": ">vb",
                  "label": "battery",
                  "sequenceNum": 4
                },
                {
                  "format": "-3x,>getlabel",
                  "label": "enddata",
                  "sequenceNum": 5
                },
                {
                  "format": "/",
                  "label": "error",
                  "sequenceNum": 6
                },
                {
                  "format": "/,>getlabel",
                  "label": "done",
                  "sequenceNum": 7
                },
                {
                  "format": "-2x,5(S(50,':',done),S(3,'HG',enddata))>getlabel",
                  "label": "skiphg",
                  "sequenceNum": 8
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',6),32(w,c(N,enddata),F(S,A,12d' +-:',6)), >GETLABEL",
                  "label": "pr",
                  "sequenceNum": 9
                },
                {
                  "format": ">pr",
                  "label": "pc",
                  "sequenceNum": 10
                },
                {
                  "format": ">hg",
                  "label": "hk",
                  "sequenceNum": 11
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',7),32(w,c(N,enddata),F(S,A,12d' +-:',7)), >GETLABEL",
                  "label": "tx",
                  "sequenceNum": 12
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',8),32(w,c(N,enddata),F(S,A,12d' +-:',8)), >GETLABEL",
                  "label": "tn",
                  "sequenceNum": 13
                },
                {
                  "format": "s(12,'.',enddata),-2x,32(w,c(N,enddata),F(S,A,12d' +-:',4)), >GETLABEL",
                  "label": "vb-x",
                  "sequenceNum": 14
                },
                {
                  "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',9),32(w,c(N,skiphg),F(S,A,12d' +-:',9)), >GETLABEL",
                  "label": "hh",
                  "sequenceNum": 15
                }
              ],
              "name": "ST",
              "scriptSensors": [
                {
                  "sensorNumber": 1,
                  "unitConverter": {
                    "a": 0,
                    "algorithm": "none",
                    "b": 0,
                    "c": 0,
                    "d": 0,
                    "e": 0,
                    "f": 0,
                    "fromAbbr": "raw",
                    "toAbbr": "M"
                  }
                },
                {
                  "sensorNumber": 4,
                  "unitConverter": {
                    "a": 0,
                    "algorithm": "none",
                    "b": 0,
                    "c": 0,
                    "d": 0,
                    "e": 0,
                    "f": 0,
                    "fromAbbr": "raw",
                    "toAbbr": "V"
                  }
                }
              ]
            }
          ]
        }
      },
      "POST_BASIC_DecodesPlatform": {
        "value": {
          "agency": "",
          "configId": 6,
          "description": "",
          "lastModified": "",
          "platformId": 5,
          "platformSensors": [
            {
              "max": 120,
              "min": -40,
              "sensorNum": 1,
              "sensorProps": {},
              "actualSiteId": 5
            }
          ],
          "production": false,
          "properties": {},
          "siteId": 8,
          "transportMedia": [
            {
              "assignedTime": 2095,
              "baud": 0,
              "channelNum": 161,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "",
              "mediumType": "",
              "parity": "",
              "scriptName": "",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "",
              "transportInterval": 3600,
              "transportWindow": 5
            }
          ]
        }
      },
      "POST_NEW_DecodesPlatform": {
        "value": {
          "agency": "CWMS",
          "configId": 6,
          "description": "Ball Mountain Dam, West River,VT",
          "lastModified": "2022-01-21T14:18:21.176Z[UTC]",
          "platformSensors": [
            {
              "max": 120,
              "min": -40,
              "sensorNum": 1,
              "sensorProps": {},
              "actualSiteId": 5
            }
          ],
          "production": false,
          "properties": {},
          "siteId": 8,
          "transportMedia": [
            {
              "assignedTime": 2095,
              "baud": 0,
              "channelNum": 161,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "CE31D030",
              "mediumType": "goes-self-timed",
              "parity": "U",
              "scriptName": "ST",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "UTC",
              "transportInterval": 3600,
              "transportWindow": 5
            }
          ]
        }
      },
      "POST_UPDATE_DecodesPlatform": {
        "value": {
          "agency": "CWMS",
          "configId": 6,
          "description": "Ball Mountain Dam, West River,VT",
          "lastModified": "2022-01-21T14:18:21.176Z[UTC]",
          "platformId": 5,
          "platformSensors": [
            {
              "max": 120,
              "min": -40,
              "sensorNum": 1,
              "sensorProps": {}
            },
            {
              "sensorNum": 2,
              "sensorProps": {}
            },
            {
              "sensorNum": 3,
              "sensorProps": {}
            },
            {
              "sensorNum": 4,
              "sensorProps": {}
            },
            {
              "actualSiteId": 5,
              "sensorNum": 5,
              "sensorProps": {}
            }
          ],
          "production": false,
          "properties": {},
          "siteId": 8,
          "transportMedia": [
            {
              "assignedTime": 2095,
              "baud": 0,
              "channelNum": 161,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "CE31D030",
              "mediumType": "goes-self-timed",
              "parity": "U",
              "scriptName": "ST",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "UTC",
              "transportInterval": 3600,
              "transportWindow": 5
            },
            {
              "baud": 0,
              "channelNum": 129,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "CE31D030",
              "mediumType": "goes-random",
              "parity": "U",
              "scriptName": "RD",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "UTC",
              "transportInterval": 900
            },
            {
              "baud": 0,
              "channelNum": 235,
              "dataBits": 0,
              "doLogin": false,
              "mediumId": "CE31D030",
              "mediumType": "goes",
              "parity": "U",
              "scriptName": "Network_Tower",
              "stopBits": 0,
              "timeAdjustment": 0,
              "timezone": "UTC",
              "transportInterval": 900
            }
          ]
        }
      },
      "POST_BASIC_DecodesPresentationGroup": {
        "value": {
          "elements": [
            {
              "dataTypeCode": "",
              "dataTypeStd": "",
              "fractionalDigits": 2,
              "units": "ft"
            }
          ],
          "groupId": 4,
          "lastModified": null,
          "name": "",
          "production": false
        }
      },
      "POST_NEW_DecodesPresentationGroup": {
        "value": {
          "elements": [
            {
              "dataTypeCode": "Elev",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "ft"
            }
          ],
          "lastModified": null,
          "name": "regtest",
          "production": false
        }
      },
      "POST_UPDATE_DecodesPresentationGroup": {
        "value": {
          "elements": [
            {
              "dataTypeCode": "Elev",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "ft"
            },
            {
              "dataTypeCode": "Elev-Pool",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "ft"
            },
            {
              "dataTypeCode": "FLOW-HOLDOUT",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "cfs"
            },
            {
              "dataTypeCode": "FLOW-INFLOW",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "cfs"
            },
            {
              "dataTypeCode": "Temp",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "max": 212,
              "min": 0,
              "units": "degF"
            },
            {
              "dataTypeCode": "Flow",
              "dataTypeStd": "CWMS",
              "fractionalDigits": 2,
              "units": "cfs"
            }
          ],
          "groupId": 4,
          "lastModified": "2022-03-04T19:00:21.752Z[UTC]",
          "name": "regtest",
          "production": false
        }
      },
      "POST_BASIC_DecodesRoutingSpec": {
        "value": {
          "applyTimeTo": "",
          "ascendingTime": true,
          "dataSourceId": 4,
          "dataSourceName": "",
          "destinationArg": "",
          "destinationType": "",
          "enableEquations": true,
          "goesChannels": [],
          "goesRandom": true,
          "goesSelfTimed": true,
          "goesSpacecraftCheck": true,
          "goesSpacecraftSelection": "",
          "iridium": true,
          "lastModified": null,
          "name": "",
          "netlistNames": [
            ""
          ],
          "networkDCP": true,
          "outputFormat": "",
          "outputTZ": "",
          "parityCheck": true,
          "paritySelection": "",
          "platformIds": [
            ""
          ],
          "platformNames": [
            ""
          ],
          "presGroupName": "",
          "production": true,
          "properties": {},
          "qualityNotifications": true,
          "routingId": 20,
          "settlingTimeDelay": true,
          "since": ""
        }
      },
      "POST_NEW_DecodesRoutingSpec": {
        "value": {
          "applyTimeTo": "Both",
          "ascendingTime": true,
          "dataSourceId": 4,
          "dataSourceName": "Cove-LRGS",
          "destinationArg": "some-directory-path",
          "destinationType": "directory",
          "enableEquations": true,
          "goesChannels": [
            123
          ],
          "goesRandom": true,
          "goesSelfTimed": true,
          "goesSpacecraftCheck": true,
          "goesSpacecraftSelection": "East",
          "iridium": true,
          "lastModified": null,
          "name": "test",
          "netlistNames": [
            "goes1"
          ],
          "networkDCP": true,
          "outputFormat": "emit-ascii",
          "outputTZ": "EST5EDT",
          "parityCheck": true,
          "paritySelection": "Good",
          "platformIds": [
            "12345678"
          ],
          "platformNames": [
            "MROI4"
          ],
          "presGroupName": "CWMS-English",
          "production": true,
          "properties": {},
          "qualityNotifications": true,
          "settlingTimeDelay": true,
          "since": "2022/065 00:00:00"
        }
      },
      "POST_UPDATE_DecodesRoutingSpec": {
        "value": {
          "applyTimeTo": "Both",
          "ascendingTime": true,
          "dataSourceId": 4,
          "dataSourceName": "Cove-LRGS",
          "destinationArg": "some-directory-path",
          "destinationType": "directory",
          "enableEquations": true,
          "goesChannels": [
            123
          ],
          "goesRandom": true,
          "goesSelfTimed": true,
          "goesSpacecraftCheck": true,
          "goesSpacecraftSelection": "East",
          "iridium": true,
          "lastModified": "2022-03-22T17:44:15.941Z[UTC]",
          "name": "test",
          "netlistNames": [
            "goes1"
          ],
          "networkDCP": true,
          "outputFormat": "emit-ascii",
          "outputTZ": "EST5EDT",
          "parityCheck": true,
          "paritySelection": "Good",
          "platformIds": [
            "12345678",
            "004085C8"
          ],
          "platformNames": [
            "MROI4"
          ],
          "presGroupName": "CWMS-English",
          "production": true,
          "properties": {},
          "qualityNotifications": true,
          "routingId": 20,
          "settlingTimeDelay": true,
          "since": "2022/065 00:00:00"
        }
      },
      "POST_BASIC_Schedule": {
        "value": {
          "appId": 14,
          "appName": "",
          "enabled": false,
          "lastModified": null,
          "name": "",
          "routingSpecId": 9,
          "routingSpecName": "",
          "schedEntryId": 21,
          "timeZone": ""
        }
      },
      "POST_NEW_Schedule": {
        "value": {
          "appId": 14,
          "appName": "RoutingScheduler",
          "enabled": false,
          "lastModified": null,
          "name": "something-else",
          "routingSpecId": 9,
          "routingSpecName": "goes1",
          "timeZone": "America/New_York"
        }
      },
      "POST_UPDATE_Schedule": {
        "value": {
          "appId": 14,
          "appName": "RoutingScheduler",
          "enabled": false,
          "lastModified": "2022-03-28T18:02:13.659Z[UTC]",
          "name": "something-else",
          "routingSpecId": 9,
          "routingSpecName": "goes1",
          "schedEntryId": 21,
          "timeZone": "America/New_York"
        }
      },
      "POST_BASIC_LoadingApp": {
        "value": {
          "appId": 4,
          "appName": "",
          "appType": "",
          "comment": "",
          "lastModified": null,
          "manualEditingApp": false,
          "properties": {}
        }
      },
      "POST_NEW_LoadingApp": {
        "value": {
          "appName": "compproc",
          "appType": "computationprocess",
          "comment": "Main Computation Process",
          "lastModified": "2022-03-30T20:49:44Z[UTC]",
          "manualEditingApp": false,
          "properties": {
            "fromName": "idk"
          }
        }
      },
      "POST_UPDATE_LoadingApp": {
        "value": {
          "appId": 4,
          "appName": "compproc",
          "appType": "computationprocess",
          "comment": "Main Computation Process",
          "lastModified": "2022-03-30T20:49:44Z[UTC]",
          "manualEditingApp": false,
          "properties": {
            "fromName": "idk"
          }
        }
      },
      "POST_BASIC_OpenDCSAlgorithm": {
        "value": {
          "algorithmId": 4,
          "algoScripts": [],
          "description": "",
          "execClass": "",
          "name": "",
          "numCompsUsing": 1,
          "parms": [
            {
              "parmType": "",
              "roleName": ""
            }
          ],
          "props": {
            "input1_MISSING": "",
            "chooseHigher": "true",
            "upperLimit": "",
            "lowerLimit": "",
            "input2_MISSING": "IGNORE"
          }
        }
      },
      "POST_NEW_OpenDCSAlgorithm": {
        "value": {
          "algoScripts": [],
          "description": "Given two inputs, output the best one: If only one is present at the time-slice, output it. If one is outside the specified upper or lower limit (see properties) output the other. If both are acceptable, output the first one. Useful in situations where you have redundant sensors.",
          "execClass": "decodes.tsdb.algo.ChooseOne",
          "name": "ChooseOne",
          "numCompsUsing": 1,
          "parms": [
            {
              "parmType": "i",
              "roleName": "input1"
            },
            {
              "parmType": "o",
              "roleName": "output"
            }
          ],
          "props": {
            "input1_MISSING": "IGNORE",
            "chooseHigher": "true",
            "upperLimit": "999999999999.9",
            "lowerLimit": "-999999999999.9",
            "input2_MISSING": "IGNORE"
          }
        }
      },
      "POST_UPDATE_OpenDCSAlgorithm": {
        "value": {
          "algoScripts": [],
          "algorithmId": 4,
          "description": "Given two inputs, output the best one: If only one is present at the time-slice, output it. If one is outside the specified upper or lower limit (see properties) output the other. If both are acceptable, output the first one. Useful in situations where you have redundant sensors.",
          "execClass": "decodes.tsdb.algo.ChooseOne",
          "name": "ChooseOne",
          "numCompsUsing": 1,
          "parms": [
            {
              "parmType": "i",
              "roleName": "input1"
            },
            {
              "parmType": "i",
              "roleName": "input2"
            },
            {
              "parmType": "o",
              "roleName": "output"
            }
          ],
          "props": {
            "input1_MISSING": "IGNORE",
            "chooseHigher": "true",
            "upperLimit": "999999999999.9",
            "lowerLimit": "-999999999999.9",
            "input2_MISSING": "IGNORE"
          }
        }
      },
      "POST_BASIC_OpenDCSComputation": {
        "value": {
          "algorithmId": 24,
          "algorithmName": "",
          "appId": 5,
          "comment": "",
          "computationId": 4,
          "effectiveEndType": "",
          "effectiveStartType": "",
          "enabled": false,
          "groupId": -1,
          "lastModified": null,
          "name": null,
          "parmList": [
            {
              "algoParmType": "",
              "algoRoleName": "",
              "dataType": "",
              "dataTypeId": 48,
              "deltaT": 0,
              "duration": "0",
              "interval": "",
              "paramType": "",
              "siteId": 1,
              "siteName": "",
              "tsKey": 1,
              "version": ""
            }
          ],
          "props": {
            "minSamplesNeeded": "",
            "aggUpperBoundClosed": "false",
            "aggregateTimeZone": "",
            "average_tsname": "",
            "aggLowerBoundClosed": "false"
          }
        }
      },
      "POST_NEW_OpenDCSComputation": {
        "value": {
          "algorithmId": 24,
          "algorithmName": "AverageAlgorithm",
          "appId": 5,
          "comment": "",
          "effectiveEndType": "No Limit",
          "effectiveStartType": "No Limit",
          "enabled": false,
          "groupId": -1,
          "lastModified": null,
          "name": "Daily Ave ( ... )",
          "parmList": [
            {
              "algoParmType": "i",
              "algoRoleName": "input",
              "dataType": "Stage",
              "dataTypeId": 48,
              "deltaT": 0,
              "duration": "0",
              "interval": "15Minutes",
              "paramType": "Inst",
              "siteId": 1,
              "siteName": "OKVI4",
              "tsKey": 1,
              "version": "raw"
            }
          ],
          "props": {
            "minSamplesNeeded": "1",
            "aggUpperBoundClosed": "false",
            "aggregateTimeZone": "UTC",
            "average_tsname": "HG-Ave-Open-Open",
            "aggLowerBoundClosed": "false"
          }
        }
      },
      "POST_UPDATE_OpenDCSComputation": {
        "value": {
          "algorithmId": 24,
          "algorithmName": "AverageAlgorithm",
          "appId": 5,
          "comment": "",
          "computationId": 4,
          "effectiveEndType": "No Limit",
          "effectiveStartType": "No Limit",
          "enabled": false,
          "groupId": -1,
          "lastModified": "2022-05-17T17:17:04.693Z[UTC]",
          "name": "Daily Ave ( ... )",
          "parmList": [
            {
              "algoParmType": "i",
              "algoRoleName": "input",
              "dataType": "Stage",
              "dataTypeId": 48,
              "deltaT": 0,
              "duration": "0",
              "interval": "15Minutes",
              "paramType": "Inst",
              "siteId": 1,
              "siteName": "OKVI4",
              "tsKey": 1,
              "version": "raw"
            },
            {
              "algoParmType": "o",
              "algoRoleName": "average",
              "dataType": "Stage",
              "dataTypeId": 48,
              "deltaT": 0,
              "duration": "1Day",
              "interval": "1Day",
              "paramType": "Ave",
              "siteId": 1,
              "siteName": "OKVI4",
              "tsKey": 5,
              "version": "OO"
            }
          ],
          "props": {
            "minSamplesNeeded": "1",
            "aggUpperBoundClosed": "false",
            "aggregateTimeZone": "UTC",
            "average_tsname": "HG-Ave-Open-Open",
            "aggLowerBoundClosed": "false"
          }
        }
      },
      "POST_BASIC_OpenDCSCompTestRequest": {
        "value": {
          "computation": {
            "computationId": 5,
            "name": "",
            "comment": "",
            "appId": 5,
            "applicationName": null,
            "lastModified": 1654538252952,
            "enabled": false,
            "effectiveStartType": "",
            "effectiveStartDate": null,
            "effectiveStartInterval": null,
            "effectiveEndType": "",
            "effectiveEndDate": null,
            "effectiveEndInterval": null,
            "algorithmId": 26,
            "algorithmName": "",
            "parmList": [
              {
                "algoParmType": "i",
                "algoRoleName": "input",
                "tsKey": null,
                "dataTypeId": null,
                "dataType": "",
                "interval": "",
                "deltaT": 0,
                "deltaTUnits": null,
                "unitsAbbr": null,
                "siteId": null,
                "siteName": "",
                "tableSelector": null,
                "modelId": null,
                "paramType": "",
                "duration": "",
                "version": "",
                "ifMissing": null
              }
            ],
            "props": {},
            "groupId": 1,
            "groupName": ""
          },
          "tsid": {
            "uniqueString": "",
            "key": 8,
            "description": "",
            "storageUnits": ""
          },
          "since": "",
          "until": "",
          "traceOutput": true
        }
      },
      "POST_VERBOSE_OpenDCSCompTestRequest": {
        "value": {
          "computation": {
            "computationId": 5,
            "name": "MROI4-ROWI4-Stage-Copy",
            "comment": "",
            "appId": 5,
            "applicationName": null,
            "lastModified": 1654538252952,
            "enabled": false,
            "effectiveStartType": "No Limit",
            "effectiveStartDate": null,
            "effectiveStartInterval": null,
            "effectiveEndType": "No Limit",
            "effectiveEndDate": null,
            "effectiveEndInterval": null,
            "algorithmId": 26,
            "algorithmName": "CopyAlgorithm",
            "parmList": [
              {
                "algoParmType": "i",
                "algoRoleName": "input",
                "tsKey": null,
                "dataTypeId": null,
                "dataType": "",
                "interval": "",
                "deltaT": 0,
                "deltaTUnits": null,
                "unitsAbbr": null,
                "siteId": null,
                "siteName": "",
                "tableSelector": null,
                "modelId": null,
                "paramType": "",
                "duration": "",
                "version": "",
                "ifMissing": null
              },
              {
                "algoParmType": "o",
                "algoRoleName": "output",
                "tsKey": null,
                "dataTypeId": null,
                "dataType": "",
                "interval": "",
                "deltaT": 0,
                "deltaTUnits": null,
                "unitsAbbr": null,
                "siteId": null,
                "siteName": "",
                "tableSelector": null,
                "modelId": null,
                "paramType": "",
                "duration": "",
                "version": "rev",
                "ifMissing": null
              }
            ],
            "props": {},
            "groupId": 1,
            "groupName": "MROI4-ROWI4-HG"
          },
          "tsid": {
            "uniqueString": "ROWI4.Stage.Inst.15Minutes.0.raw",
            "key": 8,
            "description": "ROWI4 - Stage (created by DECODES)",
            "storageUnits": "ft"
          },
          "since": "2000-12-19T20:15:00.000Z[UTC]",
          "until": "2022-12-19T20:15:00.000Z[UTC]",
          "traceOutput": true
        }
      },
      "POST_BASIC_TimeseriesGroupEntry": {
        "value": [
          {
            "groupId": 19,
            "groupName": "",
            "groupType": "",
            "description": "",
            "tsIds": [
              {
                "uniqueString": "",
                "key": 1,
                "description": "",
                "storageUnits": "",
                "active": true
              }
            ],
            "includeGroups": [
              {
                "groupId": 1,
                "groupName": "",
                "groupType": "",
                "description": ""
              }
            ],
            "excludeGroups": [
              {
                "groupId": 1,
                "groupName": "",
                "groupType": "",
                "description": ""
              }
            ],
            "intersectGroups": [
              {
                "groupId": 1,
                "groupName": "",
                "groupType": "",
                "description": ""
              }
            ],
            "groupAttrs": [
              ""
            ],
            "groupSites": [
              {
                "siteId": 2,
                "sitenames": {
                  "CWMS": "",
                  "USGS": ""
                },
                "publicName": "",
                "description": ""
              }
            ],
            "groupDataTypes": [
              {
                "id": 224,
                "standard": "",
                "code": "",
                "displayName": ""
              }
            ]
          }
        ]
      },
      "POST_VERBOSE_TimeseriesGroupEntry": {
        "value": [
          {
            "groupId": 19,
            "groupName": "junk",
            "groupType": "basin",
            "description": "",
            "tsIds": [
              {
                "uniqueString": "OKVI4.Stage.Inst.15Minutes.0.raw",
                "key": 1,
                "description": "",
                "storageUnits": "ft",
                "active": true
              }
            ],
            "includeGroups": [
              {
                "groupId": 1,
                "groupName": "topgroup",
                "groupType": "data type",
                "description": "testing for OPENDCS-15 issue"
              }
            ],
            "excludeGroups": [
              {
                "groupId": 1,
                "groupName": "topgroup",
                "groupType": "data type",
                "description": "testing for OPENDCS-15 issue"
              }
            ],
            "intersectGroups": [
              {
                "groupId": 1,
                "groupName": "topgroup",
                "groupType": "data type",
                "description": "testing for OPENDCS-15 issue"
              }
            ],
            "groupAttrs": [
              "BaseLocation=TESTSITE2",
              "BaseParam=ELEV",
              "BaseVersion=DCP",
              "Duration=0",
              "Interval=1Hour",
              "ParamType=Inst",
              "SubLocation=Spillway2-Gate1",
              "SubParam=PZ1B",
              "SubVersion=Raw",
              "Version=DCP-Raw"
            ],
            "groupSites": [
              {
                "siteId": 2,
                "sitenames": {
                  "CWMS": "ROWI4",
                  "USGS": "5449500"
                },
                "publicName": "IOWA RIVER NEAR ROWAN",
                "description": "IOWA RIVER NEAR ROWAN 4NW"
              }
            ],
            "groupDataTypes": [
              {
                "id": 224,
                "standard": "CWMS",
                "code": "ELEV-PZ2A",
                "displayName": "CWMS:ELEV-PZ2A"
              }
            ]
          }
        ]
      },
      "POST_BASIC_TestDecodesRequest": {
        "value": {
          "config": {
            "configId": 12,
            "configSensors": [
              {
                "dataTypes": {},
                "properties": {},
                "recordingInterval": 3600,
                "recordingMode": "",
                "sensorName": "",
                "sensorNumber": 1,
                "timeOfFirstSample": 0
              }
            ],
            "description": "",
            "name": "",
            "numPlatforms": 0,
            "scripts": [
              {
                "dataOrder": "",
                "formatStatements": [
                  {
                    "format": "",
                    "label": "",
                    "sequenceNum": 0
                  }
                ],
                "name": "ST",
                "scriptSensors": [
                  {
                    "sensorNumber": 1,
                    "unitConverter": {
                      "a": 0,
                      "algorithm": "none",
                      "b": 0,
                      "c": 0,
                      "d": 0,
                      "e": 0,
                      "f": 0,
                      "fromAbbr": "",
                      "toAbbr": ""
                    }
                  }
                ]
              }
            ]
          },
          "rawmsg": {
            "flags": 71765,
            "platformId": "",
            "sequenceNum": 25693,
            "localRecvTime": "",
            "carrierStart": "",
            "carrierStop": "",
            "baud": 300,
            "goodPhasePct": 100,
            "freqOffset": 0.5,
            "signalStrength": 44.8,
            "phaseNoise": 1.97,
            "xmitTime": null,
            "momsn": null,
            "mtmsn": null,
            "cdrReference": null,
            "sessionStatus": null,
            "base64": ""
          }
        }
      },
      "POST_VERBOSE_TestDecodesRequest": {
        "value": {
          "config": {
            "configId": 12,
            "configSensors": [
              {
                "dataTypes": {
                  "NL-SHEF": "WL",
                  "SHEF-PE": "HG",
                  "W-SHEF": "WL"
                },
                "properties": {},
                "recordingInterval": 3600,
                "recordingMode": "F",
                "sensorName": "WL",
                "sensorNumber": 1,
                "timeOfFirstSample": 0
              },
              {
                "dataTypes": {
                  "SHEF-PE": "VB"
                },
                "properties": {},
                "recordingInterval": 3600,
                "recordingMode": "F",
                "sensorName": "VB",
                "sensorNumber": 4,
                "timeOfFirstSample": 0
              }
            ],
            "description": "WSC SHEF - 2 sensors - HG, VB",
            "name": "Shef-WSC-Hydro-RVERMMAR",
            "numPlatforms": 0,
            "scripts": [
              {
                "dataOrder": "D",
                "formatStatements": [
                  {
                    "format": "s(50,':',DONE),x,F(F,A,10d' ')",
                    "label": "getlabel",
                    "sequenceNum": 0
                  },
                  {
                    "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',1),32(w,c(N,skiphg),F(S,A,12d' +-:',1)), >GETLABEL",
                    "label": "hg",
                    "sequenceNum": 1
                  },
                  {
                    "format": "s(12,'.',getlabel),-2x,32(w,c(N,getlabel),F(S,A,12d' +-:',4)), >GETLABEL",
                    "label": "vb",
                    "sequenceNum": 2
                  },
                  {
                    "format": "s(12,'.',enddata),-2x,32(w,c(N,enddata),F(S,A,12d' +-:',4)), >GETLABEL",
                    "label": "x-nointerval",
                    "sequenceNum": 3
                  },
                  {
                    "format": ">vb",
                    "label": "battery",
                    "sequenceNum": 4
                  },
                  {
                    "format": "-3x,>getlabel",
                    "label": "enddata",
                    "sequenceNum": 5
                  },
                  {
                    "format": "/",
                    "label": "error",
                    "sequenceNum": 6
                  },
                  {
                    "format": "/,>getlabel",
                    "label": "done",
                    "sequenceNum": 7
                  },
                  {
                    "format": "-2x,5(S(50,':',done),S(3,'HG',enddata))>getlabel",
                    "label": "skiphg",
                    "sequenceNum": 8
                  },
                  {
                    "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',6),32(w,c(N,enddata),F(S,A,12d' +-:',6)), >GETLABEL",
                    "label": "pr",
                    "sequenceNum": 9
                  },
                  {
                    "format": ">pr",
                    "label": "pc",
                    "sequenceNum": 10
                  },
                  {
                    "format": ">hg",
                    "label": "hk",
                    "sequenceNum": 11
                  },
                  {
                    "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',7),32(w,c(N,enddata),F(S,A,12d' +-:',7)), >GETLABEL",
                    "label": "tx",
                    "sequenceNum": 12
                  },
                  {
                    "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',8),32(w,c(N,enddata),F(S,A,12d' +-:',8)), >GETLABEL",
                    "label": "tn",
                    "sequenceNum": 13
                  },
                  {
                    "format": "s(12,'.',enddata),-2x,32(w,c(N,enddata),F(S,A,12d' +-:',4)), >GETLABEL",
                    "label": "vb-x",
                    "sequenceNum": 14
                  },
                  {
                    "format": "s(12,'#',getlabel),x,f(mint,a,3d' +-',9),32(w,c(N,skiphg),F(S,A,12d' +-:',9)), >GETLABEL",
                    "label": "hh",
                    "sequenceNum": 15
                  }
                ],
                "name": "ST",
                "scriptSensors": [
                  {
                    "sensorNumber": 1,
                    "unitConverter": {
                      "a": 0,
                      "algorithm": "none",
                      "b": 0,
                      "c": 0,
                      "d": 0,
                      "e": 0,
                      "f": 0,
                      "fromAbbr": "raw",
                      "toAbbr": "M"
                    }
                  },
                  {
                    "sensorNumber": 4,
                    "unitConverter": {
                      "a": 0,
                      "algorithm": "none",
                      "b": 0,
                      "c": 0,
                      "d": 0,
                      "e": 0,
                      "f": 0,
                      "fromAbbr": "raw",
                      "toAbbr": "V"
                    }
                  }
                ]
              }
            ]
          },
          "rawmsg": {
            "flags": 71765,
            "platformId": "CE31D030",
            "sequenceNum": 25693,
            "localRecvTime": "2023-05-09T12:34:54.428Z[UTC]",
            "carrierStart": "2023-05-09T12:34:55.284Z[UTC]",
            "carrierStop": "2023-05-09T12:34:56.752Z[UTC]",
            "baud": 300,
            "goodPhasePct": 100,
            "freqOffset": 0.5,
            "signalStrength": 44.8,
            "phaseNoise": 1.97,
            "xmitTime": null,
            "momsn": null,
            "mtmsn": null,
            "cdrReference": null,
            "sessionStatus": null,
            "base64": "Q0UzMUQwMzAyMzEyOTEyMzQ1NUc0NSswTk4xNjFFTjIwMDAyN2JCMURBTXRBTXRBTXRBTXM6WUIgMTMuNTkgIA=="
          }
        }
      }
    }
  }
}