/*
 *  Copyright 2025 OpenDCS Consortium and its Contributors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License")
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id "opendcs-rest-api.java-conventions"
    id "opendcs-rest-api.deps-conventions"
    id "opendcs-rest-api.publishing-conventions"
    id "war"
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.28"
}

configurations {
    webjars
}

dependencies {
    implementation(libs.opendcs) {
        exclude group: "javax.media", module: "jai_core"
        exclude group: "javax.media", module: "jai_codec"
        exclude group: "org.jooq.pro", module: "jooq-meta"
        exclude group: "org.jooq.pro", module: "jooq-codegen"
        exclude group: "com.oracle.database.jdbc", module: "jmscommon"
        exclude group: "com.oracle.database.jdbc", module: "aqapi"
        exclude group: "com.oracle.database.jdbc", module: "xmlparserv2"
        exclude group: "com.oracle.database.jdbc", module: "xdb"
        exclude group: "com.sun.media", module: "jai_imageio"
        exclude group: "com.mrsid", module: "mrsidreader"
    }
    implementation(libs.opendcs.api)

    implementation(libs.servlet.api)
    implementation(libs.json.jackson)
    implementation(libs.jersey.container.servlet)
    implementation(libs.nimbus)
    implementation(libs.swagger.jaxrs2)
    implementation(libs.jwt)
    implementation(libs.jersey.hk2)
    implementation(libs.slf4j.api)
    implementation(libs.jackson)
    runtimeOnly(libs.jackson.annotations) // updated for swagger compatibility
    runtimeOnly(libs.jaxb.runtime)
    runtimeOnly(libs.postgresql)
    webjars(libs.swagger.ui)
    testImplementation(libs.jersey.test)
    testImplementation(libs.mockito.core)
    testImplementation(libs.mockito.inline)
    testRuntimeOnly(libs.byte.buddy)
    testImplementation(libs.mockito.junit.jupiter)
    testImplementation(libs.rest.assured)
    testImplementation(libs.hamcrest)
    testImplementation(libs.bundles.tomcat)
    testImplementation(libs.commons.io)
    testImplementation(libs.apache.derby)
    testImplementation(libs.webcompere.system.stubs.jupiter)
    testImplementation(libs.testcontainers.core)
    testImplementation(libs.testcontainers.postgresql)
    testImplementation(libs.hec.testcontainers.cwms)
    testImplementation(libs.bundles.jdbi)
    testImplementation(libs.org.flywaydb.flyway.core)
    testRuntimeOnly(libs.jul.to.slf4j)
    compileOnly(libs.auto.service)
    annotationProcessor(libs.auto.service)
}

task extractWebJars(type: Copy) {
    from zipTree(configurations.webjars.singleFile)

    into file("src/main/webapp/swaggerui")
    includeEmptyDirs false
    eachFile {
        path -= ~/^.+?\/.+?\/.+?\/.+?\/.+?\//
    }
    exclude "**/swagger-initializer.js"
    includeEmptyDirs = false
}

compileTestJava {
    dependsOn extractWebJars
}

javadoc {
    dependsOn extractWebJars
}

jar {
    dependsOn extractWebJars
}

war {
    dependsOn extractWebJars
    from 'src/main/webapp'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = war.archiveBaseName.get()
            from components.java
        }
    }
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    sonarqube {
        properties {
            property 'sonar.exclusions', 'src/main/resources/swaggerui/**'
            property 'sonar.coverage.jacoco.xmlReportPaths', "${layout.buildDirectory.get().asFile.toString()}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }
}

// task to generate OpenAPI JSON file
resolve {
    classpath = sourceSets.main.runtimeClasspath
    outputFileName = 'OpenDCS-REST-API'
    outputFormat = 'JSON'
    prettyPrint = 'TRUE'
    resourcePackages = ['org.opendcs.odcsapi.res', 'org.opendcs.odcsapi.beans']
    outputDir = file('build/swagger/')
}

tasks.register('generateOpenAPI') {
    group = "documentation"
    description = "Generates the Swagger OpenAPI JSON file without running the application"
    dependsOn('resolve')
}

tasks.register('cleanOpenAPI') {
    group = "documentation"
    description = "Deletes the generated Swagger OpenAPI JSON file"
    doLast {
        project.delete file('build/swagger/OpenDCS-REST-API.json')
    }
}
