/*
 *  Copyright 2025 OpenDCS Consortium and its Contributors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License")
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
            classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:6.0.1.5171"
        }
    }
}

plugins {
    id "com.palantir.git-version" version "3.1.0"
}
if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    apply plugin: "org.sonarqube"
}

def static versionLabel(gitInfo) {
    def branch = gitInfo.branchName // all branches are snapshots, only tags get released
    def tag = gitInfo.lastTag
    // tag is returned as is. Branch may need cleanup
    return branch == null ? tag : 99 + "." + branch.replace("/", "-") + "-SNAPSHOT"
}

allprojects {
    group = 'org.opendcs'
    version = versionLabel(versionDetails())
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        apply plugin: "org.sonarqube"
    }
}
subprojects {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        sonarqube {
            properties {
                property "sonar.sources", "src/main/java"
                property "sonar.tests", "src/test/java"
                property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
            }
        }
    }
}
if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    sonar {
        properties {
            property "sonar.projectKey", "opendcs_rest_api"
            property "sonar.organization", "opendcs"
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.pullrequest.provider", "GitHub"
            property "sonar.pullrequest.github.repository", "opendcs/rest_api"
            property "sonar.projectVersion", sonarVersion()
        }
    }
    project(":opendcs-integration-test") {
        sonar {
            skipProject = true
        }
    }
}

ext.sonarVersion = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0', "--always"
        standardOutput = stdout
    }
    return stdout.toString().trim() + "+"
}