/*
 *  Copyright 2024 OpenDCS Consortium and its Contributors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License")
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "opendcs-rest-api.java-conventions"
    id "opendcs-rest-api.deps-conventions"
    id "opendcs-rest-api.publishing-conventions"
    id "de.undercouch.download" version "5.5.0"
}

dependencies {
    implementation(project(":opendcs-rest-api"))
    implementation(libs.jetty.server)
    implementation(libs.jetty.servlets)
    implementation(libs.jetty.servlet)
    implementation(libs.jersey.container.servlet)
    implementation(libs.postgresql)
    implementation(libs.swagger.jaxrs2)
    implementation(libs.javax.validation)
    implementation(libs.slf4j.jdk)
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.opendcs.odcsapi.jetty.Start',
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = jar.archiveBaseName.get()
            from components.java
        }
    }
}

tasks.register('downloadOpenDcsInstaller', Download) {
    src 'https://github.com/opendcs/opendcs/releases/download/' + libs.versions.opendcs.get() + '/opendcs-installer-' + libs.versions.opendcs.get() + '.jar'
    dest new File("${project.layout.buildDirectory.get()}/tmp/opendcs-installer.jar")
    onlyIfModified true
}

tasks.register('copyAutoInstallationScript', Copy) {
    from 'config'
    include 'auto-installation-script.xml'
    into "${project.layout.buildDirectory.get()}/opendcs"
    outputs.upToDateWhen { false }
    doFirst {
        filter(ReplaceTokens, tokens: ['installpath': "build/opendcs"])
    }
}

tasks.register('installOpenDcs', JavaExec) {
    dependsOn downloadOpenDcsInstaller
    dependsOn copyAutoInstallationScript
    mainClass = '-jar'
    args = ["${project.layout.buildDirectory.get()}/tmp/opendcs-installer.jar", "${project.layout.buildDirectory.get()}/opendcs/auto-installation-script.xml"]
}

tasks.register('copyUserProperties', Copy) {
    from 'config'
    include 'user.properties'
    into "${project.layout.buildDirectory.get()}/opendcs"
    outputs.upToDateWhen { false }
    doFirst {
        filter(ReplaceTokens, tokens: ['postgresdb.url': project.findProperty("postgresdb.url") ?: "jdbc:postgresql://localhost/open_tsdb"])
    }
}

tasks.register('startPostgresContainer', Exec) {
    doFirst() {
        if (!project.findProperty("postgresdb.url")) {
            commandLine 'docker-compose', 'up', '-d', 'db'
        }
    }
}

tasks.register('stopPostgresContainer', Exec) {
    doFirst() {
        if (!project.findProperty("postgresdb.url")) {
            commandLine 'docker-compose', 'down', 'db'
        }
    }
}

tasks.register('createStartScript') {
    doLast {

        //Make bin directory if it does not exist already.  buildDir is now deprecated.
        File buildDir = project.layout.getBuildDirectory().get().getAsFile();
        File binDir = new File(buildDir.toString(), "bin");
        project.mkdir(binDir);

        //Make the start.sh file.
        new File(binDir, "start.sh").text = """
#!/bin/bash
cd `dirname \$0`/..
java  -Djava.util.logging.config.file=config/logging.properties \$JAVA_OPTS -jar libs/${project.name}-${project.version}.jar \$JAVA_ARGS
            """
    }
}

tasks.register('bundle', Tar) {
    group "build"
    dependsOn jar
    dependsOn createStartScript

    compression Compression.GZIP
    archiveExtension = 'tar.gz'

    into('config') {
        from project.file("config/logging.properties")
    }
    into('libs') {
        from configurations.runtimeClasspath
    }
    into('libs') {
        from jar
    }
    into('bin') {
        from new File(project.layout.getBuildDirectory().get().getAsFile(), "bin/start.sh");
    }
}

tasks.register('startJettyOdcsApi', JavaExec) { ->
    group = 'run'
    dependsOn installOpenDcs
    dependsOn copyUserProperties
    dependsOn startPostgresContainer
    finalizedBy stopPostgresContainer
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "org.opendcs.odcsapi.jetty.Start"
    jvmArgs("-DDCSTOOL_HOME=" + (project.findProperty("DCSTOOL_HOME") ?: "${project.layout.buildDirectory.get()}/opendcs"),
            "-DDCSTOOL_USERDIR=" + (project.findProperty("DCSTOOL_USERDIR") ?: "${project.layout.buildDirectory.get()}/opendcs"))
    args(
            "-p", project.findProperty("REST_API_PORT") ?: "8081",
            "-c", project.findProperty("REST_API_CONTEXT") ?: "odcsapi",
            "-cors", project.findProperty("REST_API_CORS") ?: "config/opendcs_web_cors.cfg")
    doFirst {
        if (project.findProperty("postgresdb.url") == null) {
            environment 'OPENDCS_USERNAME', "tsdbadm"
            environment 'OPENDCS_PASSWORD', "postgres_pass"
        } else {
            environment 'OPENDCS_USERNAME', project.findProperty("postgresdb.username")
            environment 'OPENDCS_PASSWORD', project.findProperty("postgresdb.password")
        }
    }
}

tasks.register('renameTarball', Copy) {
    dependsOn 'bundle'

    from bundle.getArchiveFile().get().getAsFile()
    into bundle.getArchiveFile().get().getAsFile().getParent()
    rename { 'opendcs-rest-api-jetty.tgz' }
}

tasks.register('buildDockerImages', Exec) {
    group = 'build'
    dependsOn renameTarball
    dependsOn downloadOpenDcsInstaller
    doFirst {
        commandLine 'docker-compose', 'build', 'opendcs-api'
    }
}

tasks.register('runOwaspZap', Exec) {
    group = 'run'
    dependsOn renameTarball
    dependsOn downloadOpenDcsInstaller
    dependsOn buildDockerImages
    doFirst {
        commandLine 'docker-compose', 'up', '--abort-on-container-exit', 'zap'
    }
}

tasks.register('stopOwaspZap', Exec) {
    group = 'run'
    doFirst {
        commandLine 'docker-compose', 'down'
    }
}