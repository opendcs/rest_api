/*
 *  Copyright 2025 OpenDCS Consortium and its Contributors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License")
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opendcs.odcsapi.owasp;

import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermissions;
import java.time.Duration;

import org.opendcs.odcsapi.tomcat.TomcatServer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testcontainers.Testcontainers;
import org.testcontainers.containers.BindMode;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.utility.DockerImageName;

public final class OwaspZap
{
	private static final String ZAP_IMAGE = "ghcr.io/zaproxy/zaproxy:stable";
	private static final Logger LOGGER = LoggerFactory.getLogger(OwaspZap.class);


	/**
	 * arg[0] - the CATALINA_BASE directory you've setup
	 * arg[1] - full path to the war file generated by this build script
	 * arg[2] - name to use for this instance. See constructor for guidance
	 *
	 * @param args standard argument list
	 */
	public static void main(String[] args)
	{
		String baseDir = args[0];
		String port = args[1];
		String restWar = args[2];
		String guiWar = args[3];
		String dbType = args[4];
		TomcatServer.setupDb(dbType);

		try(TomcatServer tomcat = new TomcatServer(baseDir, port, restWar, guiWar))
		{
			tomcat.start(dbType);
			System.exit(runOwaspZap(tomcat).intValue());
		}
		catch(Exception e)
		{
			LOGGER.atError().setCause(e).log("Error running OWASP ZAP against OpenDCS REST API");
			System.exit(-1);
		}
	}

	private static Long runOwaspZap(TomcatServer tomcat) throws Exception
	{
		Path reportDir = Paths.get("./build/test-results/owasp_zap").toAbsolutePath().normalize();
		setupPermissions(reportDir);
		String restApiUrl = "http://host.testcontainers.internal:" + tomcat.getPort() + "/odcsapi";
		String exec = String.format("zap-api-scan.py -I -t %s/open_api.json -f openapi -r zap_report.html -w zap_report.md"
				+ " -O %s -f openapi -r zap_report.html -w zap_report.md", restApiUrl, restApiUrl);
		// Start a GenericContainer for OWASP ZAP
		try(GenericContainer<?> zapContainer = new GenericContainer<>(
				DockerImageName.parse(ZAP_IMAGE))
				.withStartupTimeout(Duration.ofMinutes(2))
				.withExposedPorts(tomcat.getPort())
				.withAccessToHost(true)
				.withCommand("/bin/sh", "-c", exec)
				.withFileSystemBind(reportDir.toString(), "/zap/wrk", BindMode.READ_WRITE))
		{
			Testcontainers.exposeHostPorts(tomcat.getPort());
			zapContainer.start();

			zapContainer.followOutput(outputFrame ->
			{
				String utf8Str = outputFrame.getUtf8String().trim();
				if(!utf8Str.isEmpty())
				{
					LOGGER.atInfo().log(utf8Str);
				}
			});
			while(zapContainer.isRunning())
			{
				Thread.sleep(200);
			}
			printAllFilesInDirectory(reportDir);

			LOGGER.atInfo().log("OWASP ZAP scan complete");
			return zapContainer.getCurrentContainerInfo().getState().getExitCodeLong();
		}

	}

	private static void setupPermissions(Path reportDir) throws IOException
	{
		Files.createDirectories(reportDir);
		try
		{
			Files.setPosixFilePermissions(reportDir, PosixFilePermissions.fromString("rwxrwxrwx"));
		}
		catch(UnsupportedOperationException e)
		{
			LOGGER.atTrace().log("Unable to set permissions on report directory: " + reportDir + " likely due to Windows OS");
		}
		assert Files.isWritable(reportDir);
	}

	private static void printAllFilesInDirectory(Path directoryPath)
	{
		LOGGER.atInfo().log("Directory: " + directoryPath);
		try(DirectoryStream<Path> stream = Files.newDirectoryStream(directoryPath))
		{
			for(Path path : stream)
			{
				LOGGER.atInfo().log("File: " + path.toAbsolutePath());
			}
		}
		catch(IOException e)
		{
			LOGGER.atError().setCause(e).log("Error reading directory: " + directoryPath);
		}
	}

}
