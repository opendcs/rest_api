/*
 *  Copyright 2025 OpenDCS Consortium and its Contributors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License")
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id "opendcs-rest-api.java-conventions"
    id "opendcs-rest-api.deps-conventions"
}

configurations {
    webjars
}

dependencies {
}

tasks.register('generateConfig', Copy) {
    doFirst {
        project.delete layout.buildDirectory.file("tomcat/")
        project.mkdir layout.buildDirectory.file("tomcat/logs")
    }
    from 'src/test/resources/tomcat'
    into layout.buildDirectory.file("tomcat")

    //rename "context.xml", "context.xml.template"
    rename "tomcat-server.xml", "server.xml"

    inputs.dir "src/test/resources"
    outputs.dir layout.buildDirectory.file("tomcat/conf")
}

tasks.register('integrationTestOpenTSDB', Test) {
    group "verification"
    useJUnitPlatform {
        includeTags "integration"
        includeTags "integration-opentsdb-only"
    }
    doFirst {
        classpath = classpath.filter {
            !it.name.endsWith('opendcs-7.0.13.jar')
        }
    }
    shouldRunAfter test
    dependsOn war
    dependsOn generateConfig
    dependsOn downloadAndUnzipInstaller
    jvmArgs += "-DwarContext=/opendcs-rest-api"
    jvmArgs += "-Djava.util.logging.config.file=$projectDir/test/resources/logging.properties"
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcatalina.base=${layout.buildDirectory.file("tomcat")}"
    jvmArgs += "-Dopendcs.test.integration.db=OpenDCS-Postgres"
    def outputDir = downloadAndUnzipInstaller.outputs.files.singleFile
    systemProperties.put("DCSTOOL_HOME", outputDir)
    finalizedBy integrationTestReportOpenTSDB
}

tasks.register('integrationTestCWMS', Test) {
    group "verification"
    useJUnitPlatform {
        includeTags "integration"
        includeTags "integration-cwms-only"
    }
    doFirst {
        classpath = classpath.filter {
            !it.name.endsWith('opendcs-7.0.13.jar')
        }
    }
    shouldRunAfter test
    dependsOn war
    dependsOn generateConfig
    dependsOn downloadAndUnzipInstaller
    jvmArgs += "-DwarContext=/opendcs-rest-api"
    jvmArgs += "-Djava.util.logging.config.file=$projectDir/test/resources/logging.properties"
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcatalina.base=${layout.buildDirectory.file("tomcat")}"
    jvmArgs += "-Dopendcs.test.integration.db=CWMS-Oracle"
    def outputDir = downloadAndUnzipInstaller.outputs.files.singleFile
    systemProperties.put("DCSTOOL_HOME", outputDir)
    finalizedBy integrationTestReportCWMS
}


task downloadAndUnzipInstaller {
    def zipUrl = 'https://github.com/opendcs/opendcs/releases/download/7.0.14/opendcs-7.0.14.zip'
    def outputDir = file("${buildDir}/opendcs-install")
    def zipFile = file("${buildDir}/download/opendcs-install.zip")

    outputs.dir(new File(outputDir, "opendcs-7.0.14"))

    doLast {
        if(!zipFile.exists()) {
            outputDir.mkdirs()
            zipFile.parentFile.mkdirs()
            new URL(zipUrl).withInputStream { inp ->
                zipFile.withOutputStream { out -> out << inp }
            }
            copy {
                //Skip the root dir as it is contains the version number which makes it hard
                //to work with through automation
                from zipTree(zipFile)
                into outputDir
            }
        }
    }
}

test {
    useJUnitPlatform {
        excludeTags "integration"
        excludeTags "integration-opentsdb-only"
        excludeTags "integration-cwms-only"
    }
}

tasks.register('integrationTestReportCWMS', JacocoReport) {
    group = "verification"
    dependsOn tasks.named('integrationTestCWMS')
    executionData = files(layout.buildDirectory.dir("jacoco").get().file("integrationTestCWMS.exec"))
    sourceDirectories.setFrom(files("src/main/java"))
    classDirectories.setFrom(files(layout.buildDirectory.dir("classes/java/main").get().getAsFile()))
    reports {
        xml.required.set(true)
    }
}

tasks.register('integrationTestReportOpenTSDB', JacocoReport) {
    group = "verification"
    dependsOn tasks.named('integrationTestOpenTSDB')
    executionData = files(layout.buildDirectory.dir("jacoco").get().file("integrationTestOpenTSDB.exec"))
    sourceDirectories.setFrom(files("src/main/java"))
    classDirectories.setFrom(files(layout.buildDirectory.dir("classes/java/main").get().getAsFile()))
    reports {
        xml.required.set(true)
    }
}
