/*
 *  Copyright 2025 OpenDCS Consortium and its Contributors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License")
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id "opendcs-rest-api.java-conventions"
    id "opendcs-rest-api.deps-conventions"
}

dependencies {
    implementation(libs.testcontainers.core)
    implementation(libs.rest.assured)
    implementation(libs.jersey.container.servlet)
    implementation(libs.webcompere.system.stubs.jupiter)
    implementation(libs.bundles.tomcat)
    implementation(libs.commons.io)
    implementation(libs.jul.to.slf4j)
    implementation(libs.slf4j.api)
    implementation(libs.opendcs)
    implementation(libs.opendcs.api)
    implementation(libs.opendcs.integrationtesting.fixtures)
    runtimeClasspath(libs.junit.api)
    runtimeClasspath(libs.junit.engine)
    runtimeClasspath(libs.junit.params)

    testImplementation(project(":opendcs-rest-api"))
    testImplementation(libs.apache.derby)
    testImplementation(libs.testcontainers.postgresql)
    testImplementation(libs.hec.testcontainers.cwms)
    testImplementation(libs.bundles.jdbi)
    testImplementation(libs.org.flywaydb.flyway.core)
    testImplementation(libs.commons.lang)
    testImplementation(libs.mockito.core)
    testImplementation(libs.mockito.inline)
    testImplementation(libs.mockito.junit.jupiter)
    testImplementation(libs.hamcrest)
    testImplementation(libs.nimbus)
    testImplementation(libs.jwt)

    testRuntimeOnly(libs.oracle.jdbc)
    testRuntimeOnly(libs.byte.buddy)
    testRuntimeOnly(libs.postgresql)
    testRuntimeOnly(libs.byte.buddy)
}

configurations.all {
    exclude group: 'org.eclipse.jetty', module: 'jetty-jsp'
    exclude group: "com.oracle.database.jdbc", module: "jmscommon"
    exclude group: "org.jooq.pro", module: "jooq-meta"
    exclude group: "org.jooq.pro", module: "jooq-codegen"
    exclude group: "com.mrsid"
    exclude group: "javax.help"
    exclude group: "javax.media"
    exclude group: "com.sun.media"
}


tasks.register('generateConfig', Copy) {
    doFirst {
        project.delete layout.buildDirectory.file("tomcat/")
        project.mkdir layout.buildDirectory.file("tomcat/logs")
    }
    from 'src/test/resources/tomcat'
    into layout.buildDirectory.file("tomcat")
    rename "tomcat-server.xml", "server.xml"
    inputs.dir "src/test/resources"
    outputs.dir layout.buildDirectory.file("tomcat/conf")
}

tasks.register('run', JavaExec) {
    dependsOn build
    def restWar = project(':opendcs-rest-api').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    def guiWar = project(':opendcs-web-client').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    group "application"
    dependsOn(':opendcs-rest-api:war', ':opendcs-web-client:war')
    dependsOn generateConfig
    dependsOn downloadAndUnzipInstaller


    mainClass = "org.opendcs.odcsapi.fixtures.TomcatServer"
    classpath += sourceSets.test.runtimeClasspath
    classpath += configurations.testRuntimeClasspath
    systemProperties += project.properties.findAll { k, v -> k.startsWith("testcontainer") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("opendcs") }
    systemProperties.put("org.apache.tomcat.util.digester.PROPERTY_SOURCE", "org.apache.tomcat.util.digester.EnvironmentPropertySource")
    systemProperties.put("DCSTOOL_USERDIR", "build/resources/test/tomcat/conf")

    def port = project.findProperty("opendcs.tomcat.port") ?: "7000"
    def databaseType = project.findProperty("opendcs.test.integration.db") ?: "OpenDCS-Postgres"
    def tomcatDir = layout.buildDirectory.file("tomcat").get()
    args tomcatDir, port, restWar, guiWar, databaseType
    def outputDir = downloadAndUnzipInstaller.outputs.files.singleFile
    systemProperties.put("DCSTOOL_HOME", outputDir)
}

tasks.register('owaspZap', JavaExec) {
    dependsOn build
    def restWar = project(':opendcs-rest-api').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    def guiWar = project(':opendcs-web-client').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    group "application"
    dependsOn(':opendcs-rest-api:war', ':opendcs-web-client:war')
    dependsOn generateConfig
    dependsOn downloadAndUnzipInstaller


    mainClass = "org.opendcs.odcsapi.owasp.OwaspZap"
    classpath += sourceSets.test.runtimeClasspath
    classpath += configurations.testRuntimeClasspath
    systemProperties += project.properties.findAll { k, v -> k.startsWith("testcontainer") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("opendcs") }
    systemProperties.put("org.apache.tomcat.util.digester.PROPERTY_SOURCE", "org.apache.tomcat.util.digester.EnvironmentPropertySource")
    systemProperties.put("DCSTOOL_USERDIR", "build/resources/test/owasp")
    def port = project.findProperty("opendcs.tomcat.port") ?: "8910"
    def databaseType = project.findProperty("opendcs.test.integration.db") ?: "OpenDCS-Postgres"
    def tomcatDir = layout.buildDirectory.file("tomcat").get()
    args tomcatDir, port, restWar, guiWar, databaseType
    def outputDir = downloadAndUnzipInstaller.outputs.files.singleFile
    systemProperties.put("DCSTOOL_HOME", outputDir)
}


tasks.register('downloadAndUnzipInstaller') {
    def zipUrl = "https://github.com/opendcs/opendcs/releases/download/${libs.versions.opendcs.get()}/opendcs-${libs.versions.opendcs.get()}.zip"
    def outputDir = project.layout.buildDirectory.dir("opendcs-install").get()
    def zipFile = project.layout.buildDirectory.dir("download/opendcs-install.zip").get().getAsFile()

    outputs.dir(outputDir.dir("opendcs-${libs.versions.opendcs.get()}"))

    doLast {
        if (!zipFile.exists()) {
            outputDir.getAsFile().mkdirs()
            zipFile.parentFile.mkdirs()
            new URL(zipUrl).withInputStream { inp ->
                zipFile.withOutputStream { out -> out << inp }
            }
            copy {
                from zipTree(zipFile)
                into outputDir
            }
        }
    }
}

tasks.register('integrationTestOpenTSDB', Test) {
    group "verification"
    useJUnitPlatform {
        includeTags "integration"
        includeTags "integration-opentsdb-only"
    }
    shouldRunAfter test
    dependsOn(':opendcs-rest-api:war')
    dependsOn(':opendcs-web-client:war')
    dependsOn generateConfig
    dependsOn downloadAndUnzipInstaller
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcatalina.base=${layout.buildDirectory.file("tomcat")}"
    jvmArgs += "-Dopendcs.test.integration.db=OpenDCS-Postgres"
    def restWar = project(':opendcs-rest-api').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    def guiWar = project(':opendcs-web-client').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    jvmArgs += "-Dopendcs.restapi.warfile=${restWar}"
    jvmArgs += "-Dopendcs.gui.warfile=${guiWar}"
    def outputDir = downloadAndUnzipInstaller.outputs.files.singleFile
    systemProperties.put("DCSTOOL_HOME", outputDir)
    systemProperties.put("DCSTOOL_USERDIR", "build/resources/test/tomcat/conf")
    finalizedBy integrationTestReportOpenTSDB
}

tasks.register('integrationTestCWMS', Test) {
    group "verification"
    useJUnitPlatform {
        includeTags "integration"
        includeTags "integration-cwms-only"
    }
    shouldRunAfter test
    dependsOn(':opendcs-rest-api:war')
    dependsOn(':opendcs-web-client:war')
    dependsOn generateConfig
    dependsOn downloadAndUnzipInstaller
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcatalina.base=${layout.buildDirectory.file("tomcat")}"
    jvmArgs += "-Dopendcs.test.integration.db=CWMS-Oracle"
    def restWar = project(':opendcs-rest-api').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    def guiWar = project(':opendcs-web-client').tasks.named('war').get().archiveFile.get().asFile.getAbsolutePath()
    jvmArgs += "-Dopendcs.restapi.warfile=${restWar}"
    jvmArgs += "-Dopendcs.gui.warfile=${guiWar}"
    def outputDir = downloadAndUnzipInstaller.outputs.files.singleFile
    systemProperties.put("DCSTOOL_HOME", outputDir)
    systemProperties.put("DCSTOOL_USERDIR", "build/resources/test/tomcat/conf")
    finalizedBy integrationTestReportCWMS
}


tasks.register('integrationTestReportCWMS', JacocoReport) {
    group = "verification"
    dependsOn tasks.named('integrationTestCWMS')
    additionalSourceDirs.setFrom(files(project(':opendcs-rest-api').sourceSets.main.allSource.srcDirs))
    executionData = files(
            layout.buildDirectory.dir("jacoco/integrationTestCWMS.exec")
    )
    classDirectories.setFrom(files(
            project(':opendcs-rest-api').sourceSets.main.output,
            sourceSets.main.output
    ))
    reports {
        xml.required.set(true)
    }
}

tasks.register('integrationTestReportOpenTSDB', JacocoReport) {
    group = "verification"
    dependsOn tasks.named('integrationTestOpenTSDB')
    additionalSourceDirs.setFrom(files(project(':opendcs-rest-api').sourceSets.main.allSource.srcDirs))
    executionData = files(
            layout.buildDirectory.dir("jacoco/integrationTestOpenTSDB.exec")
    )
    classDirectories.setFrom(files(
            project(':opendcs-rest-api').sourceSets.main.output,
            sourceSets.main.output
    ))
    reports {
        xml.required.set(true)
    }
}

test {
    useJUnitPlatform {
        excludeTags "integration"
        excludeTags "integration-opentsdb-only"
        excludeTags "integration-cwms-only"
    }
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    sonarqube {
        properties {
            property 'sonar.coverage.jacoco.xmlReportPaths', "${layout.buildDirectory.get().asFile.toString()}/reports/jacoco/integrationTestReportCWMS/integrationTestReportCWMS.xml," +
                    "${layout.buildDirectory.get().asFile.toString()}/reports/jacoco/integrationTestReportOpenTSDB/integrationTestReportOpenTSDB.xml"
        }
    }
}
