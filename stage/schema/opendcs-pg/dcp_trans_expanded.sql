DELETE from dcp_trans_day_map;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_01;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_01;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_01;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_01;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_01;
DROP TABLE IF EXISTS DCP_TRANS_01;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_01
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_01
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_01
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_01 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_01 ON DCP_TRANS_DATA_01 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_01 ON DCP_TRANS_01 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_01 ON DCP_TRANS_01 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_01 ON DCP_TRANS_01 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_01.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_01.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_01.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_01.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_01.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('01', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_01IDSEQ;
CREATE SEQUENCE DCP_TRANS_01IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_02;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_02;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_02;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_02;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_02;
DROP TABLE IF EXISTS DCP_TRANS_02;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_02
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_02
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_02
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_02 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_02 ON DCP_TRANS_DATA_02 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_02 ON DCP_TRANS_02 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_02 ON DCP_TRANS_02 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_02 ON DCP_TRANS_02 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_02.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_02.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_02.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_02.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_02.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('02', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_02IDSEQ;
CREATE SEQUENCE DCP_TRANS_02IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_03;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_03;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_03;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_03;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_03;
DROP TABLE IF EXISTS DCP_TRANS_03;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_03
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_03
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_03
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_03 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_03 ON DCP_TRANS_DATA_03 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_03 ON DCP_TRANS_03 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_03 ON DCP_TRANS_03 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_03 ON DCP_TRANS_03 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_03.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_03.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_03.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_03.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_03.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('03', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_03IDSEQ;
CREATE SEQUENCE DCP_TRANS_03IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_04;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_04;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_04;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_04;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_04;
DROP TABLE IF EXISTS DCP_TRANS_04;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_04
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_04
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_04
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_04 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_04 ON DCP_TRANS_DATA_04 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_04 ON DCP_TRANS_04 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_04 ON DCP_TRANS_04 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_04 ON DCP_TRANS_04 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_04.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_04.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_04.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_04.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_04.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('04', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_04IDSEQ;
CREATE SEQUENCE DCP_TRANS_04IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_05;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_05;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_05;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_05;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_05;
DROP TABLE IF EXISTS DCP_TRANS_05;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_05
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_05
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_05
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_05 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_05 ON DCP_TRANS_DATA_05 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_05 ON DCP_TRANS_05 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_05 ON DCP_TRANS_05 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_05 ON DCP_TRANS_05 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_05.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_05.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_05.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_05.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_05.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('05', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_05IDSEQ;
CREATE SEQUENCE DCP_TRANS_05IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_06;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_06;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_06;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_06;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_06;
DROP TABLE IF EXISTS DCP_TRANS_06;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_06
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_06
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_06
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_06 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_06 ON DCP_TRANS_DATA_06 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_06 ON DCP_TRANS_06 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_06 ON DCP_TRANS_06 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_06 ON DCP_TRANS_06 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_06.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_06.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_06.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_06.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_06.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('06', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_06IDSEQ;
CREATE SEQUENCE DCP_TRANS_06IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_07;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_07;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_07;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_07;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_07;
DROP TABLE IF EXISTS DCP_TRANS_07;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_07
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_07
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_07
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_07 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_07 ON DCP_TRANS_DATA_07 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_07 ON DCP_TRANS_07 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_07 ON DCP_TRANS_07 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_07 ON DCP_TRANS_07 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_07.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_07.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_07.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_07.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_07.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('07', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_07IDSEQ;
CREATE SEQUENCE DCP_TRANS_07IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_08;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_08;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_08;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_08;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_08;
DROP TABLE IF EXISTS DCP_TRANS_08;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_08
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_08
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_08
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_08 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_08 ON DCP_TRANS_DATA_08 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_08 ON DCP_TRANS_08 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_08 ON DCP_TRANS_08 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_08 ON DCP_TRANS_08 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_08.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_08.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_08.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_08.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_08.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('08', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_08IDSEQ;
CREATE SEQUENCE DCP_TRANS_08IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_09;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_09;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_09;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_09;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_09;
DROP TABLE IF EXISTS DCP_TRANS_09;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_09
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_09
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_09
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_09 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_09 ON DCP_TRANS_DATA_09 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_09 ON DCP_TRANS_09 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_09 ON DCP_TRANS_09 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_09 ON DCP_TRANS_09 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_09.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_09.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_09.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_09.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_09.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('09', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_09IDSEQ;
CREATE SEQUENCE DCP_TRANS_09IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_10;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_10;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_10;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_10;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_10;
DROP TABLE IF EXISTS DCP_TRANS_10;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_10
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_10
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_10
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_10 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_10 ON DCP_TRANS_DATA_10 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_10 ON DCP_TRANS_10 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_10 ON DCP_TRANS_10 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_10 ON DCP_TRANS_10 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_10.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_10.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_10.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_10.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_10.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('10', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_10IDSEQ;
CREATE SEQUENCE DCP_TRANS_10IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_11;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_11;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_11;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_11;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_11;
DROP TABLE IF EXISTS DCP_TRANS_11;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_11
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_11
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_11
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_11 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_11 ON DCP_TRANS_DATA_11 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_11 ON DCP_TRANS_11 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_11 ON DCP_TRANS_11 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_11 ON DCP_TRANS_11 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_11.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_11.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_11.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_11.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_11.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('11', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_11IDSEQ;
CREATE SEQUENCE DCP_TRANS_11IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_12;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_12;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_12;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_12;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_12;
DROP TABLE IF EXISTS DCP_TRANS_12;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_12
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_12
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_12
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_12 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_12 ON DCP_TRANS_DATA_12 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_12 ON DCP_TRANS_12 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_12 ON DCP_TRANS_12 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_12 ON DCP_TRANS_12 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_12.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_12.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_12.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_12.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_12.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('12', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_12IDSEQ;
CREATE SEQUENCE DCP_TRANS_12IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_13;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_13;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_13;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_13;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_13;
DROP TABLE IF EXISTS DCP_TRANS_13;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_13
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_13
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_13
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_13 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_13 ON DCP_TRANS_DATA_13 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_13 ON DCP_TRANS_13 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_13 ON DCP_TRANS_13 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_13 ON DCP_TRANS_13 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_13.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_13.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_13.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_13.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_13.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('13', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_13IDSEQ;
CREATE SEQUENCE DCP_TRANS_13IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_14;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_14;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_14;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_14;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_14;
DROP TABLE IF EXISTS DCP_TRANS_14;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_14
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_14
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_14
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_14 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_14 ON DCP_TRANS_DATA_14 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_14 ON DCP_TRANS_14 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_14 ON DCP_TRANS_14 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_14 ON DCP_TRANS_14 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_14.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_14.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_14.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_14.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_14.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('14', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_14IDSEQ;
CREATE SEQUENCE DCP_TRANS_14IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_15;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_15;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_15;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_15;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_15;
DROP TABLE IF EXISTS DCP_TRANS_15;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_15
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_15
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_15
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_15 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_15 ON DCP_TRANS_DATA_15 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_15 ON DCP_TRANS_15 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_15 ON DCP_TRANS_15 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_15 ON DCP_TRANS_15 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_15.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_15.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_15.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_15.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_15.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('15', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_15IDSEQ;
CREATE SEQUENCE DCP_TRANS_15IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_16;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_16;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_16;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_16;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_16;
DROP TABLE IF EXISTS DCP_TRANS_16;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_16
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_16
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_16
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_16 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_16 ON DCP_TRANS_DATA_16 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_16 ON DCP_TRANS_16 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_16 ON DCP_TRANS_16 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_16 ON DCP_TRANS_16 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_16.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_16.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_16.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_16.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_16.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('16', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_16IDSEQ;
CREATE SEQUENCE DCP_TRANS_16IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_17;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_17;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_17;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_17;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_17;
DROP TABLE IF EXISTS DCP_TRANS_17;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_17
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_17
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_17
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_17 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_17 ON DCP_TRANS_DATA_17 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_17 ON DCP_TRANS_17 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_17 ON DCP_TRANS_17 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_17 ON DCP_TRANS_17 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_17.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_17.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_17.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_17.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_17.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('17', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_17IDSEQ;
CREATE SEQUENCE DCP_TRANS_17IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_18;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_18;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_18;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_18;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_18;
DROP TABLE IF EXISTS DCP_TRANS_18;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_18
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_18
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_18
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_18 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_18 ON DCP_TRANS_DATA_18 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_18 ON DCP_TRANS_18 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_18 ON DCP_TRANS_18 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_18 ON DCP_TRANS_18 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_18.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_18.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_18.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_18.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_18.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('18', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_18IDSEQ;
CREATE SEQUENCE DCP_TRANS_18IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_19;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_19;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_19;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_19;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_19;
DROP TABLE IF EXISTS DCP_TRANS_19;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_19
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_19
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_19
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_19 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_19 ON DCP_TRANS_DATA_19 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_19 ON DCP_TRANS_19 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_19 ON DCP_TRANS_19 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_19 ON DCP_TRANS_19 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_19.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_19.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_19.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_19.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_19.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('19', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_19IDSEQ;
CREATE SEQUENCE DCP_TRANS_19IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_20;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_20;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_20;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_20;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_20;
DROP TABLE IF EXISTS DCP_TRANS_20;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_20
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_20
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_20
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_20 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_20 ON DCP_TRANS_DATA_20 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_20 ON DCP_TRANS_20 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_20 ON DCP_TRANS_20 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_20 ON DCP_TRANS_20 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_20.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_20.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_20.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_20.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_20.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('20', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_20IDSEQ;
CREATE SEQUENCE DCP_TRANS_20IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_21;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_21;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_21;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_21;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_21;
DROP TABLE IF EXISTS DCP_TRANS_21;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_21
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_21
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_21
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_21 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_21 ON DCP_TRANS_DATA_21 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_21 ON DCP_TRANS_21 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_21 ON DCP_TRANS_21 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_21 ON DCP_TRANS_21 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_21.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_21.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_21.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_21.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_21.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('21', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_21IDSEQ;
CREATE SEQUENCE DCP_TRANS_21IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_22;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_22;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_22;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_22;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_22;
DROP TABLE IF EXISTS DCP_TRANS_22;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_22
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_22
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_22
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_22 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_22 ON DCP_TRANS_DATA_22 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_22 ON DCP_TRANS_22 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_22 ON DCP_TRANS_22 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_22 ON DCP_TRANS_22 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_22.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_22.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_22.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_22.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_22.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('22', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_22IDSEQ;
CREATE SEQUENCE DCP_TRANS_22IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_23;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_23;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_23;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_23;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_23;
DROP TABLE IF EXISTS DCP_TRANS_23;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_23
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_23
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_23
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_23 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_23 ON DCP_TRANS_DATA_23 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_23 ON DCP_TRANS_23 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_23 ON DCP_TRANS_23 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_23 ON DCP_TRANS_23 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_23.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_23.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_23.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_23.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_23.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('23', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_23IDSEQ;
CREATE SEQUENCE DCP_TRANS_23IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_24;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_24;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_24;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_24;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_24;
DROP TABLE IF EXISTS DCP_TRANS_24;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_24
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_24
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_24
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_24 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_24 ON DCP_TRANS_DATA_24 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_24 ON DCP_TRANS_24 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_24 ON DCP_TRANS_24 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_24 ON DCP_TRANS_24 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_24.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_24.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_24.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_24.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_24.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('24', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_24IDSEQ;
CREATE SEQUENCE DCP_TRANS_24IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_25;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_25;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_25;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_25;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_25;
DROP TABLE IF EXISTS DCP_TRANS_25;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_25
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_25
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_25
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_25 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_25 ON DCP_TRANS_DATA_25 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_25 ON DCP_TRANS_25 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_25 ON DCP_TRANS_25 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_25 ON DCP_TRANS_25 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_25.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_25.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_25.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_25.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_25.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('25', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_25IDSEQ;
CREATE SEQUENCE DCP_TRANS_25IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_26;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_26;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_26;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_26;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_26;
DROP TABLE IF EXISTS DCP_TRANS_26;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_26
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_26
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_26
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_26 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_26 ON DCP_TRANS_DATA_26 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_26 ON DCP_TRANS_26 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_26 ON DCP_TRANS_26 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_26 ON DCP_TRANS_26 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_26.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_26.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_26.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_26.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_26.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('26', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_26IDSEQ;
CREATE SEQUENCE DCP_TRANS_26IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_27;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_27;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_27;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_27;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_27;
DROP TABLE IF EXISTS DCP_TRANS_27;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_27
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_27
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_27
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_27 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_27 ON DCP_TRANS_DATA_27 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_27 ON DCP_TRANS_27 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_27 ON DCP_TRANS_27 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_27 ON DCP_TRANS_27 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_27.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_27.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_27.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_27.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_27.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('27', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_27IDSEQ;
CREATE SEQUENCE DCP_TRANS_27IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_28;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_28;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_28;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_28;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_28;
DROP TABLE IF EXISTS DCP_TRANS_28;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_28
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_28
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_28
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_28 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_28 ON DCP_TRANS_DATA_28 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_28 ON DCP_TRANS_28 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_28 ON DCP_TRANS_28 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_28 ON DCP_TRANS_28 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_28.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_28.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_28.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_28.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_28.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('28', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_28IDSEQ;
CREATE SEQUENCE DCP_TRANS_28IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_29;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_29;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_29;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_29;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_29;
DROP TABLE IF EXISTS DCP_TRANS_29;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_29
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_29
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_29
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_29 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_29 ON DCP_TRANS_DATA_29 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_29 ON DCP_TRANS_29 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_29 ON DCP_TRANS_29 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_29 ON DCP_TRANS_29 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_29.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_29.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_29.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_29.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_29.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('29', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_29IDSEQ;
CREATE SEQUENCE DCP_TRANS_29IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_30;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_30;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_30;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_30;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_30;
DROP TABLE IF EXISTS DCP_TRANS_30;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_30
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_30
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_30
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_30 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_30 ON DCP_TRANS_DATA_30 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_30 ON DCP_TRANS_30 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_30 ON DCP_TRANS_30 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_30 ON DCP_TRANS_30 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_30.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_30.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_30.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_30.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_30.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('30', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_30IDSEQ;
CREATE SEQUENCE DCP_TRANS_30IDSEQ;

/* Drop Indexes */

DROP INDEX IF EXISTS DCP_TRANS_DATA_REC_IDX_31;
DROP INDEX IF EXISTS DCP_TRANS_ADDR_IDX_31;
DROP INDEX IF EXISTS DCP_TRANS_CHAN_IDX_31;
DROP INDEX IF EXISTS DCP_TRANS_MEDIUM_TYPE_31;



/* Drop Tables */

DROP TABLE IF EXISTS DCP_TRANS_DATA_31;
DROP TABLE IF EXISTS DCP_TRANS_31;




/* Create Tables */

CREATE TABLE DCP_TRANS_DATA_31
(
	RECORD_ID BIGINT NOT NULL,
	BLOCK_NUM INT NOT NULL,
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID, BLOCK_NUM)
) WITHOUT OIDS;


CREATE TABLE DCP_TRANS_31
(
	RECORD_ID BIGINT NOT NULL UNIQUE,
	-- 'G' = GOES, 'L' = Data Logger, 'I' = Iridium.
	-- This field determines how the header should be parsed.
	MEDIUM_TYPE VARCHAR(1) NOT NULL,
	MEDIUM_ID VARCHAR(64) NOT NULL,
	LOCAL_RECV_TIME BIGINT NOT NULL,
	TRANSMIT_TIME BIGINT NOT NULL,
	FAILURE_CODES VARCHAR(8) NOT NULL,
	-- Second of day when the transmit window started
	WINDOW_START_SOD INT,
	-- Transmit window length in seconds
	WINDOW_LENGTH INT,
	XMIT_INTERVAL INT,
	CARRIER_START BIGINT,
	CARRIER_STOP BIGINT,
	FLAGS INT NOT NULL,
	CHANNEL INT NOT NULL,
	BATTERY FLOAT,
	-- Total message length, determines number of additional blocks
	-- required to store message.
	MSG_LENGTH INT NOT NULL,
	-- First block of data. Very long messages will have additional blocks.
	MSG_DATA VARCHAR(4000) NOT NULL,
	PRIMARY KEY (RECORD_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE DCP_TRANS_DATA_31
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES DCP_TRANS_31 (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX DCP_TRANS_DATA_REC_IDX_31 ON DCP_TRANS_DATA_31 USING BTREE (RECORD_ID);
CREATE INDEX DCP_TRANS_ADDR_IDX_31 ON DCP_TRANS_31 USING BTREE (MEDIUM_TYPE, MEDIUM_ID);
-- Used for GOES channel expansion in DCP Monitor
CREATE INDEX DCP_TRANS_CHAN_IDX_31 ON DCP_TRANS_31 USING BTREE (CHANNEL);
CREATE INDEX DCP_TRANS_MEDIUM_TYPE_31 ON DCP_TRANS_31 USING BTREE (MEDIUM_TYPE);



/* Comments */

COMMENT ON COLUMN DCP_TRANS_31.MEDIUM_TYPE IS '''G'' = GOES, ''L'' = Data Logger, ''I'' = Iridium.
This field determines how the header should be parsed.';
COMMENT ON COLUMN DCP_TRANS_31.WINDOW_START_SOD IS 'Second of day when the transmit window started';
COMMENT ON COLUMN DCP_TRANS_31.WINDOW_LENGTH IS 'Transmit window length in seconds';
COMMENT ON COLUMN DCP_TRANS_31.MSG_LENGTH IS 'Total message length, determines number of additional blocks
required to store message.';
COMMENT ON COLUMN DCP_TRANS_31.MSG_DATA IS 'First block of data. Very long messages will have additional blocks.';



INSERT INTO DCP_TRANS_DAY_MAP VALUES('31', null);
DROP SEQUENCE IF EXISTS DCP_TRANS_31IDSEQ;
CREATE SEQUENCE DCP_TRANS_31IDSEQ;
